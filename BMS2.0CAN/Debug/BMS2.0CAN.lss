
BMS2.0CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005328  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000080  20000000  00005328  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ae4  20000080  000053a8  00010080  2**2
                  ALLOC
  3 .stack        00002004  20000b64  00005e8c  00010080  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f9d4  00000000  00000000  00010103  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ee9  00000000  00000000  0003fad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006cce  00000000  00000000  000439c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000788  00000000  00000000  0004a68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007d8  00000000  00000000  0004ae16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009aed  00000000  00000000  0004b5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010186  00000000  00000000  000550db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a4849  00000000  00000000  00065261  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c48  00000000  00000000  00109aac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002b68 	.word	0x20002b68
       4:	00002a2d 	.word	0x00002a2d
       8:	00002a29 	.word	0x00002a29
       c:	00002a29 	.word	0x00002a29
	...
      2c:	00002a29 	.word	0x00002a29
	...
      38:	00002a29 	.word	0x00002a29
      3c:	00002a29 	.word	0x00002a29
      40:	00002a29 	.word	0x00002a29
      44:	00002a29 	.word	0x00002a29
      48:	000003dd 	.word	0x000003dd
      4c:	00002a29 	.word	0x00002a29
      50:	00002a29 	.word	0x00002a29
      54:	00002a29 	.word	0x00002a29
      58:	00002a29 	.word	0x00002a29
      5c:	00002a29 	.word	0x00002a29
      60:	00001089 	.word	0x00001089
      64:	00001c5d 	.word	0x00001c5d
      68:	00001c6d 	.word	0x00001c6d
      6c:	00001c7d 	.word	0x00001c7d
      70:	00001c8d 	.word	0x00001c8d
      74:	00001c9d 	.word	0x00001c9d
      78:	00001cad 	.word	0x00001cad
      7c:	000007c1 	.word	0x000007c1
      80:	00002a29 	.word	0x00002a29
      84:	00000f7d 	.word	0x00000f7d
      88:	00000f8d 	.word	0x00000f8d
      8c:	00000f9d 	.word	0x00000f9d
      90:	00002a29 	.word	0x00002a29
      94:	00002a29 	.word	0x00002a29
      98:	00002a29 	.word	0x00002a29
      9c:	00002a29 	.word	0x00002a29
      a0:	00002a29 	.word	0x00002a29
      a4:	000001d9 	.word	0x000001d9
      a8:	000001e9 	.word	0x000001e9
      ac:	00002a29 	.word	0x00002a29
      b0:	00002a29 	.word	0x00002a29
      b4:	00002a29 	.word	0x00002a29
      b8:	00002a29 	.word	0x00002a29

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000080 	.word	0x20000080
      dc:	00000000 	.word	0x00000000
      e0:	00005328 	.word	0x00005328

000000e4 <frame_dummy>:
      e4:	b508      	push	{r3, lr}
      e6:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4908      	ldr	r1, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd08      	pop	{r3, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	00005328 	.word	0x00005328
     110:	20000084 	.word	0x20000084
     114:	00005328 	.word	0x00005328
     118:	00000000 	.word	0x00000000

0000011c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     11c:	b538      	push	{r3, r4, r5, lr}
	struct adc_module *module = _adc_instances[instance];
     11e:	0080      	lsls	r0, r0, #2
     120:	4b2c      	ldr	r3, [pc, #176]	; (1d4 <_adc_interrupt_handler+0xb8>)
     122:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     124:	6823      	ldr	r3, [r4, #0]
     126:	799d      	ldrb	r5, [r3, #6]
     128:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     12a:	07ea      	lsls	r2, r5, #31
     12c:	d535      	bpl.n	19a <_adc_interrupt_handler+0x7e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     12e:	7ee2      	ldrb	r2, [r4, #27]
     130:	07d2      	lsls	r2, r2, #31
     132:	d532      	bpl.n	19a <_adc_interrupt_handler+0x7e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     134:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     136:	07d2      	lsls	r2, r2, #31
     138:	d52f      	bpl.n	19a <_adc_interrupt_handler+0x7e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     13a:	2201      	movs	r2, #1
     13c:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     13e:	6962      	ldr	r2, [r4, #20]
     140:	1c93      	adds	r3, r2, #2
     142:	6163      	str	r3, [r4, #20]
     144:	6823      	ldr	r3, [r4, #0]
     146:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     148:	b29b      	uxth	r3, r3
     14a:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
     14c:	8b23      	ldrh	r3, [r4, #24]
     14e:	3b01      	subs	r3, #1
     150:	b29b      	uxth	r3, r3
     152:	8323      	strh	r3, [r4, #24]
     154:	2b00      	cmp	r3, #0
     156:	d015      	beq.n	184 <_adc_interrupt_handler+0x68>
				if (module->software_trigger == true
     158:	7f63      	ldrb	r3, [r4, #29]
     15a:	2b00      	cmp	r3, #0
     15c:	d01d      	beq.n	19a <_adc_interrupt_handler+0x7e>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     15e:	6822      	ldr	r2, [r4, #0]
     160:	79d3      	ldrb	r3, [r2, #7]
     162:	b25b      	sxtb	r3, r3
     164:	2b00      	cmp	r3, #0
     166:	db18      	blt.n	19a <_adc_interrupt_handler+0x7e>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     168:	8c13      	ldrh	r3, [r2, #32]
     16a:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     16c:	2b00      	cmp	r3, #0
     16e:	d1fb      	bne.n	168 <_adc_interrupt_handler+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     170:	7e11      	ldrb	r1, [r2, #24]
     172:	3302      	adds	r3, #2
     174:	430b      	orrs	r3, r1
     176:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     178:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
     17a:	8c13      	ldrh	r3, [r2, #32]
     17c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     17e:	2b00      	cmp	r3, #0
     180:	d1fb      	bne.n	17a <_adc_interrupt_handler+0x5e>
     182:	e00a      	b.n	19a <_adc_interrupt_handler+0x7e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     184:	7f23      	ldrb	r3, [r4, #28]
     186:	2b05      	cmp	r3, #5
     188:	d107      	bne.n	19a <_adc_interrupt_handler+0x7e>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     18a:	2300      	movs	r3, #0
     18c:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     18e:	3301      	adds	r3, #1
     190:	6822      	ldr	r2, [r4, #0]
     192:	7113      	strb	r3, [r2, #4]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     194:	1c20      	adds	r0, r4, #0
     196:	68a3      	ldr	r3, [r4, #8]
     198:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     19a:	076b      	lsls	r3, r5, #29
     19c:	d50b      	bpl.n	1b6 <_adc_interrupt_handler+0x9a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     19e:	2304      	movs	r3, #4
     1a0:	6822      	ldr	r2, [r4, #0]
     1a2:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     1a4:	7ee3      	ldrb	r3, [r4, #27]
     1a6:	079b      	lsls	r3, r3, #30
     1a8:	d505      	bpl.n	1b6 <_adc_interrupt_handler+0x9a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     1aa:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     1ac:	079b      	lsls	r3, r3, #30
     1ae:	d502      	bpl.n	1b6 <_adc_interrupt_handler+0x9a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     1b0:	1c20      	adds	r0, r4, #0
     1b2:	68e3      	ldr	r3, [r4, #12]
     1b4:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     1b6:	07ab      	lsls	r3, r5, #30
     1b8:	d50b      	bpl.n	1d2 <_adc_interrupt_handler+0xb6>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     1ba:	2302      	movs	r3, #2
     1bc:	6822      	ldr	r2, [r4, #0]
     1be:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1c0:	7ee3      	ldrb	r3, [r4, #27]
     1c2:	075b      	lsls	r3, r3, #29
     1c4:	d505      	bpl.n	1d2 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     1c6:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1c8:	075b      	lsls	r3, r3, #29
     1ca:	d502      	bpl.n	1d2 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1cc:	6923      	ldr	r3, [r4, #16]
     1ce:	1c20      	adds	r0, r4, #0
     1d0:	4798      	blx	r3
		}
	}
}
     1d2:	bd38      	pop	{r3, r4, r5, pc}
     1d4:	20000adc 	.word	0x20000adc

000001d8 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     1d8:	b508      	push	{r3, lr}
     1da:	2000      	movs	r0, #0
     1dc:	4b01      	ldr	r3, [pc, #4]	; (1e4 <ADC0_Handler+0xc>)
     1de:	4798      	blx	r3
     1e0:	bd08      	pop	{r3, pc}
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	0000011d 	.word	0x0000011d

000001e8 <ADC1_Handler>:
     1e8:	b508      	push	{r3, lr}
     1ea:	2001      	movs	r0, #1
     1ec:	4b01      	ldr	r3, [pc, #4]	; (1f4 <ADC1_Handler+0xc>)
     1ee:	4798      	blx	r3
     1f0:	bd08      	pop	{r3, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	0000011d 	.word	0x0000011d

000001f8 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1f8:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1fa:	2104      	movs	r1, #4
     1fc:	4b07      	ldr	r3, [pc, #28]	; (21c <rtc_calendar_enable+0x24>)
     1fe:	6019      	str	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     200:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     202:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     204:	2b00      	cmp	r3, #0
     206:	d1fc      	bne.n	202 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;
     208:	8811      	ldrh	r1, [r2, #0]
     20a:	3302      	adds	r3, #2
     20c:	430b      	orrs	r3, r1
     20e:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     210:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     212:	6913      	ldr	r3, [r2, #16]
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
     214:	2b00      	cmp	r3, #0
     216:	d1fc      	bne.n	212 <rtc_calendar_enable+0x1a>
		/* Wait for synchronization */
	}
}
     218:	4770      	bx	lr
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	e000e100 	.word	0xe000e100

00000220 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     220:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     222:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     224:	2404      	movs	r4, #4
     226:	2380      	movs	r3, #128	; 0x80
     228:	4907      	ldr	r1, [pc, #28]	; (248 <rtc_calendar_disable+0x28>)
     22a:	50cc      	str	r4, [r1, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     22c:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     22e:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     230:	2b00      	cmp	r3, #0
     232:	d1fc      	bne.n	22e <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;
     234:	8813      	ldrh	r3, [r2, #0]
     236:	2102      	movs	r1, #2
     238:	438b      	bics	r3, r1
     23a:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     23c:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     23e:	6913      	ldr	r3, [r2, #16]
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
     240:	2b00      	cmp	r3, #0
     242:	d1fc      	bne.n	23e <rtc_calendar_disable+0x1e>
		/* Wait for synchronization */
	}
}
     244:	bd10      	pop	{r4, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	e000e100 	.word	0xe000e100

0000024c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     24c:	b538      	push	{r3, r4, r5, lr}
     24e:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     250:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     252:	4b09      	ldr	r3, [pc, #36]	; (278 <rtc_calendar_reset+0x2c>)
     254:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     256:	2300      	movs	r3, #0
     258:	8623      	strh	r3, [r4, #48]	; 0x30
	module->enabled_callback    = 0;
     25a:	8663      	strh	r3, [r4, #50]	; 0x32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     25c:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     25e:	6913      	ldr	r3, [r2, #16]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     260:	2b00      	cmp	r3, #0
     262:	d1fc      	bne.n	25e <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;
     264:	882a      	ldrh	r2, [r5, #0]
     266:	3301      	adds	r3, #1
     268:	4313      	orrs	r3, r2
     26a:	802b      	strh	r3, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     26c:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     26e:	6913      	ldr	r3, [r2, #16]
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;

	while (rtc_calendar_is_syncing(module)) {
     270:	2b00      	cmp	r3, #0
     272:	d1fc      	bne.n	26e <rtc_calendar_reset+0x22>
		/* Wait for synchronization */
	}
}
     274:	bd38      	pop	{r3, r4, r5, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	00000221 	.word	0x00000221

0000027c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     27c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     27e:	88cb      	ldrh	r3, [r1, #6]
     280:	88c2      	ldrh	r2, [r0, #6]
     282:	1a9b      	subs	r3, r3, r2
     284:	069a      	lsls	r2, r3, #26

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     286:	790b      	ldrb	r3, [r1, #4]
     288:	045c      	lsls	r4, r3, #17
	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     28a:	794b      	ldrb	r3, [r1, #5]
     28c:	059b      	lsls	r3, r3, #22
     28e:	4323      	orrs	r3, r4

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     290:	788c      	ldrb	r4, [r1, #2]
     292:	0324      	lsls	r4, r4, #12
     294:	4323      	orrs	r3, r4
     296:	4313      	orrs	r3, r2

	/* Check if 24h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     298:	7902      	ldrb	r2, [r0, #4]
     29a:	2a00      	cmp	r2, #0
     29c:	d105      	bne.n	2aa <rtc_calendar_time_to_register_value+0x2e>
     29e:	78ca      	ldrb	r2, [r1, #3]
     2a0:	2a00      	cmp	r2, #0
     2a2:	d002      	beq.n	2aa <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= (0x10u << RTC_MODE2_CLOCK_HOUR_Pos);
     2a4:	2280      	movs	r2, #128	; 0x80
     2a6:	0252      	lsls	r2, r2, #9
     2a8:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     2aa:	7848      	ldrb	r0, [r1, #1]
     2ac:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     2ae:	780a      	ldrb	r2, [r1, #0]
     2b0:	4310      	orrs	r0, r2
     2b2:	4318      	orrs	r0, r3

	return register_value;
}
     2b4:	bd10      	pop	{r4, pc}
     2b6:	46c0      	nop			; (mov r8, r8)

000002b8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     2ba:	6806      	ldr	r6, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     2bc:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     2be:	2a01      	cmp	r2, #1
     2c0:	d815      	bhi.n	2ee <rtc_calendar_set_alarm+0x36>
     2c2:	1c14      	adds	r4, r2, #0
     2c4:	1c0d      	adds	r5, r1, #0
     2c6:	1c07      	adds	r7, r0, #0
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     2c8:	4b0a      	ldr	r3, [pc, #40]	; (2f4 <rtc_calendar_set_alarm+0x3c>)
     2ca:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     2cc:	6933      	ldr	r3, [r6, #16]
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));

	while (rtc_calendar_is_syncing(module)) {
     2ce:	2b00      	cmp	r3, #0
     2d0:	d1fc      	bne.n	2cc <rtc_calendar_set_alarm+0x14>
     2d2:	00e2      	lsls	r2, r4, #3
     2d4:	18b2      	adds	r2, r6, r2
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     2d6:	6210      	str	r0, [r2, #32]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     2d8:	6839      	ldr	r1, [r7, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     2da:	690b      	ldr	r3, [r1, #16]
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;

	while (rtc_calendar_is_syncing(module)) {
     2dc:	2b00      	cmp	r3, #0
     2de:	d1fc      	bne.n	2da <rtc_calendar_set_alarm+0x22>
			/* Wait for synchronization */
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     2e0:	7a29      	ldrb	r1, [r5, #8]
     2e2:	3324      	adds	r3, #36	; 0x24
     2e4:	54d1      	strb	r1, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     2e6:	683a      	ldr	r2, [r7, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     2e8:	6913      	ldr	r3, [r2, #16]
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	while (rtc_calendar_is_syncing(module)) {
     2ea:	2b00      	cmp	r3, #0
     2ec:	d1fc      	bne.n	2e8 <rtc_calendar_set_alarm+0x30>
			/* Wait for synchronization */
	}

	return STATUS_OK;
}
     2ee:	1c18      	adds	r0, r3, #0
     2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000027d 	.word	0x0000027d

000002f8 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
     2f8:	b538      	push	{r3, r4, r5, lr}
     2fa:	1c05      	adds	r5, r0, #0
     2fc:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     2fe:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     300:	4a16      	ldr	r2, [pc, #88]	; (35c <rtc_calendar_init+0x64>)
     302:	6953      	ldr	r3, [r2, #20]
     304:	2180      	movs	r1, #128	; 0x80
     306:	0089      	lsls	r1, r1, #2
     308:	430b      	orrs	r3, r1
     30a:	6153      	str	r3, [r2, #20]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     30c:	2200      	movs	r2, #0
     30e:	4b14      	ldr	r3, [pc, #80]	; (360 <rtc_calendar_init+0x68>)
     310:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
     312:	4b14      	ldr	r3, [pc, #80]	; (364 <rtc_calendar_init+0x6c>)
     314:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
     316:	78e3      	ldrb	r3, [r4, #3]
     318:	712b      	strb	r3, [r5, #4]
	module->year_init_value     = config->year_init_value;
     31a:	88a3      	ldrh	r3, [r4, #4]
     31c:	80eb      	strh	r3, [r5, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     31e:	4b12      	ldr	r3, [pc, #72]	; (368 <rtc_calendar_init+0x70>)
     320:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     322:	682a      	ldr	r2, [r5, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     324:	8823      	ldrh	r3, [r4, #0]

#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	if(config->enable_read_sync) {
     326:	79a1      	ldrb	r1, [r4, #6]
     328:	2900      	cmp	r1, #0
     32a:	d102      	bne.n	332 <rtc_calendar_init+0x3a>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     32c:	3108      	adds	r1, #8
     32e:	430b      	orrs	r3, r1
     330:	e001      	b.n	336 <rtc_calendar_init+0x3e>

#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	if(config->enable_read_sync) {
		tmp_reg |= RTC_MODE2_CTRLA_CLOCKSYNC;
     332:	490e      	ldr	r1, [pc, #56]	; (36c <rtc_calendar_init+0x74>)
     334:	430b      	orrs	r3, r1
	}
#endif

	/* Check clock mode. */
	if (!(config->clock_24h)) {
     336:	78e1      	ldrb	r1, [r4, #3]
     338:	2900      	cmp	r1, #0
     33a:	d101      	bne.n	340 <rtc_calendar_init+0x48>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRLA_CLKREP;
     33c:	3140      	adds	r1, #64	; 0x40
     33e:	430b      	orrs	r3, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
     340:	78a1      	ldrb	r1, [r4, #2]
     342:	2900      	cmp	r1, #0
     344:	d001      	beq.n	34a <rtc_calendar_init+0x52>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRLA_MATCHCLR;
     346:	2180      	movs	r1, #128	; 0x80
     348:	430b      	orrs	r3, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRLA.reg = tmp_reg;
     34a:	8013      	strh	r3, [r2, #0]

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     34c:	1c21      	adds	r1, r4, #0
     34e:	3108      	adds	r1, #8
     350:	1c28      	adds	r0, r5, #0
     352:	2200      	movs	r2, #0
     354:	4b06      	ldr	r3, [pc, #24]	; (370 <rtc_calendar_init+0x78>)
     356:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
     358:	bd38      	pop	{r3, r4, r5, pc}
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	40000800 	.word	0x40000800
     360:	40001400 	.word	0x40001400
     364:	0000024d 	.word	0x0000024d
     368:	20000ae4 	.word	0x20000ae4
     36c:	00008008 	.word	0x00008008
     370:	000002b9 	.word	0x000002b9

00000374 <rtc_calendar_register_callback>:
		|| callback_type == RTC_CALENDAR_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else if (callback_type > (RTC_NUM_OF_ALARMS + RTC_PER_NUM)) {
     374:	2a09      	cmp	r2, #9
     376:	d901      	bls.n	37c <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     378:	2017      	movs	r0, #23
     37a:	e00a      	b.n	392 <rtc_calendar_register_callback+0x1e>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     37c:	1c93      	adds	r3, r2, #2
     37e:	009b      	lsls	r3, r3, #2
     380:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     382:	8e01      	ldrh	r1, [r0, #48]	; 0x30
     384:	2301      	movs	r3, #1
     386:	4093      	lsls	r3, r2
     388:	1c1a      	adds	r2, r3, #0
     38a:	430a      	orrs	r2, r1
     38c:	b292      	uxth	r2, r2
     38e:	8602      	strh	r2, [r0, #48]	; 0x30
     390:	2000      	movs	r0, #0
	}

	return status;
}
     392:	4770      	bx	lr

00000394 <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     394:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     396:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     398:	2909      	cmp	r1, #9
     39a:	d102      	bne.n	3a2 <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     39c:	4a0e      	ldr	r2, [pc, #56]	; (3d8 <rtc_calendar_enable_callback+0x44>)
     39e:	815a      	strh	r2, [r3, #10]
     3a0:	e011      	b.n	3c6 <rtc_calendar_enable_callback+0x32>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_CALENDAR_CALLBACK_TAMPER) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
     3a2:	2907      	cmp	r1, #7
     3a4:	d805      	bhi.n	3b2 <rtc_calendar_enable_callback+0x1e>
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
     3a6:	2201      	movs	r2, #1
     3a8:	408a      	lsls	r2, r1
     3aa:	24ff      	movs	r4, #255	; 0xff
     3ac:	4022      	ands	r2, r4
     3ae:	815a      	strh	r2, [r3, #10]
     3b0:	e009      	b.n	3c6 <rtc_calendar_enable_callback+0x32>
	}else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << (callback_type - RTC_PER_NUM));
     3b2:	2280      	movs	r2, #128	; 0x80
     3b4:	0052      	lsls	r2, r2, #1
     3b6:	1c0c      	adds	r4, r1, #0
     3b8:	3c08      	subs	r4, #8
     3ba:	40a2      	lsls	r2, r4
     3bc:	1c14      	adds	r4, r2, #0
     3be:	2280      	movs	r2, #128	; 0x80
     3c0:	0052      	lsls	r2, r2, #1
     3c2:	4022      	ands	r2, r4
     3c4:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     3c6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
     3c8:	2301      	movs	r3, #1
     3ca:	408b      	lsls	r3, r1
     3cc:	1c19      	adds	r1, r3, #0
     3ce:	4311      	orrs	r1, r2
     3d0:	b289      	uxth	r1, r1
     3d2:	8641      	strh	r1, [r0, #50]	; 0x32
}
     3d4:	bd10      	pop	{r4, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	ffff8000 	.word	0xffff8000

000003dc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3de:	465f      	mov	r7, fp
     3e0:	4656      	mov	r6, sl
     3e2:	464d      	mov	r5, r9
     3e4:	4644      	mov	r4, r8
     3e6:	b4f0      	push	{r4, r5, r6, r7}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     3e8:	4b23      	ldr	r3, [pc, #140]	; (478 <RTC_Handler+0x9c>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	469a      	mov	sl, r3

	Rtc *const rtc_module = module->hw;
     3ee:	681e      	ldr	r6, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     3f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
     3f2:	4652      	mov	r2, sl
     3f4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
     3f6:	401a      	ands	r2, r3
     3f8:	4690      	mov	r8, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     3fa:	89b3      	ldrh	r3, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     3fc:	8972      	ldrh	r2, [r6, #10]
     3fe:	4013      	ands	r3, r2

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     400:	b21a      	sxth	r2, r3
     402:	2a00      	cmp	r2, #0
     404:	da08      	bge.n	418 <RTC_Handler+0x3c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     406:	4643      	mov	r3, r8
     408:	059b      	lsls	r3, r3, #22
     40a:	d502      	bpl.n	412 <RTC_Handler+0x36>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     40c:	4653      	mov	r3, sl
     40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     410:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     412:	4b1a      	ldr	r3, [pc, #104]	; (47c <RTC_Handler+0xa0>)
     414:	81b3      	strh	r3, [r6, #12]
     416:	e028      	b.n	46a <RTC_Handler+0x8e>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
     418:	27ff      	movs	r7, #255	; 0xff
     41a:	401f      	ands	r7, r3
     41c:	d01a      	beq.n	454 <RTC_Handler+0x78>
     41e:	2400      	movs	r4, #0
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     420:	2301      	movs	r3, #1
     422:	4699      	mov	r9, r3
			  && (callback_mask & (1 << i))) {
				module->callbacks[i]();
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     424:	33fe      	adds	r3, #254	; 0xfe
     426:	469b      	mov	fp, r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     428:	1c23      	adds	r3, r4, #0
     42a:	464d      	mov	r5, r9
     42c:	40a5      	lsls	r5, r4
     42e:	422f      	tst	r7, r5
     430:	d009      	beq.n	446 <RTC_Handler+0x6a>
			  && (callback_mask & (1 << i))) {
     432:	4642      	mov	r2, r8
     434:	4122      	asrs	r2, r4
     436:	4649      	mov	r1, r9
     438:	4211      	tst	r1, r2
     43a:	d004      	beq.n	446 <RTC_Handler+0x6a>
				module->callbacks[i]();
     43c:	3302      	adds	r3, #2
     43e:	009b      	lsls	r3, r3, #2
     440:	4652      	mov	r2, sl
     442:	589b      	ldr	r3, [r3, r2]
     444:	4798      	blx	r3
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     446:	465b      	mov	r3, fp
     448:	401d      	ands	r5, r3
     44a:	81b5      	strh	r5, [r6, #12]
     44c:	3401      	adds	r4, #1
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
     44e:	2c08      	cmp	r4, #8
     450:	d1ea      	bne.n	428 <RTC_Handler+0x4c>
     452:	e00a      	b.n	46a <RTC_Handler+0x8e>
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
		}
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     454:	05db      	lsls	r3, r3, #23
     456:	d508      	bpl.n	46a <RTC_Handler+0x8e>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     458:	4643      	mov	r3, r8
     45a:	05db      	lsls	r3, r3, #23
     45c:	d502      	bpl.n	464 <RTC_Handler+0x88>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     45e:	4653      	mov	r3, sl
     460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     462:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     464:	2380      	movs	r3, #128	; 0x80
     466:	005b      	lsls	r3, r3, #1
     468:	81b3      	strh	r3, [r6, #12]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     46a:	bc3c      	pop	{r2, r3, r4, r5}
     46c:	4690      	mov	r8, r2
     46e:	4699      	mov	r9, r3
     470:	46a2      	mov	sl, r4
     472:	46ab      	mov	fp, r5
     474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     476:	46c0      	nop			; (mov r8, r8)
     478:	20000ae4 	.word	0x20000ae4
     47c:	ffff8000 	.word	0xffff8000

00000480 <tsens_init>:
 * \retval STATUS_ERR_INVALID_ARG   Invalid argument(s) were provided
 * \retval STATUS_BUSY              The module is busy with a reset operation
 * \retval STATUS_ERR_DENIED        The module is enabled
 */
enum status_code tsens_init(struct tsens_config *config)
{
     480:	b510      	push	{r4, lr}
     482:	b082      	sub	sp, #8
     484:	4a27      	ldr	r2, [pc, #156]	; (524 <tsens_init+0xa4>)
     486:	6953      	ldr	r3, [r2, #20]
     488:	2180      	movs	r1, #128	; 0x80
     48a:	0149      	lsls	r1, r1, #5
     48c:	430b      	orrs	r3, r1
     48e:	6153      	str	r3, [r2, #20]
	Assert(config);

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_TSENS);

	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     490:	4b25      	ldr	r3, [pc, #148]	; (528 <tsens_init+0xa8>)
     492:	781a      	ldrb	r2, [r3, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     494:	2305      	movs	r3, #5
	Assert(config);

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_TSENS);

	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     496:	07d2      	lsls	r2, r2, #31
     498:	d441      	bmi.n	51e <tsens_init+0x9e>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     49a:	4b23      	ldr	r3, [pc, #140]	; (528 <tsens_init+0xa8>)
     49c:	781a      	ldrb	r2, [r3, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     49e:	231c      	movs	r3, #28
	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     4a0:	0792      	lsls	r2, r2, #30
     4a2:	d43c      	bmi.n	51e <tsens_init+0x9e>
     4a4:	1c04      	adds	r4, r0, #0
static enum status_code _tsens_set_config(struct tsens_config *const config)
{
	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     4a6:	a901      	add	r1, sp, #4
     4a8:	7803      	ldrb	r3, [r0, #0]
     4aa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(TSENS_GCLK_ID, &gclk_chan_conf);
     4ac:	2005      	movs	r0, #5
     4ae:	4b1f      	ldr	r3, [pc, #124]	; (52c <tsens_init+0xac>)
     4b0:	4798      	blx	r3
	system_gclk_chan_enable(TSENS_GCLK_ID);
     4b2:	2005      	movs	r0, #5
     4b4:	4b1e      	ldr	r3, [pc, #120]	; (530 <tsens_init+0xb0>)
     4b6:	4798      	blx	r3

	/* Configure run in standby */
	TSENS->CTRLA.reg = (config->run_in_standby << TSENS_CTRLA_RUNSTDBY_Pos);
     4b8:	78a3      	ldrb	r3, [r4, #2]
     4ba:	019b      	lsls	r3, r3, #6
     4bc:	b2db      	uxtb	r3, r3
     4be:	4a1a      	ldr	r2, [pc, #104]	; (528 <tsens_init+0xa8>)
     4c0:	7013      	strb	r3, [r2, #0]

	/* Check validity of window thresholds */
	if (config->window.window_mode != TSENS_WINDOW_MODE_DISABLE) {
     4c2:	7922      	ldrb	r2, [r4, #4]
     4c4:	2a00      	cmp	r2, #0
     4c6:	d006      	beq.n	4d6 <tsens_init+0x56>
		if((config->window.window_lower_value < WINDOW_MIN_VALUE) || \
			(config->window.window_upper_value > WINDOW_MAX_VALUE)) {
				return STATUS_ERR_INVALID_ARG;
     4c8:	2317      	movs	r3, #23
	/* Configure run in standby */
	TSENS->CTRLA.reg = (config->run_in_standby << TSENS_CTRLA_RUNSTDBY_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != TSENS_WINDOW_MODE_DISABLE) {
		if((config->window.window_lower_value < WINDOW_MIN_VALUE) || \
     4ca:	68a1      	ldr	r1, [r4, #8]
     4cc:	3128      	adds	r1, #40	; 0x28
     4ce:	db26      	blt.n	51e <tsens_init+0x9e>
     4d0:	68e1      	ldr	r1, [r4, #12]
     4d2:	2969      	cmp	r1, #105	; 0x69
     4d4:	dc23      	bgt.n	51e <tsens_init+0x9e>
			}
	}

	/* Configure CTRLC */
	TSENS->CTRLC.reg =
			(config->free_running << TSENS_CTRLC_FREERUN_Pos) | \
     4d6:	7863      	ldrb	r3, [r4, #1]
     4d8:	011b      	lsls	r3, r3, #4
				return STATUS_ERR_INVALID_ARG;
			}
	}

	/* Configure CTRLC */
	TSENS->CTRLC.reg =
     4da:	431a      	orrs	r2, r3
     4dc:	b2d2      	uxtb	r2, r2
     4de:	4b12      	ldr	r3, [pc, #72]	; (528 <tsens_init+0xa8>)
     4e0:	709a      	strb	r2, [r3, #2]

	/* Configure upper threshold */
	TSENS->WINUT.reg = TSENS_WINLT_WINLT(config->window.window_lower_value);
#else
	/* Configure lower threshold */
	TSENS->WINLT.reg = TSENS_WINLT_WINLT(config->window.window_lower_value);
     4e2:	68a2      	ldr	r2, [r4, #8]
     4e4:	0212      	lsls	r2, r2, #8
     4e6:	0a12      	lsrs	r2, r2, #8
     4e8:	611a      	str	r2, [r3, #16]

	/* Configure upper threshold */
	TSENS->WINUT.reg = TSENS_WINLT_WINLT(config->window.window_upper_value);
     4ea:	68e2      	ldr	r2, [r4, #12]
     4ec:	0212      	lsls	r2, r2, #8
     4ee:	0a12      	lsrs	r2, r2, #8
     4f0:	615a      	str	r2, [r3, #20]
#endif

	/* Configure events */
	TSENS->EVCTRL.reg = config->event_action;
     4f2:	7c22      	ldrb	r2, [r4, #16]
     4f4:	70da      	strb	r2, [r3, #3]

	/* Disable all interrupts */
	TSENS->INTENCLR.reg =
     4f6:	220f      	movs	r2, #15
     4f8:	711a      	strb	r2, [r3, #4]
			(1 << TSENS_INTENCLR_OVF_Pos) | (1 << TSENS_INTENCLR_WINMON_Pos) | \
			(1 << TSENS_INTENCLR_OVERRUN_Pos) | (1 << TSENS_INTENCLR_RESRDY_Pos);

	/* Read calibration from NVM */
	uint32_t tsens_bits = *((uint32_t *)NVMCTRL_TEMP_LOG);
     4fa:	4a0e      	ldr	r2, [pc, #56]	; (534 <tsens_init+0xb4>)
     4fc:	6812      	ldr	r2, [r2, #0]
	uint32_t tsens_tcal = \
				((tsens_bits & TSENS_FUSES_TCAL_Msk) >> TSENS_FUSES_TCAL_Pos);
	uint32_t tsens_fcal = \
     4fe:	0991      	lsrs	r1, r2, #6
				((tsens_bits & TSENS_FUSES_FCAL_Msk) >> TSENS_FUSES_FCAL_Pos);

	TSENS->CAL.reg = TSENS_CAL_TCAL(tsens_tcal) | TSENS_CAL_FCAL(tsens_fcal);
     500:	203f      	movs	r0, #63	; 0x3f
     502:	4001      	ands	r1, r0
			(1 << TSENS_INTENCLR_OVF_Pos) | (1 << TSENS_INTENCLR_WINMON_Pos) | \
			(1 << TSENS_INTENCLR_OVERRUN_Pos) | (1 << TSENS_INTENCLR_RESRDY_Pos);

	/* Read calibration from NVM */
	uint32_t tsens_bits = *((uint32_t *)NVMCTRL_TEMP_LOG);
	uint32_t tsens_tcal = \
     504:	4002      	ands	r2, r0
				((tsens_bits & TSENS_FUSES_TCAL_Msk) >> TSENS_FUSES_TCAL_Pos);
	uint32_t tsens_fcal = \
				((tsens_bits & TSENS_FUSES_FCAL_Msk) >> TSENS_FUSES_FCAL_Pos);

	TSENS->CAL.reg = TSENS_CAL_TCAL(tsens_tcal) | TSENS_CAL_FCAL(tsens_fcal);
     506:	0212      	lsls	r2, r2, #8
     508:	430a      	orrs	r2, r1
     50a:	621a      	str	r2, [r3, #32]
	TSENS->GAIN.reg = TSENS_GAIN_GAIN(config->calibration.gain);
     50c:	6962      	ldr	r2, [r4, #20]
     50e:	0212      	lsls	r2, r2, #8
     510:	0a12      	lsrs	r2, r2, #8
     512:	619a      	str	r2, [r3, #24]
	TSENS->OFFSET.reg = TSENS_OFFSET_OFFSETC(config->calibration.offset);
     514:	69a2      	ldr	r2, [r4, #24]
     516:	0212      	lsls	r2, r2, #8
     518:	0a12      	lsrs	r2, r2, #8
     51a:	61da      	str	r2, [r3, #28]

	return STATUS_OK;
     51c:	2300      	movs	r3, #0
		return STATUS_ERR_DENIED;
	}

	/* Write configuration to module */
	return _tsens_set_config(config);
}
     51e:	1c18      	adds	r0, r3, #0
     520:	b002      	add	sp, #8
     522:	bd10      	pop	{r4, pc}
     524:	40000800 	.word	0x40000800
     528:	40003000 	.word	0x40003000
     52c:	000028d1 	.word	0x000028d1
     530:	00002869 	.word	0x00002869
     534:	00806030 	.word	0x00806030

00000538 <tsens_get_config_defaults>:
 *                     default values
 */
void tsens_get_config_defaults(struct tsens_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     538:	2300      	movs	r3, #0
     53a:	7003      	strb	r3, [r0, #0]
	config->free_running                  = false;
     53c:	7043      	strb	r3, [r0, #1]
	config->run_in_standby                = false;
     53e:	7083      	strb	r3, [r0, #2]
	config->window.window_mode            = TSENS_WINDOW_MODE_DISABLE;
     540:	7103      	strb	r3, [r0, #4]
	config->window.window_upper_value     = 0;
     542:	60c3      	str	r3, [r0, #12]
	config->window.window_lower_value     = 0;
     544:	6083      	str	r3, [r0, #8]
	config->event_action                  = TSENS_EVENT_ACTION_DISABLED;
     546:	7403      	strb	r3, [r0, #16]

	uint32_t tsens_bits[2];
	tsens_bits[0] = *((uint32_t *)NVMCTRL_TEMP_LOG);
     548:	4b03      	ldr	r3, [pc, #12]	; (558 <tsens_get_config_defaults+0x20>)
	tsens_bits[1] = *(((uint32_t *)NVMCTRL_TEMP_LOG) + 1);
	config->calibration.offset   = 
		((tsens_bits[0] & TSENS_FUSES_OFFSET_Msk) >> TSENS_FUSES_OFFSET_Pos);
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	011b      	lsls	r3, r3, #4
     54e:	0a1b      	lsrs	r3, r3, #8
	config->event_action                  = TSENS_EVENT_ACTION_DISABLED;

	uint32_t tsens_bits[2];
	tsens_bits[0] = *((uint32_t *)NVMCTRL_TEMP_LOG);
	tsens_bits[1] = *(((uint32_t *)NVMCTRL_TEMP_LOG) + 1);
	config->calibration.offset   = 
     550:	6183      	str	r3, [r0, #24]
		((tsens_bits[0] & TSENS_FUSES_OFFSET_Msk) >> TSENS_FUSES_OFFSET_Pos);
	config->calibration.gain     = 100;
     552:	2364      	movs	r3, #100	; 0x64
     554:	6143      	str	r3, [r0, #20]
		//((tsens_bits[0] & TSENS_FUSES_GAIN_0_Msk) >> TSENS_FUSES_GAIN_0_Pos) | \
		//((tsens_bits[1] & TSENS_FUSES_GAIN_1_Msk) >> TSENS_FUSES_GAIN_1_Pos);
}
     556:	4770      	bx	lr
     558:	00806030 	.word	0x00806030

0000055c <tsens_read>:
 * \retval STATUS_BUSY         A conversion result was not ready
 * \retval STATUS_ERR_OVERFLOW The result register has been overwritten by the
 *                             TSENS module before the result was read by the software
 */
enum status_code tsens_read(int32_t *result)
{
     55c:	b570      	push	{r4, r5, r6, lr}
 *                                    window range
 * \retval TSENS_STATUS_OVERFLOW      TSENS result overflows
 */
static inline uint32_t tsens_get_status(void)
{
	uint32_t int_flags = TSENS->INTFLAG.reg;
     55e:	4b22      	ldr	r3, [pc, #136]	; (5e8 <tsens_read+0x8c>)
     560:	799a      	ldrb	r2, [r3, #6]
     562:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for TSENS Result Ready */
	if (int_flags & TSENS_INTFLAG_RESRDY) {
     564:	2301      	movs	r3, #1
     566:	4013      	ands	r3, r2
		status_flags |= TSENS_STATUS_RESULT_READY;
	}

	/* Check for TSENS Overrun */
	if (int_flags & TSENS_INTFLAG_OVERRUN) {
     568:	0791      	lsls	r1, r2, #30
     56a:	d501      	bpl.n	570 <tsens_read+0x14>
		status_flags |= TSENS_STATUS_OVERRUN;
     56c:	2102      	movs	r1, #2
     56e:	430b      	orrs	r3, r1
	}

	/* Check for TSENS Window Match */
	if (int_flags & TSENS_INTFLAG_WINMON) {
     570:	0751      	lsls	r1, r2, #29
     572:	d501      	bpl.n	578 <tsens_read+0x1c>
		status_flags |= TSENS_STATUS_WINDOW;
     574:	2104      	movs	r1, #4
     576:	430b      	orrs	r3, r1
	}

	/* Check for TSENS overflow */
	if (int_flags & TSENS_INTFLAG_OVF) {
     578:	0712      	lsls	r2, r2, #28
     57a:	d501      	bpl.n	580 <tsens_read+0x24>
		status_flags |= TSENS_STATUS_OVERFLOW;
     57c:	2208      	movs	r2, #8
     57e:	4313      	orrs	r3, r2
	Assert(result);

	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
		/* Result not ready */
		return STATUS_BUSY;
     580:	2205      	movs	r2, #5
 */
enum status_code tsens_read(int32_t *result)
{
	Assert(result);

	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
     582:	07db      	lsls	r3, r3, #31
     584:	d52d      	bpl.n	5e2 <tsens_read+0x86>
		/* Result not ready */
		return STATUS_BUSY;
	}

	if (TSENS->STATUS.reg & TSENS_STATUS_OVF) {
     586:	4b18      	ldr	r3, [pc, #96]	; (5e8 <tsens_read+0x8c>)
     588:	79db      	ldrb	r3, [r3, #7]
		/* The result is not valid */
		return STATUS_ERR_BAD_DATA;
     58a:	320e      	adds	r2, #14
	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
		/* Result not ready */
		return STATUS_BUSY;
	}

	if (TSENS->STATUS.reg & TSENS_STATUS_OVF) {
     58c:	07db      	lsls	r3, r3, #31
     58e:	d428      	bmi.n	5e2 <tsens_read+0x86>
		/* The result is not valid */
		return STATUS_ERR_BAD_DATA;
	}

	/* Get TSENS result */
	uint32_t temp = TSENS->VALUE.reg;
     590:	4b15      	ldr	r3, [pc, #84]	; (5e8 <tsens_read+0x8c>)
     592:	68dd      	ldr	r5, [r3, #12]
	if(temp & 0x00800000) {
     594:	022b      	lsls	r3, r5, #8
     596:	d502      	bpl.n	59e <tsens_read+0x42>
		temp |= ~TSENS_VALUE_MASK;
     598:	23ff      	movs	r3, #255	; 0xff
     59a:	061b      	lsls	r3, r3, #24
     59c:	431d      	orrs	r5, r3
     59e:	1c04      	adds	r4, r0, #0
	}
	printf("##################### %ld \r\n", temp);
     5a0:	4812      	ldr	r0, [pc, #72]	; (5ec <tsens_read+0x90>)
     5a2:	1c29      	adds	r1, r5, #0
     5a4:	4e12      	ldr	r6, [pc, #72]	; (5f0 <tsens_read+0x94>)
     5a6:	47b0      	blx	r6
	printf("******************* %ld \r\n", *result);
     5a8:	4812      	ldr	r0, [pc, #72]	; (5f4 <tsens_read+0x98>)
     5aa:	6821      	ldr	r1, [r4, #0]
     5ac:	47b0      	blx	r6
#if (ERRATA_14476)
	*result = temp * (-1);
#endif
	*result = temp;
     5ae:	6025      	str	r5, [r4, #0]
	if (status_flags & TSENS_INTFLAG_OVF) {
		int_flags |= TSENS_STATUS_OVERFLOW;
	}

	/* Clear interrupt flag */
	TSENS->INTFLAG.reg = int_flags;
     5b0:	4a0d      	ldr	r2, [pc, #52]	; (5e8 <tsens_read+0x8c>)
     5b2:	2301      	movs	r3, #1
     5b4:	7193      	strb	r3, [r2, #6]
 *                                    window range
 * \retval TSENS_STATUS_OVERFLOW      TSENS result overflows
 */
static inline uint32_t tsens_get_status(void)
{
	uint32_t int_flags = TSENS->INTFLAG.reg;
     5b6:	7992      	ldrb	r2, [r2, #6]
     5b8:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for TSENS Result Ready */
	if (int_flags & TSENS_INTFLAG_RESRDY) {
     5ba:	4013      	ands	r3, r2
		status_flags |= TSENS_STATUS_RESULT_READY;
	}

	/* Check for TSENS Overrun */
	if (int_flags & TSENS_INTFLAG_OVERRUN) {
     5bc:	0791      	lsls	r1, r2, #30
     5be:	d501      	bpl.n	5c4 <tsens_read+0x68>
		status_flags |= TSENS_STATUS_OVERRUN;
     5c0:	2102      	movs	r1, #2
     5c2:	430b      	orrs	r3, r1
	}

	/* Check for TSENS Window Match */
	if (int_flags & TSENS_INTFLAG_WINMON) {
     5c4:	0751      	lsls	r1, r2, #29
     5c6:	d501      	bpl.n	5cc <tsens_read+0x70>
		status_flags |= TSENS_STATUS_WINDOW;
     5c8:	2104      	movs	r1, #4
     5ca:	430b      	orrs	r3, r1
	}

	/* Check for TSENS overflow */
	if (int_flags & TSENS_INTFLAG_OVF) {
     5cc:	0712      	lsls	r2, r2, #28
     5ce:	d501      	bpl.n	5d4 <tsens_read+0x78>
		status_flags |= TSENS_STATUS_OVERFLOW;
     5d0:	2208      	movs	r2, #8
     5d2:	4313      	orrs	r3, r2
	if (tsens_get_status() & TSENS_STATUS_OVERRUN) {
		tsens_clear_status(TSENS_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
	}

	return STATUS_OK;
     5d4:	2200      	movs	r2, #0
#endif
	*result = temp;
	/* Reset ready flag */
	tsens_clear_status(TSENS_STATUS_RESULT_READY);

	if (tsens_get_status() & TSENS_STATUS_OVERRUN) {
     5d6:	079b      	lsls	r3, r3, #30
     5d8:	d503      	bpl.n	5e2 <tsens_read+0x86>
	if (status_flags & TSENS_INTFLAG_OVF) {
		int_flags |= TSENS_STATUS_OVERFLOW;
	}

	/* Clear interrupt flag */
	TSENS->INTFLAG.reg = int_flags;
     5da:	3202      	adds	r2, #2
     5dc:	4b02      	ldr	r3, [pc, #8]	; (5e8 <tsens_read+0x8c>)
     5de:	719a      	strb	r2, [r3, #6]
		tsens_clear_status(TSENS_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
     5e0:	321c      	adds	r2, #28
	}

	return STATUS_OK;
}
     5e2:	1c10      	adds	r0, r2, #0
     5e4:	bd70      	pop	{r4, r5, r6, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	40003000 	.word	0x40003000
     5ec:	0000499c 	.word	0x0000499c
     5f0:	00002d85 	.word	0x00002d85
     5f4:	000049bc 	.word	0x000049bc

000005f8 <event_counter>:
	events_add_hook(resource, hook);
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
}

void event_counter(struct events_resource *resource)
{
     5f8:	b510      	push	{r4, lr}
     5fa:	1c04      	adds	r4, r0, #0
	if(events_is_interrupt_set(resource, EVENTS_INTERRUPT_DETECT)) {
     5fc:	2101      	movs	r1, #1
     5fe:	4b09      	ldr	r3, [pc, #36]	; (624 <event_counter+0x2c>)
     600:	4798      	blx	r3
     602:	2800      	cmp	r0, #0
     604:	d00c      	beq.n	620 <event_counter+0x28>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     606:	2280      	movs	r2, #128	; 0x80
     608:	0212      	lsls	r2, r2, #8
     60a:	2382      	movs	r3, #130	; 0x82
     60c:	05db      	lsls	r3, r3, #23
     60e:	61da      	str	r2, [r3, #28]
		port_pin_toggle_output_level(LED_0_PIN);
		//printf("@@@@@@@@@@@@@@@@@@@@@@@@@ event success @@@@@@@@@@@@@@@@@@@@@@@@ \r\n");
		event_count++;
     610:	4a05      	ldr	r2, [pc, #20]	; (628 <event_counter+0x30>)
     612:	6813      	ldr	r3, [r2, #0]
     614:	3301      	adds	r3, #1
     616:	6013      	str	r3, [r2, #0]
		
		events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
     618:	1c20      	adds	r0, r4, #0
     61a:	2101      	movs	r1, #1
     61c:	4b03      	ldr	r3, [pc, #12]	; (62c <event_counter+0x34>)
     61e:	4798      	blx	r3
	}
}
     620:	bd10      	pop	{r4, pc}
     622:	46c0      	nop			; (mov r8, r8)
     624:	00001021 	.word	0x00001021
     628:	20000108 	.word	0x20000108
     62c:	00001055 	.word	0x00001055

00000630 <rtc_match_callback>:
	rtc_calendar_enable(&rtc_instance);
}
struct rtc_calendar_alarm_time alarm;

void rtc_match_callback(void)
{
     630:	b538      	push	{r3, r4, r5, lr}
 * Start a new TSENS conversion.
 *
 */
static inline void tsens_start_conversion(void)
{
	TSENS->CTRLB.reg |= TSENS_CTRLB_START;
     632:	4a12      	ldr	r2, [pc, #72]	; (67c <rtc_match_callback+0x4c>)
     634:	7851      	ldrb	r1, [r2, #1]
     636:	2301      	movs	r3, #1
     638:	430b      	orrs	r3, r1
     63a:	7053      	strb	r3, [r2, #1]
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool tsens_is_syncing(void)
{
	if (TSENS->SYNCBUSY.reg) {
     63c:	6893      	ldr	r3, [r2, #8]
 */
static inline void tsens_start_conversion(void)
{
	TSENS->CTRLB.reg |= TSENS_CTRLB_START;

	while (tsens_is_syncing()) {
     63e:	2b00      	cmp	r3, #0
     640:	d1fc      	bne.n	63c <rtc_match_callback+0xc>
	//printf("###### alarm ######\r\n");
	
	tsens_start_conversion();
	do {
		/* Wait for conversion to be done and read out temperature result */
	} while (tsens_read(&temp_result) != STATUS_OK);
     642:	4d0f      	ldr	r5, [pc, #60]	; (680 <rtc_match_callback+0x50>)
     644:	4c0f      	ldr	r4, [pc, #60]	; (684 <rtc_match_callback+0x54>)
     646:	1c28      	adds	r0, r5, #0
     648:	47a0      	blx	r4
     64a:	2800      	cmp	r0, #0
     64c:	d1fb      	bne.n	646 <rtc_match_callback+0x16>
	printf("temperature :" );
     64e:	480e      	ldr	r0, [pc, #56]	; (688 <rtc_match_callback+0x58>)
     650:	4c0e      	ldr	r4, [pc, #56]	; (68c <rtc_match_callback+0x5c>)
     652:	47a0      	blx	r4
	printf("%ld \r\n", temp_result);
     654:	4b0a      	ldr	r3, [pc, #40]	; (680 <rtc_match_callback+0x50>)
     656:	6819      	ldr	r1, [r3, #0]
     658:	480d      	ldr	r0, [pc, #52]	; (690 <rtc_match_callback+0x60>)
     65a:	47a0      	blx	r4
	
	/* Set new alarm in 5 seconds */
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
     65c:	4c0d      	ldr	r4, [pc, #52]	; (694 <rtc_match_callback+0x64>)
     65e:	2301      	movs	r3, #1
     660:	7223      	strb	r3, [r4, #8]
	alarm.time.second += 5;
     662:	7820      	ldrb	r0, [r4, #0]
     664:	3005      	adds	r0, #5
	alarm.time.second = alarm.time.second % 60;
     666:	b2c0      	uxtb	r0, r0
     668:	213c      	movs	r1, #60	; 0x3c
     66a:	4b0b      	ldr	r3, [pc, #44]	; (698 <rtc_match_callback+0x68>)
     66c:	4798      	blx	r3
     66e:	7021      	strb	r1, [r4, #0]
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
     670:	480a      	ldr	r0, [pc, #40]	; (69c <rtc_match_callback+0x6c>)
     672:	1c21      	adds	r1, r4, #0
     674:	2200      	movs	r2, #0
     676:	4b0a      	ldr	r3, [pc, #40]	; (6a0 <rtc_match_callback+0x70>)
     678:	4798      	blx	r3
	
}
     67a:	bd38      	pop	{r3, r4, r5, pc}
     67c:	40003000 	.word	0x40003000
     680:	20000b28 	.word	0x20000b28
     684:	0000055d 	.word	0x0000055d
     688:	00004abc 	.word	0x00004abc
     68c:	00002d85 	.word	0x00002d85
     690:	000049d0 	.word	0x000049d0
     694:	20000b1c 	.word	0x20000b1c
     698:	00002ca9 	.word	0x00002ca9
     69c:	20000ae8 	.word	0x20000ae8
     6a0:	000002b9 	.word	0x000002b9

000006a4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     6a4:	b570      	push	{r4, r5, r6, lr}
     6a6:	b082      	sub	sp, #8
     6a8:	1c05      	adds	r5, r0, #0
     6aa:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     6ac:	2200      	movs	r2, #0
     6ae:	466b      	mov	r3, sp
     6b0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     6b2:	4c06      	ldr	r4, [pc, #24]	; (6cc <usart_serial_getchar+0x28>)
     6b4:	1c28      	adds	r0, r5, #0
     6b6:	466b      	mov	r3, sp
     6b8:	1d99      	adds	r1, r3, #6
     6ba:	47a0      	blx	r4
     6bc:	2800      	cmp	r0, #0
     6be:	d1f9      	bne.n	6b4 <usart_serial_getchar+0x10>

	*c = temp;
     6c0:	466b      	mov	r3, sp
     6c2:	3306      	adds	r3, #6
     6c4:	881b      	ldrh	r3, [r3, #0]
     6c6:	7033      	strb	r3, [r6, #0]
}
     6c8:	b002      	add	sp, #8
     6ca:	bd70      	pop	{r4, r5, r6, pc}
     6cc:	00002079 	.word	0x00002079

000006d0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     6d0:	b570      	push	{r4, r5, r6, lr}
     6d2:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     6d4:	b28c      	uxth	r4, r1
     6d6:	4e03      	ldr	r6, [pc, #12]	; (6e4 <usart_serial_putchar+0x14>)
     6d8:	1c28      	adds	r0, r5, #0
     6da:	1c21      	adds	r1, r4, #0
     6dc:	47b0      	blx	r6
     6de:	2800      	cmp	r0, #0
     6e0:	d1fa      	bne.n	6d8 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     6e2:	bd70      	pop	{r4, r5, r6, pc}
     6e4:	0000204d 	.word	0x0000204d

000006e8 <can_send_standard_message>:
//! [can_receive_filter_setup]

//! [can_transfer_message_setup]
static void can_send_standard_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length)
{
     6e8:	b510      	push	{r4, lr}
     6ea:	b084      	sub	sp, #16
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
     6ec:	2300      	movs	r3, #0
     6ee:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
     6f0:	2388      	movs	r3, #136	; 0x88
     6f2:	041b      	lsls	r3, r3, #16
     6f4:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
     6f6:	9b00      	ldr	r3, [sp, #0]
     6f8:	0480      	lsls	r0, r0, #18
     6fa:	4c12      	ldr	r4, [pc, #72]	; (744 <can_send_standard_message+0x5c>)
     6fc:	4020      	ands	r0, r4
     6fe:	4318      	orrs	r0, r3
     700:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
     702:	230f      	movs	r3, #15
     704:	4013      	ands	r3, r2
     706:	0418      	lsls	r0, r3, #16
     708:	9c01      	ldr	r4, [sp, #4]
     70a:	4b0f      	ldr	r3, [pc, #60]	; (748 <can_send_standard_message+0x60>)
     70c:	4023      	ands	r3, r4
     70e:	4303      	orrs	r3, r0
     710:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
     712:	2a00      	cmp	r2, #0
     714:	d007      	beq.n	726 <can_send_standard_message+0x3e>
     716:	2300      	movs	r3, #0
     718:	1c18      	adds	r0, r3, #0
     71a:	4468      	add	r0, sp
		tx_element.data[i] = *data;
     71c:	5ccc      	ldrb	r4, [r1, r3]
     71e:	7204      	strb	r4, [r0, #8]
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
	tx_element.T1.bit.DLC = data_length;
	for (i = 0; i < data_length; i++) {
     720:	3301      	adds	r3, #1
     722:	4293      	cmp	r3, r2
     724:	d1f8      	bne.n	718 <can_send_standard_message+0x30>
		tx_element.data[i] = *data;
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
     726:	4c09      	ldr	r4, [pc, #36]	; (74c <can_send_standard_message+0x64>)
     728:	1c20      	adds	r0, r4, #0
     72a:	4669      	mov	r1, sp
     72c:	2200      	movs	r2, #0
     72e:	4b08      	ldr	r3, [pc, #32]	; (750 <can_send_standard_message+0x68>)
     730:	4798      	blx	r3
 *  \retval STATUS_BUSY The module is in configuration.
 */
static inline enum status_code can_tx_transfer_request(
		struct can_module *const module_inst, uint32_t trig_mask)
{
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
     732:	6823      	ldr	r3, [r4, #0]
     734:	699a      	ldr	r2, [r3, #24]
     736:	0792      	lsls	r2, r2, #30
     738:	d402      	bmi.n	740 <can_send_standard_message+0x58>
		return STATUS_BUSY;
	}
	module_inst->hw->TXBAR.reg = trig_mask;
     73a:	2101      	movs	r1, #1
     73c:	22d0      	movs	r2, #208	; 0xd0
     73e:	5099      	str	r1, [r3, r2]
			CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
     740:	b004      	add	sp, #16
     742:	bd10      	pop	{r4, pc}
     744:	1ffc0000 	.word	0x1ffc0000
     748:	fff0ffff 	.word	0xfff0ffff
     74c:	200000d0 	.word	0x200000d0
     750:	00001759 	.word	0x00001759

00000754 <can_send_extended_message>:

static void can_send_extended_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length)
{
     754:	b510      	push	{r4, lr}
     756:	b084      	sub	sp, #16
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
     758:	2300      	movs	r3, #0
     75a:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
     75c:	2388      	movs	r3, #136	; 0x88
     75e:	041b      	lsls	r3, r3, #16
     760:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
     762:	9b00      	ldr	r3, [sp, #0]
     764:	2480      	movs	r4, #128	; 0x80
     766:	05e4      	lsls	r4, r4, #23
     768:	4323      	orrs	r3, r4
     76a:	00c0      	lsls	r0, r0, #3
     76c:	08c0      	lsrs	r0, r0, #3
     76e:	4318      	orrs	r0, r3
     770:	9000      	str	r0, [sp, #0]
			CAN_TX_ELEMENT_T0_XTD;
	tx_element.T1.bit.DLC = data_length;
     772:	230f      	movs	r3, #15
     774:	4013      	ands	r3, r2
     776:	0418      	lsls	r0, r3, #16
     778:	9c01      	ldr	r4, [sp, #4]
     77a:	4b0e      	ldr	r3, [pc, #56]	; (7b4 <can_send_extended_message+0x60>)
     77c:	4023      	ands	r3, r4
     77e:	4303      	orrs	r3, r0
     780:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
     782:	2a00      	cmp	r2, #0
     784:	d007      	beq.n	796 <can_send_extended_message+0x42>
     786:	2300      	movs	r3, #0
     788:	1c18      	adds	r0, r3, #0
     78a:	4468      	add	r0, sp
		tx_element.data[i] = *data;
     78c:	5ccc      	ldrb	r4, [r1, r3]
     78e:	7204      	strb	r4, [r0, #8]

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
			CAN_TX_ELEMENT_T0_XTD;
	tx_element.T1.bit.DLC = data_length;
	for (i = 0; i < data_length; i++) {
     790:	3301      	adds	r3, #1
     792:	4293      	cmp	r3, r2
     794:	d1f8      	bne.n	788 <can_send_extended_message+0x34>
		tx_element.data[i] = *data;
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
     796:	4c08      	ldr	r4, [pc, #32]	; (7b8 <can_send_extended_message+0x64>)
     798:	1c20      	adds	r0, r4, #0
     79a:	4669      	mov	r1, sp
     79c:	2200      	movs	r2, #0
     79e:	4b07      	ldr	r3, [pc, #28]	; (7bc <can_send_extended_message+0x68>)
     7a0:	4798      	blx	r3
 *  \retval STATUS_BUSY The module is in configuration.
 */
static inline enum status_code can_tx_transfer_request(
		struct can_module *const module_inst, uint32_t trig_mask)
{
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
     7a2:	6823      	ldr	r3, [r4, #0]
     7a4:	699a      	ldr	r2, [r3, #24]
     7a6:	0792      	lsls	r2, r2, #30
     7a8:	d402      	bmi.n	7b0 <can_send_extended_message+0x5c>
		return STATUS_BUSY;
	}
	module_inst->hw->TXBAR.reg = trig_mask;
     7aa:	2101      	movs	r1, #1
     7ac:	22d0      	movs	r2, #208	; 0xd0
     7ae:	5099      	str	r1, [r3, r2]
			CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
     7b0:	b004      	add	sp, #16
     7b2:	bd10      	pop	{r4, pc}
     7b4:	fff0ffff 	.word	0xfff0ffff
     7b8:	200000d0 	.word	0x200000d0
     7bc:	00001759 	.word	0x00001759

000007c0 <CAN0_Handler>:

//! [can_transfer_message_setup]

//! [can_interrupt_handler]
void CAN0_Handler(void)
{
     7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7c2:	4647      	mov	r7, r8
     7c4:	b480      	push	{r7}
     7c6:	b084      	sub	sp, #16
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
     7c8:	4b81      	ldr	r3, [pc, #516]	; (9d0 <CAN0_Handler+0x210>)
     7ca:	681b      	ldr	r3, [r3, #0]
     7cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = can_read_interrupt_status(&can_instance);
     7ce:	9203      	str	r2, [sp, #12]

	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
     7d0:	9a03      	ldr	r2, [sp, #12]
     7d2:	0312      	lsls	r2, r2, #12
     7d4:	d572      	bpl.n	8bc <CAN0_Handler+0xfc>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     7d6:	2280      	movs	r2, #128	; 0x80
     7d8:	0312      	lsls	r2, r2, #12
     7da:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
     7dc:	2300      	movs	r3, #0
     7de:	9302      	str	r3, [sp, #8]
     7e0:	9b02      	ldr	r3, [sp, #8]
     7e2:	2b0f      	cmp	r3, #15
     7e4:	d86a      	bhi.n	8bc <CAN0_Handler+0xfc>
 */
static inline bool can_rx_get_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
     7e6:	4b7a      	ldr	r3, [pc, #488]	; (9d0 <CAN0_Handler+0x210>)
     7e8:	4698      	mov	r8, r3
		} else {
			return false;
		}
	} else {
		index -= 32;
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
     7ea:	1c1f      	adds	r7, r3, #0
			if (can_rx_get_buffer_status(&can_instance, i)) {
     7ec:	9902      	ldr	r1, [sp, #8]
 *  \retval false Rx Buffer not updated.
 */
static inline bool can_rx_get_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
     7ee:	291f      	cmp	r1, #31
     7f0:	d80b      	bhi.n	80a <CAN0_Handler+0x4a>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
     7f2:	2398      	movs	r3, #152	; 0x98
     7f4:	4642      	mov	r2, r8
     7f6:	6812      	ldr	r2, [r2, #0]
     7f8:	58d0      	ldr	r0, [r2, r3]
     7fa:	2201      	movs	r2, #1
     7fc:	1c13      	adds	r3, r2, #0
     7fe:	408b      	lsls	r3, r1
     800:	4003      	ands	r3, r0
     802:	1e5a      	subs	r2, r3, #1
     804:	4193      	sbcs	r3, r2
     806:	b2db      	uxtb	r3, r3
     808:	e00a      	b.n	820 <CAN0_Handler+0x60>
		} else {
			return false;
		}
	} else {
		index -= 32;
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
     80a:	239c      	movs	r3, #156	; 0x9c
     80c:	683a      	ldr	r2, [r7, #0]
     80e:	58d0      	ldr	r0, [r2, r3]
			return true;
		} else {
			return false;
		}
	} else {
		index -= 32;
     810:	3920      	subs	r1, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
     812:	2201      	movs	r2, #1
     814:	1c13      	adds	r3, r2, #0
     816:	408b      	lsls	r3, r1
     818:	4003      	ands	r3, r0
     81a:	1e5a      	subs	r2, r3, #1
     81c:	4193      	sbcs	r3, r2
     81e:	b2db      	uxtb	r3, r3
     820:	2b00      	cmp	r3, #0
     822:	d045      	beq.n	8b0 <CAN0_Handler+0xf0>
				rx_buffer_index = i;
     824:	9b02      	ldr	r3, [sp, #8]
     826:	9301      	str	r3, [sp, #4]
				can_rx_clear_buffer_status(&can_instance, i);
     828:	9b02      	ldr	r3, [sp, #8]
 *
 */
static inline void can_rx_clear_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
     82a:	2b1f      	cmp	r3, #31
     82c:	d809      	bhi.n	842 <CAN0_Handler+0x82>
		module_inst->hw->NDAT1.reg |= (1 << index);
     82e:	4a68      	ldr	r2, [pc, #416]	; (9d0 <CAN0_Handler+0x210>)
     830:	6814      	ldr	r4, [r2, #0]
     832:	2098      	movs	r0, #152	; 0x98
     834:	5822      	ldr	r2, [r4, r0]
     836:	2101      	movs	r1, #1
     838:	4099      	lsls	r1, r3
     83a:	1c0b      	adds	r3, r1, #0
     83c:	4313      	orrs	r3, r2
     83e:	5023      	str	r3, [r4, r0]
     840:	e009      	b.n	856 <CAN0_Handler+0x96>
	} else {
		index -= 32;
		module_inst->hw->NDAT2.reg |= (1 << index);
     842:	4a63      	ldr	r2, [pc, #396]	; (9d0 <CAN0_Handler+0x210>)
     844:	6814      	ldr	r4, [r2, #0]
     846:	209c      	movs	r0, #156	; 0x9c
     848:	5822      	ldr	r2, [r4, r0]
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
		module_inst->hw->NDAT1.reg |= (1 << index);
	} else {
		index -= 32;
     84a:	3b20      	subs	r3, #32
		module_inst->hw->NDAT2.reg |= (1 << index);
     84c:	2101      	movs	r1, #1
     84e:	4099      	lsls	r1, r3
     850:	1c0b      	adds	r3, r1, #0
     852:	4313      	orrs	r3, r2
     854:	5023      	str	r3, [r4, r0]
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
     856:	9a01      	ldr	r2, [sp, #4]
     858:	4c5e      	ldr	r4, [pc, #376]	; (9d4 <CAN0_Handler+0x214>)
     85a:	485d      	ldr	r0, [pc, #372]	; (9d0 <CAN0_Handler+0x210>)
     85c:	1c21      	adds	r1, r4, #0
     85e:	4b5e      	ldr	r3, [pc, #376]	; (9d8 <CAN0_Handler+0x218>)
     860:	4798      	blx	r3
				rx_buffer_index);
				if (rx_element_buffer.R0.bit.XTD) {
     862:	6823      	ldr	r3, [r4, #0]
     864:	005b      	lsls	r3, r3, #1
     866:	d503      	bpl.n	870 <CAN0_Handler+0xb0>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
     868:	485c      	ldr	r0, [pc, #368]	; (9dc <CAN0_Handler+0x21c>)
     86a:	4b5d      	ldr	r3, [pc, #372]	; (9e0 <CAN0_Handler+0x220>)
     86c:	4798      	blx	r3
     86e:	e002      	b.n	876 <CAN0_Handler+0xb6>
				} else {
					printf("\n\r Standard message received in Rx buffer. The received data is: \r\n");
     870:	485c      	ldr	r0, [pc, #368]	; (9e4 <CAN0_Handler+0x224>)
     872:	4b5b      	ldr	r3, [pc, #364]	; (9e0 <CAN0_Handler+0x220>)
     874:	4798      	blx	r3
				}
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
     876:	2300      	movs	r3, #0
     878:	9302      	str	r3, [sp, #8]
     87a:	4b56      	ldr	r3, [pc, #344]	; (9d4 <CAN0_Handler+0x214>)
     87c:	685b      	ldr	r3, [r3, #4]
     87e:	031b      	lsls	r3, r3, #12
     880:	0f1b      	lsrs	r3, r3, #28
     882:	9a02      	ldr	r2, [sp, #8]
     884:	4293      	cmp	r3, r2
     886:	d910      	bls.n	8aa <CAN0_Handler+0xea>
					printf("  %d",rx_element_buffer.data[i]);
     888:	4c57      	ldr	r4, [pc, #348]	; (9e8 <CAN0_Handler+0x228>)
     88a:	4d52      	ldr	r5, [pc, #328]	; (9d4 <CAN0_Handler+0x214>)
     88c:	4e57      	ldr	r6, [pc, #348]	; (9ec <CAN0_Handler+0x22c>)
     88e:	9b02      	ldr	r3, [sp, #8]
     890:	18eb      	adds	r3, r5, r3
     892:	7a19      	ldrb	r1, [r3, #8]
     894:	1c20      	adds	r0, r4, #0
     896:	47b0      	blx	r6
				if (rx_element_buffer.R0.bit.XTD) {
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
				} else {
					printf("\n\r Standard message received in Rx buffer. The received data is: \r\n");
				}
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
     898:	9b02      	ldr	r3, [sp, #8]
     89a:	3301      	adds	r3, #1
     89c:	9302      	str	r3, [sp, #8]
     89e:	686b      	ldr	r3, [r5, #4]
     8a0:	031b      	lsls	r3, r3, #12
     8a2:	0f1b      	lsrs	r3, r3, #28
     8a4:	9a02      	ldr	r2, [sp, #8]
     8a6:	4293      	cmp	r3, r2
     8a8:	d8f1      	bhi.n	88e <CAN0_Handler+0xce>
					printf("  %d",rx_element_buffer.data[i]);
				}
				printf("\r\n\r\n");
     8aa:	4851      	ldr	r0, [pc, #324]	; (9f0 <CAN0_Handler+0x230>)
     8ac:	4b4c      	ldr	r3, [pc, #304]	; (9e0 <CAN0_Handler+0x220>)
     8ae:	4798      	blx	r3
	volatile uint32_t status, i, rx_buffer_index;
	status = can_read_interrupt_status(&can_instance);

	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
     8b0:	9b02      	ldr	r3, [sp, #8]
     8b2:	3301      	adds	r3, #1
     8b4:	9302      	str	r3, [sp, #8]
     8b6:	9b02      	ldr	r3, [sp, #8]
     8b8:	2b0f      	cmp	r3, #15
     8ba:	d997      	bls.n	7ec <CAN0_Handler+0x2c>
				printf("\r\n\r\n");
			}
		}
	}

	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
     8bc:	9b03      	ldr	r3, [sp, #12]
     8be:	07db      	lsls	r3, r3, #31
     8c0:	d538      	bpl.n	934 <CAN0_Handler+0x174>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     8c2:	4d43      	ldr	r5, [pc, #268]	; (9d0 <CAN0_Handler+0x210>)
     8c4:	682b      	ldr	r3, [r5, #0]
     8c6:	2201      	movs	r2, #1
     8c8:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_FIFO_0_NEW_MESSAGE);
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
     8ca:	4c4a      	ldr	r4, [pc, #296]	; (9f4 <CAN0_Handler+0x234>)
     8cc:	6822      	ldr	r2, [r4, #0]
     8ce:	1c28      	adds	r0, r5, #0
     8d0:	4949      	ldr	r1, [pc, #292]	; (9f8 <CAN0_Handler+0x238>)
     8d2:	4b4a      	ldr	r3, [pc, #296]	; (9fc <CAN0_Handler+0x23c>)
     8d4:	4798      	blx	r3
				standard_receive_index);
		can_rx_fifo_acknowledge(&can_instance, 0,
     8d6:	6823      	ldr	r3, [r4, #0]
 */
static inline void can_rx_fifo_acknowledge(
		struct can_module *const module_inst, bool fifo_number, uint32_t index)
{
	if (!fifo_number) {
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
     8d8:	6829      	ldr	r1, [r5, #0]
     8da:	223f      	movs	r2, #63	; 0x3f
     8dc:	4013      	ands	r3, r2
     8de:	3269      	adds	r2, #105	; 0x69
     8e0:	508b      	str	r3, [r1, r2]
				standard_receive_index);
		standard_receive_index++;
     8e2:	6823      	ldr	r3, [r4, #0]
     8e4:	3301      	adds	r3, #1
     8e6:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
     8e8:	6823      	ldr	r3, [r4, #0]
     8ea:	2b10      	cmp	r3, #16
     8ec:	d102      	bne.n	8f4 <CAN0_Handler+0x134>
			standard_receive_index = 0;
     8ee:	2200      	movs	r2, #0
     8f0:	4b40      	ldr	r3, [pc, #256]	; (9f4 <CAN0_Handler+0x234>)
     8f2:	601a      	str	r2, [r3, #0]
		}

		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
     8f4:	4842      	ldr	r0, [pc, #264]	; (a00 <CAN0_Handler+0x240>)
     8f6:	4b3a      	ldr	r3, [pc, #232]	; (9e0 <CAN0_Handler+0x220>)
     8f8:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
     8fa:	2300      	movs	r3, #0
     8fc:	9302      	str	r3, [sp, #8]
     8fe:	4b3e      	ldr	r3, [pc, #248]	; (9f8 <CAN0_Handler+0x238>)
     900:	685b      	ldr	r3, [r3, #4]
     902:	031b      	lsls	r3, r3, #12
     904:	0f1b      	lsrs	r3, r3, #28
     906:	9a02      	ldr	r2, [sp, #8]
     908:	4293      	cmp	r3, r2
     90a:	d910      	bls.n	92e <CAN0_Handler+0x16e>
			printf("  %d",rx_element_fifo_0.data[i]);
     90c:	4c36      	ldr	r4, [pc, #216]	; (9e8 <CAN0_Handler+0x228>)
     90e:	4d3a      	ldr	r5, [pc, #232]	; (9f8 <CAN0_Handler+0x238>)
     910:	4e36      	ldr	r6, [pc, #216]	; (9ec <CAN0_Handler+0x22c>)
     912:	9b02      	ldr	r3, [sp, #8]
     914:	18eb      	adds	r3, r5, r3
     916:	7a19      	ldrb	r1, [r3, #8]
     918:	1c20      	adds	r0, r4, #0
     91a:	47b0      	blx	r6
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
			standard_receive_index = 0;
		}

		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
     91c:	9b02      	ldr	r3, [sp, #8]
     91e:	3301      	adds	r3, #1
     920:	9302      	str	r3, [sp, #8]
     922:	686b      	ldr	r3, [r5, #4]
     924:	031b      	lsls	r3, r3, #12
     926:	0f1b      	lsrs	r3, r3, #28
     928:	9a02      	ldr	r2, [sp, #8]
     92a:	4293      	cmp	r3, r2
     92c:	d8f1      	bhi.n	912 <CAN0_Handler+0x152>
			printf("  %d",rx_element_fifo_0.data[i]);
		}
		printf("\r\n\r\n");
     92e:	4830      	ldr	r0, [pc, #192]	; (9f0 <CAN0_Handler+0x230>)
     930:	4b2b      	ldr	r3, [pc, #172]	; (9e0 <CAN0_Handler+0x220>)
     932:	4798      	blx	r3
	}

	if (status & CAN_RX_FIFO_1_NEW_MESSAGE) {
     934:	9b03      	ldr	r3, [sp, #12]
     936:	06db      	lsls	r3, r3, #27
     938:	d538      	bpl.n	9ac <CAN0_Handler+0x1ec>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     93a:	4d25      	ldr	r5, [pc, #148]	; (9d0 <CAN0_Handler+0x210>)
     93c:	682b      	ldr	r3, [r5, #0]
     93e:	2210      	movs	r2, #16
     940:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_FIFO_1_NEW_MESSAGE);
		can_get_rx_fifo_1_element(&can_instance, &rx_element_fifo_1,
     942:	4c30      	ldr	r4, [pc, #192]	; (a04 <CAN0_Handler+0x244>)
     944:	6822      	ldr	r2, [r4, #0]
     946:	1c28      	adds	r0, r5, #0
     948:	492f      	ldr	r1, [pc, #188]	; (a08 <CAN0_Handler+0x248>)
     94a:	4b30      	ldr	r3, [pc, #192]	; (a0c <CAN0_Handler+0x24c>)
     94c:	4798      	blx	r3
				extended_receive_index);
		can_rx_fifo_acknowledge(&can_instance, 0,
     94e:	6823      	ldr	r3, [r4, #0]
 */
static inline void can_rx_fifo_acknowledge(
		struct can_module *const module_inst, bool fifo_number, uint32_t index)
{
	if (!fifo_number) {
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
     950:	6829      	ldr	r1, [r5, #0]
     952:	223f      	movs	r2, #63	; 0x3f
     954:	4013      	ands	r3, r2
     956:	3269      	adds	r2, #105	; 0x69
     958:	508b      	str	r3, [r1, r2]
				extended_receive_index);
		extended_receive_index++;
     95a:	6823      	ldr	r3, [r4, #0]
     95c:	3301      	adds	r3, #1
     95e:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
     960:	6823      	ldr	r3, [r4, #0]
     962:	2b10      	cmp	r3, #16
     964:	d102      	bne.n	96c <CAN0_Handler+0x1ac>
			extended_receive_index = 0;
     966:	2200      	movs	r2, #0
     968:	4b26      	ldr	r3, [pc, #152]	; (a04 <CAN0_Handler+0x244>)
     96a:	601a      	str	r2, [r3, #0]
		}

		printf("\n\r Extended message received in FIFO 1. The received data is: \r\n");
     96c:	4828      	ldr	r0, [pc, #160]	; (a10 <CAN0_Handler+0x250>)
     96e:	4b1c      	ldr	r3, [pc, #112]	; (9e0 <CAN0_Handler+0x220>)
     970:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
     972:	2300      	movs	r3, #0
     974:	9302      	str	r3, [sp, #8]
     976:	4b24      	ldr	r3, [pc, #144]	; (a08 <CAN0_Handler+0x248>)
     978:	685b      	ldr	r3, [r3, #4]
     97a:	031b      	lsls	r3, r3, #12
     97c:	0f1b      	lsrs	r3, r3, #28
     97e:	9a02      	ldr	r2, [sp, #8]
     980:	4293      	cmp	r3, r2
     982:	d910      	bls.n	9a6 <CAN0_Handler+0x1e6>
			printf("  %d",rx_element_fifo_1.data[i]);
     984:	4c18      	ldr	r4, [pc, #96]	; (9e8 <CAN0_Handler+0x228>)
     986:	4d20      	ldr	r5, [pc, #128]	; (a08 <CAN0_Handler+0x248>)
     988:	4e18      	ldr	r6, [pc, #96]	; (9ec <CAN0_Handler+0x22c>)
     98a:	9b02      	ldr	r3, [sp, #8]
     98c:	18eb      	adds	r3, r5, r3
     98e:	7a19      	ldrb	r1, [r3, #8]
     990:	1c20      	adds	r0, r4, #0
     992:	47b0      	blx	r6
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
			extended_receive_index = 0;
		}

		printf("\n\r Extended message received in FIFO 1. The received data is: \r\n");
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
     994:	9b02      	ldr	r3, [sp, #8]
     996:	3301      	adds	r3, #1
     998:	9302      	str	r3, [sp, #8]
     99a:	686b      	ldr	r3, [r5, #4]
     99c:	031b      	lsls	r3, r3, #12
     99e:	0f1b      	lsrs	r3, r3, #28
     9a0:	9a02      	ldr	r2, [sp, #8]
     9a2:	4293      	cmp	r3, r2
     9a4:	d8f1      	bhi.n	98a <CAN0_Handler+0x1ca>
			printf("  %d",rx_element_fifo_1.data[i]);
		}
		printf("\r\n\r\n");
     9a6:	4812      	ldr	r0, [pc, #72]	; (9f0 <CAN0_Handler+0x230>)
     9a8:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <CAN0_Handler+0x220>)
     9aa:	4798      	blx	r3
	}

	if ((status & CAN_PROTOCAL_ERROR_ARBITRATION)
     9ac:	9b03      	ldr	r3, [sp, #12]
     9ae:	011b      	lsls	r3, r3, #4
     9b0:	d402      	bmi.n	9b8 <CAN0_Handler+0x1f8>
			|| (status & CAN_PROTOCAL_ERROR_DATA)) {
     9b2:	9b03      	ldr	r3, [sp, #12]
     9b4:	00db      	lsls	r3, r3, #3
     9b6:	d507      	bpl.n	9c8 <CAN0_Handler+0x208>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     9b8:	4b05      	ldr	r3, [pc, #20]	; (9d0 <CAN0_Handler+0x210>)
     9ba:	681b      	ldr	r3, [r3, #0]
     9bc:	22c0      	movs	r2, #192	; 0xc0
     9be:	0552      	lsls	r2, r2, #21
     9c0:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_PROTOCAL_ERROR_ARBITRATION
			 	| CAN_PROTOCAL_ERROR_DATA);
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
     9c2:	4814      	ldr	r0, [pc, #80]	; (a14 <CAN0_Handler+0x254>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <CAN0_Handler+0x220>)
     9c6:	4798      	blx	r3
	}
}
     9c8:	b004      	add	sp, #16
     9ca:	bc04      	pop	{r2}
     9cc:	4690      	mov	r8, r2
     9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d0:	200000d0 	.word	0x200000d0
     9d4:	2000010c 	.word	0x2000010c
     9d8:	00001669 	.word	0x00001669
     9dc:	00004acc 	.word	0x00004acc
     9e0:	00002e7d 	.word	0x00002e7d
     9e4:	00004b10 	.word	0x00004b10
     9e8:	00004b54 	.word	0x00004b54
     9ec:	00002d85 	.word	0x00002d85
     9f0:	00004b5c 	.word	0x00004b5c
     9f4:	2000011c 	.word	0x2000011c
     9f8:	2000009c 	.word	0x2000009c
     9fc:	000016b9 	.word	0x000016b9
     a00:	00004b60 	.word	0x00004b60
     a04:	200000cc 	.word	0x200000cc
     a08:	200000ac 	.word	0x200000ac
     a0c:	00001709 	.word	0x00001709
     a10:	00004ba0 	.word	0x00004ba0
     a14:	00004be0 	.word	0x00004be0

00000a18 <configure_rtc_calendar>:

//! ******************************************* [RTC CONFIG ] *******************************************
struct rtc_module rtc_instance;

void configure_rtc_calendar(void)
{
     a18:	b530      	push	{r4, r5, lr}
     a1a:	b089      	sub	sp, #36	; 0x24
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
     a1c:	aa03      	add	r2, sp, #12
     a1e:	23b0      	movs	r3, #176	; 0xb0
     a20:	011b      	lsls	r3, r3, #4
     a22:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
     a24:	2300      	movs	r3, #0
     a26:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
     a28:	21fa      	movs	r1, #250	; 0xfa
     a2a:	00c9      	lsls	r1, r1, #3
     a2c:	8091      	strh	r1, [r2, #4]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) 
	config->enable_read_sync    = true;
     a2e:	2401      	movs	r4, #1
     a30:	7194      	strb	r4, [r2, #6]
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
     a32:	72d3      	strb	r3, [r2, #11]
	alarm.time.month = 1;
	alarm.time.day = 1;
	alarm.time.hour = 0;
	alarm.time.minute = 0;
	alarm.time.second = 0;
	config_rtc_calendar.clock_24h = true;
     a34:	70d4      	strb	r4, [r2, #3]
	config_rtc_calendar.alarm[0].time = alarm.time;
     a36:	7213      	strb	r3, [r2, #8]
     a38:	7253      	strb	r3, [r2, #9]
     a3a:	7293      	strb	r3, [r2, #10]
     a3c:	7314      	strb	r4, [r2, #12]
     a3e:	7354      	strb	r4, [r2, #13]
     a40:	23fc      	movs	r3, #252	; 0xfc
     a42:	00db      	lsls	r3, r3, #3
     a44:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
     a46:	7414      	strb	r4, [r2, #16]
	
	//! [init_rtc]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
     a48:	4d14      	ldr	r5, [pc, #80]	; (a9c <configure_rtc_calendar+0x84>)
     a4a:	1c28      	adds	r0, r5, #0
     a4c:	4914      	ldr	r1, [pc, #80]	; (aa0 <configure_rtc_calendar+0x88>)
     a4e:	4b15      	ldr	r3, [pc, #84]	; (aa4 <configure_rtc_calendar+0x8c>)
     a50:	4798      	blx	r3
	
	
	//[setup and initial RTC AND enable system event generate]
	struct rtc_calendar_events calendar_event;
	calendar_event.generate_event_on_periodic[6] = true;
     a52:	466b      	mov	r3, sp
     a54:	721c      	strb	r4, [r3, #8]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a56:	682d      	ldr	r5, [r5, #0]

	uint32_t event_mask = 0;

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
     a58:	781a      	ldrb	r2, [r3, #0]
		event_mask |= RTC_MODE2_EVCTRL_OVFEO;
     a5a:	1e53      	subs	r3, r2, #1
     a5c:	419a      	sbcs	r2, r3
     a5e:	03d2      	lsls	r2, r2, #15
	}

	/* Check if the user has requested any alarm events */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		if (events->generate_event_on_alarm[i]) {
     a60:	466b      	mov	r3, sp
     a62:	785b      	ldrb	r3, [r3, #1]
     a64:	2b00      	cmp	r3, #0
     a66:	d002      	beq.n	a6e <configure_rtc_calendar+0x56>
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
     a68:	2380      	movs	r3, #128	; 0x80
     a6a:	005b      	lsls	r3, r3, #1
     a6c:	431a      	orrs	r2, r3

//! ******************************************* [RTC CONFIG ] *******************************************
struct rtc_module rtc_instance;

void configure_rtc_calendar(void)
{
     a6e:	2300      	movs	r3, #0
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
     a70:	2401      	movs	r4, #1
     a72:	20ff      	movs	r0, #255	; 0xff
     a74:	1c19      	adds	r1, r3, #0
     a76:	4469      	add	r1, sp
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
     a78:	7889      	ldrb	r1, [r1, #2]
     a7a:	2900      	cmp	r1, #0
     a7c:	d003      	beq.n	a86 <configure_rtc_calendar+0x6e>
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
     a7e:	1c21      	adds	r1, r4, #0
     a80:	4099      	lsls	r1, r3
     a82:	4001      	ands	r1, r0
     a84:	430a      	orrs	r2, r1
     a86:	3301      	adds	r3, #1
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
     a88:	2b08      	cmp	r3, #8
     a8a:	d1f3      	bne.n	a74 <configure_rtc_calendar+0x5c>
		event_mask |= RTC_MODE2_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s) */
	rtc_module->MODE2.EVCTRL.reg |= event_mask;
     a8c:	686b      	ldr	r3, [r5, #4]
     a8e:	431a      	orrs	r2, r3
     a90:	606a      	str	r2, [r5, #4]
	struct rtc_calendar_events calendar_event;
	calendar_event.generate_event_on_periodic[6] = true;
	rtc_calendar_enable_events(&rtc_instance, &calendar_event);
	
	//! [enable]
	rtc_calendar_enable(&rtc_instance);
     a92:	4802      	ldr	r0, [pc, #8]	; (a9c <configure_rtc_calendar+0x84>)
     a94:	4b04      	ldr	r3, [pc, #16]	; (aa8 <configure_rtc_calendar+0x90>)
     a96:	4798      	blx	r3
}
     a98:	b009      	add	sp, #36	; 0x24
     a9a:	bd30      	pop	{r4, r5, pc}
     a9c:	20000ae8 	.word	0x20000ae8
     aa0:	40002400 	.word	0x40002400
     aa4:	000002f9 	.word	0x000002f9
     aa8:	000001f9 	.word	0x000001f9

00000aac <configure_rtc_callbacks>:
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
	
}

void configure_rtc_callbacks(void)
{
     aac:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
     aae:	4c05      	ldr	r4, [pc, #20]	; (ac4 <configure_rtc_callbacks+0x18>)
     ab0:	1c20      	adds	r0, r4, #0
     ab2:	4905      	ldr	r1, [pc, #20]	; (ac8 <configure_rtc_callbacks+0x1c>)
     ab4:	2208      	movs	r2, #8
     ab6:	4b05      	ldr	r3, [pc, #20]	; (acc <configure_rtc_callbacks+0x20>)
     ab8:	4798      	blx	r3
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
     aba:	1c20      	adds	r0, r4, #0
     abc:	2108      	movs	r1, #8
     abe:	4b04      	ldr	r3, [pc, #16]	; (ad0 <configure_rtc_callbacks+0x24>)
     ac0:	4798      	blx	r3
}
     ac2:	bd10      	pop	{r4, pc}
     ac4:	20000ae8 	.word	0x20000ae8
     ac8:	00000631 	.word	0x00000631
     acc:	00000375 	.word	0x00000375
     ad0:	00000395 	.word	0x00000395

00000ad4 <configure_tsens>:
/************************************************************************/
/* config temperature sensor                                            */
/************************************************************************/

void configure_tsens(void)
{
     ad4:	b500      	push	{lr}
     ad6:	b089      	sub	sp, #36	; 0x24
	struct tsens_config config_tsens;
	tsens_get_config_defaults(&config_tsens);
     ad8:	a801      	add	r0, sp, #4
     ada:	4b07      	ldr	r3, [pc, #28]	; (af8 <configure_tsens+0x24>)
     adc:	4798      	blx	r3
	tsens_init(&config_tsens);
     ade:	a801      	add	r0, sp, #4
     ae0:	4b06      	ldr	r3, [pc, #24]	; (afc <configure_tsens+0x28>)
     ae2:	4798      	blx	r3
 * Enables an TSENS module that has previously been configured.

 */
static inline void tsens_enable(void)
{
	TSENS->CTRLA.reg |= TSENS_CTRLA_ENABLE;
     ae4:	4a06      	ldr	r2, [pc, #24]	; (b00 <configure_tsens+0x2c>)
     ae6:	7811      	ldrb	r1, [r2, #0]
     ae8:	2302      	movs	r3, #2
     aea:	430b      	orrs	r3, r1
     aec:	7013      	strb	r3, [r2, #0]
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool tsens_is_syncing(void)
{
	if (TSENS->SYNCBUSY.reg) {
     aee:	6893      	ldr	r3, [r2, #8]
 */
static inline void tsens_enable(void)
{
	TSENS->CTRLA.reg |= TSENS_CTRLA_ENABLE;

	while (tsens_is_syncing()) {
     af0:	2b00      	cmp	r3, #0
     af2:	d1fc      	bne.n	aee <configure_tsens+0x1a>
	tsens_enable();
}
     af4:	b009      	add	sp, #36	; 0x24
     af6:	bd00      	pop	{pc}
     af8:	00000539 	.word	0x00000539
     afc:	00000481 	.word	0x00000481
     b00:	40003000 	.word	0x40003000

00000b04 <main>:


//! [setup]

int main(void)
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	4647      	mov	r7, r8
     b08:	b480      	push	{r7}
     b0a:	b09a      	sub	sp, #104	; 0x68
	
	uint8_t key;

//! [setup_init]
	system_init();
     b0c:	4bca      	ldr	r3, [pc, #808]	; (e38 <main+0x334>)
     b0e:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     b10:	2401      	movs	r4, #1
     b12:	4bca      	ldr	r3, [pc, #808]	; (e3c <main+0x338>)
     b14:	701c      	strb	r4, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     b16:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     b1a:	b662      	cpsie	i
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     b1c:	aa02      	add	r2, sp, #8
     b1e:	2380      	movs	r3, #128	; 0x80
     b20:	05db      	lsls	r3, r3, #23
     b22:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     b24:	2300      	movs	r3, #0
     b26:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
     b28:	21ff      	movs	r1, #255	; 0xff
     b2a:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
     b2c:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     b2e:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     b30:	39d3      	subs	r1, #211	; 0xd3
     b32:	5454      	strb	r4, [r2, r1]
	config->transmitter_enable = true;
     b34:	3101      	adds	r1, #1
     b36:	5454      	strb	r4, [r2, r1]
	config->clock_polarity_inverted = false;
     b38:	3101      	adds	r1, #1
     b3a:	5453      	strb	r3, [r2, r1]
	config->use_external_clock = false;
     b3c:	3101      	adds	r1, #1
     b3e:	5453      	strb	r3, [r2, r1]
	config->ext_clock_freq   = 0;
     b40:	6313      	str	r3, [r2, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     b42:	3105      	adds	r1, #5
     b44:	5453      	strb	r3, [r2, r1]
	config->generator_source = GCLK_GENERATOR_0;
     b46:	3101      	adds	r1, #1
     b48:	5453      	strb	r3, [r2, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     b4a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     b4c:	2100      	movs	r1, #0
     b4e:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     b50:	76d1      	strb	r1, [r2, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
     b52:	61d3      	str	r3, [r2, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
     b54:	8413      	strh	r3, [r2, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
     b56:	8453      	strh	r3, [r2, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     b58:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     b5a:	3324      	adds	r3, #36	; 0x24
     b5c:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     b5e:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
     b60:	3b11      	subs	r3, #17
     b62:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     b64:	3313      	adds	r3, #19
     b66:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
     b68:	3b01      	subs	r3, #1
     b6a:	54d1      	strb	r1, [r2, r3]
static void configure_usart_cdc(void)
{

	struct usart_config config_cdc;
	usart_get_config_defaults(&config_cdc);
	config_cdc.baudrate	 = 38400;
     b6c:	2396      	movs	r3, #150	; 0x96
     b6e:	021b      	lsls	r3, r3, #8
     b70:	6293      	str	r3, [r2, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     b72:	23c4      	movs	r3, #196	; 0xc4
     b74:	039b      	lsls	r3, r3, #14
     b76:	60d3      	str	r3, [r2, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     b78:	2301      	movs	r3, #1
     b7a:	425b      	negs	r3, r3
     b7c:	6393      	str	r3, [r2, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     b7e:	63d3      	str	r3, [r2, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     b80:	4baf      	ldr	r3, [pc, #700]	; (e40 <main+0x33c>)
     b82:	6413      	str	r3, [r2, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     b84:	4baf      	ldr	r3, [pc, #700]	; (e44 <main+0x340>)
     b86:	6453      	str	r3, [r2, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     b88:	4daf      	ldr	r5, [pc, #700]	; (e48 <main+0x344>)
     b8a:	4bb0      	ldr	r3, [pc, #704]	; (e4c <main+0x348>)
     b8c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     b8e:	49b0      	ldr	r1, [pc, #704]	; (e50 <main+0x34c>)
     b90:	4bb0      	ldr	r3, [pc, #704]	; (e54 <main+0x350>)
     b92:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     b94:	49b0      	ldr	r1, [pc, #704]	; (e58 <main+0x354>)
     b96:	4bb1      	ldr	r3, [pc, #708]	; (e5c <main+0x358>)
     b98:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     b9a:	1c28      	adds	r0, r5, #0
     b9c:	49b0      	ldr	r1, [pc, #704]	; (e60 <main+0x35c>)
     b9e:	4bb1      	ldr	r3, [pc, #708]	; (e64 <main+0x360>)
     ba0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     ba2:	4fb1      	ldr	r7, [pc, #708]	; (e68 <main+0x364>)
     ba4:	683b      	ldr	r3, [r7, #0]
     ba6:	6898      	ldr	r0, [r3, #8]
     ba8:	2100      	movs	r1, #0
     baa:	4eb0      	ldr	r6, [pc, #704]	; (e6c <main+0x368>)
     bac:	47b0      	blx	r6
	setbuf(stdin, NULL);
     bae:	683b      	ldr	r3, [r7, #0]
     bb0:	6858      	ldr	r0, [r3, #4]
     bb2:	2100      	movs	r1, #0
     bb4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bb6:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     bb8:	1c30      	adds	r0, r6, #0
     bba:	4bad      	ldr	r3, [pc, #692]	; (e70 <main+0x36c>)
     bbc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     bbe:	231f      	movs	r3, #31
     bc0:	4018      	ands	r0, r3
     bc2:	4084      	lsls	r4, r0
     bc4:	4bab      	ldr	r3, [pc, #684]	; (e74 <main+0x370>)
     bc6:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bc8:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bca:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bcc:	2a00      	cmp	r2, #0
     bce:	d1fc      	bne.n	bca <main+0xc6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     bd0:	6832      	ldr	r2, [r6, #0]
     bd2:	2302      	movs	r3, #2
     bd4:	4313      	orrs	r3, r2
     bd6:	6033      	str	r3, [r6, #0]
static volatile uint32_t event_count = 0;
void event_counter(struct events_resource *resource);
static void configure_event_channel(struct events_resource *resource)
{
	struct events_config config;
	events_get_config_defaults(&config);
     bd8:	ac02      	add	r4, sp, #8
     bda:	1c20      	adds	r0, r4, #0
     bdc:	4ba6      	ldr	r3, [pc, #664]	; (e78 <main+0x374>)
     bde:	4798      	blx	r3
	config.generator = CONF_EVENT_GENERATOR;
     be0:	230c      	movs	r3, #12
     be2:	70a3      	strb	r3, [r4, #2]
	config.edge_detect = EVENTS_EDGE_DETECT_RISING;
     be4:	3b0b      	subs	r3, #11
     be6:	7023      	strb	r3, [r4, #0]
	config.path = EVENTS_PATH_SYNCHRONOUS;
     be8:	2300      	movs	r3, #0
     bea:	7063      	strb	r3, [r4, #1]
	config.clock_source = GCLK_GENERATOR_0;
     bec:	70e3      	strb	r3, [r4, #3]
	events_allocate(resource, &config);
     bee:	a817      	add	r0, sp, #92	; 0x5c
     bf0:	1c21      	adds	r1, r4, #0
     bf2:	4ba2      	ldr	r3, [pc, #648]	; (e7c <main+0x378>)
     bf4:	4798      	blx	r3
}

static void configure_event_user(struct events_resource *resource)
{
	events_attach_user(resource, CONF_EVENT_USER);
     bf6:	a817      	add	r0, sp, #92	; 0x5c
     bf8:	2105      	movs	r1, #5
     bfa:	4ba1      	ldr	r3, [pc, #644]	; (e80 <main+0x37c>)
     bfc:	4798      	blx	r3
}

static void configure_event_interrupt(struct events_resource *resource,
struct events_hook *hook)
{
	events_create_hook(hook, event_counter);
     bfe:	a814      	add	r0, sp, #80	; 0x50
     c00:	49a0      	ldr	r1, [pc, #640]	; (e84 <main+0x380>)
     c02:	4ba1      	ldr	r3, [pc, #644]	; (e88 <main+0x384>)
     c04:	4798      	blx	r3
	events_add_hook(resource, hook);
     c06:	a817      	add	r0, sp, #92	; 0x5c
     c08:	a914      	add	r1, sp, #80	; 0x50
     c0a:	4ba0      	ldr	r3, [pc, #640]	; (e8c <main+0x388>)
     c0c:	4798      	blx	r3
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
     c0e:	a817      	add	r0, sp, #92	; 0x5c
     c10:	2101      	movs	r1, #1
     c12:	4b9f      	ldr	r3, [pc, #636]	; (e90 <main+0x38c>)
     c14:	4798      	blx	r3
	configure_event_channel(&example_event);
	configure_event_user(&example_event);
	configure_event_interrupt(&example_event, &hook);
	
	//setup RTC
	configure_rtc_calendar();
     c16:	4b9f      	ldr	r3, [pc, #636]	; (e94 <main+0x390>)
     c18:	4798      	blx	r3
	configure_rtc_callbacks();
     c1a:	4b9f      	ldr	r3, [pc, #636]	; (e98 <main+0x394>)
     c1c:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
     c1e:	489f      	ldr	r0, [pc, #636]	; (e9c <main+0x398>)
     c20:	4b9f      	ldr	r3, [pc, #636]	; (ea0 <main+0x39c>)
     c22:	4798      	blx	r3

//!config temperature sensor
	configure_tsens();
     c24:	4b9f      	ldr	r3, [pc, #636]	; (ea4 <main+0x3a0>)
     c26:	4798      	blx	r3
//! [can_init_setup]
static void configure_can(void)
{
	uint32_t i;
	/* Initialize the memory. */
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     c28:	2300      	movs	r3, #0
		tx_message_0[i] = i;
     c2a:	489f      	ldr	r0, [pc, #636]	; (ea8 <main+0x3a4>)
		tx_message_1[i] = i + 0x80;
     c2c:	499f      	ldr	r1, [pc, #636]	; (eac <main+0x3a8>)
static void configure_can(void)
{
	uint32_t i;
	/* Initialize the memory. */
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
		tx_message_0[i] = i;
     c2e:	b2da      	uxtb	r2, r3
     c30:	541a      	strb	r2, [r3, r0]
     c32:	3a80      	subs	r2, #128	; 0x80
		tx_message_1[i] = i + 0x80;
     c34:	545a      	strb	r2, [r3, r1]
//! [can_init_setup]
static void configure_can(void)
{
	uint32_t i;
	/* Initialize the memory. */
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     c36:	3301      	adds	r3, #1
     c38:	2b08      	cmp	r3, #8
     c3a:	d1f8      	bne.n	c2e <main+0x12a>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c3c:	ae01      	add	r6, sp, #4
     c3e:	2400      	movs	r4, #0
     c40:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c42:	2501      	movs	r5, #1
     c44:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
     c46:	70f4      	strb	r4, [r6, #3]
	}

	/* Set up the CAN TX/RX pins */
	struct system_pinmux_config pin_config;
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = CAN_TX_MUX_SETTING;
     c48:	3b02      	subs	r3, #2
     c4a:	4698      	mov	r8, r3
     c4c:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
     c4e:	2018      	movs	r0, #24
     c50:	1c31      	adds	r1, r6, #0
     c52:	4f97      	ldr	r7, [pc, #604]	; (eb0 <main+0x3ac>)
     c54:	47b8      	blx	r7
	pin_config.mux_position = CAN_RX_MUX_SETTING;
     c56:	4643      	mov	r3, r8
     c58:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
     c5a:	2019      	movs	r0, #25
     c5c:	1c31      	adds	r1, r6, #0
     c5e:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->clock_source = GCLK_GENERATOR_8;
     c60:	aa02      	add	r2, sp, #8
     c62:	2308      	movs	r3, #8
     c64:	7013      	strb	r3, [r2, #0]
	config->run_in_standby = false;
     c66:	7054      	strb	r4, [r2, #1]
	config->watchdog_configuration = 0x00;
     c68:	7094      	strb	r4, [r2, #2]
	config->transmit_pause = true;
     c6a:	70d5      	strb	r5, [r2, #3]
	config->edge_filtering = true;
     c6c:	7115      	strb	r5, [r2, #4]
	config->protocol_exception_handling = true;
     c6e:	7155      	strb	r5, [r2, #5]
	config->automatic_retransmission = true;
     c70:	7195      	strb	r5, [r2, #6]
	config->clock_stop_request = false;
     c72:	71d4      	strb	r4, [r2, #7]
	config->clock_stop_acknowledge = false;
     c74:	7214      	strb	r4, [r2, #8]
	config->timestamp_prescaler = 0;
     c76:	7254      	strb	r4, [r2, #9]
	config->timeout_period = 0xFFFF;
     c78:	3b09      	subs	r3, #9
     c7a:	8153      	strh	r3, [r2, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
     c7c:	7314      	strb	r4, [r2, #12]
	config->timeout_enable = false;
     c7e:	7354      	strb	r4, [r2, #13]
	config->delay_compensation_offset = 0;
     c80:	7394      	strb	r4, [r2, #14]
	config->delay_compensation_filter_window_length = 0;
     c82:	73d4      	strb	r4, [r2, #15]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
     c84:	3303      	adds	r3, #3
     c86:	7413      	strb	r3, [r2, #16]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
     c88:	7453      	strb	r3, [r2, #17]
	config->remote_frames_standard_reject = true;
     c8a:	7495      	strb	r5, [r2, #18]
	config->remote_frames_extended_reject = true;
     c8c:	74d5      	strb	r5, [r2, #19]
	config->extended_id_mask = 0x1FFFFFFF;
     c8e:	4b89      	ldr	r3, [pc, #548]	; (eb4 <main+0x3b0>)
     c90:	6153      	str	r3, [r2, #20]
	config->rx_fifo_0_overwrite = true;
     c92:	7615      	strb	r5, [r2, #24]
	config->rx_fifo_0_watermark = 0;
     c94:	7654      	strb	r4, [r2, #25]
	config->rx_fifo_1_overwrite = true;
     c96:	7695      	strb	r5, [r2, #26]
	config->rx_fifo_1_watermark = 0;
     c98:	76d4      	strb	r4, [r2, #27]
	config->tx_queue_mode = false;
     c9a:	7714      	strb	r4, [r2, #28]
	config->tx_event_fifo_watermark = 0;
     c9c:	7754      	strb	r4, [r2, #29]

	/* Initialize the module. */
	struct can_config config_can;
	can_get_config_defaults(&config_can);
	can_init(&can_instance, CAN_MODULE, &config_can);
     c9e:	4c86      	ldr	r4, [pc, #536]	; (eb8 <main+0x3b4>)
     ca0:	1c20      	adds	r0, r4, #0
     ca2:	4986      	ldr	r1, [pc, #536]	; (ebc <main+0x3b8>)
     ca4:	4b86      	ldr	r3, [pc, #536]	; (ec0 <main+0x3bc>)
     ca6:	4798      	blx	r3

	can_start(&can_instance);
     ca8:	1c20      	adds	r0, r4, #0
     caa:	4b86      	ldr	r3, [pc, #536]	; (ec4 <main+0x3c0>)
     cac:	4798      	blx	r3
     cae:	2280      	movs	r2, #128	; 0x80
     cb0:	0212      	lsls	r2, r2, #8
     cb2:	4b70      	ldr	r3, [pc, #448]	; (e74 <main+0x370>)
     cb4:	601a      	str	r2, [r3, #0]
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     cb6:	6822      	ldr	r2, [r4, #0]
     cb8:	6d53      	ldr	r3, [r2, #84]	; 0x54
     cba:	21c0      	movs	r1, #192	; 0xc0
     cbc:	0549      	lsls	r1, r1, #21
     cbe:	430b      	orrs	r3, r1
     cc0:	6553      	str	r3, [r2, #84]	; 0x54


//! [user_menu]
static void display_menu(void)
{
	printf("Menu :\r\n"
     cc2:	4881      	ldr	r0, [pc, #516]	; (ec8 <main+0x3c4>)
     cc4:	4b81      	ldr	r3, [pc, #516]	; (ecc <main+0x3c8>)
     cc6:	4798      	blx	r3

//! [display_user_menu]
	display_menu();
//! [display_user_menu]

while (events_is_busy(&example_event)) {
     cc8:	4c81      	ldr	r4, [pc, #516]	; (ed0 <main+0x3cc>)
     cca:	a817      	add	r0, sp, #92	; 0x5c
     ccc:	47a0      	blx	r4
     cce:	2800      	cmp	r0, #0
     cd0:	d1fb      	bne.n	cca <main+0x1c6>
};


//! [main_loop]
	while(1) {
		scanf("%c", (char *)&key);
     cd2:	4c80      	ldr	r4, [pc, #512]	; (ed4 <main+0x3d0>)
     cd4:	4e80      	ldr	r6, [pc, #512]	; (ed8 <main+0x3d4>)

		switch (key) {
     cd6:	4f81      	ldr	r7, [pc, #516]	; (edc <main+0x3d8>)
};


//! [main_loop]
	while(1) {
		scanf("%c", (char *)&key);
     cd8:	2567      	movs	r5, #103	; 0x67
     cda:	446d      	add	r5, sp
     cdc:	1c20      	adds	r0, r4, #0
     cde:	1c29      	adds	r1, r5, #0
     ce0:	47b0      	blx	r6

		switch (key) {
     ce2:	782b      	ldrb	r3, [r5, #0]
     ce4:	3b30      	subs	r3, #48	; 0x30
     ce6:	b2da      	uxtb	r2, r3
     ce8:	2a38      	cmp	r2, #56	; 0x38
     cea:	d8f5      	bhi.n	cd8 <main+0x1d4>
     cec:	0093      	lsls	r3, r2, #2
     cee:	58fb      	ldr	r3, [r7, r3]
     cf0:	469f      	mov	pc, r3


//! [user_menu]
static void display_menu(void)
{
	printf("Menu :\r\n"
     cf2:	4875      	ldr	r0, [pc, #468]	; (ec8 <main+0x3c4>)
     cf4:	4b75      	ldr	r3, [pc, #468]	; (ecc <main+0x3c8>)
     cf6:	4798      	blx	r3
     cf8:	e7ee      	b.n	cd8 <main+0x1d4>
		case 'h':
			display_menu();
			break;

		case '0':
			printf("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
     cfa:	4879      	ldr	r0, [pc, #484]	; (ee0 <main+0x3dc>)
     cfc:	4b73      	ldr	r3, [pc, #460]	; (ecc <main+0x3c8>)
     cfe:	4798      	blx	r3
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void can_get_standard_message_filter_element_default(
		struct can_standard_message_filter_element *sd_filter)
{
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
     d00:	4b78      	ldr	r3, [pc, #480]	; (ee4 <main+0x3e0>)
     d02:	9302      	str	r3, [sp, #8]
static void can_set_standard_filter_0(void)
{
	struct can_standard_message_filter_element sd_filter;

	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX;
     d04:	9b02      	ldr	r3, [sp, #8]
     d06:	0adb      	lsrs	r3, r3, #11
     d08:	02db      	lsls	r3, r3, #11
     d0a:	2202      	movs	r2, #2
     d0c:	4313      	orrs	r3, r2
     d0e:	9302      	str	r3, [sp, #8]
	sd_filter.S0.bit.SFID1 = CAN_RX_STANDARD_FILTER_ID_0;
     d10:	9a02      	ldr	r2, [sp, #8]
     d12:	4b75      	ldr	r3, [pc, #468]	; (ee8 <main+0x3e4>)
     d14:	4013      	ands	r3, r2
     d16:	4a75      	ldr	r2, [pc, #468]	; (eec <main+0x3e8>)
     d18:	4313      	orrs	r3, r2
     d1a:	9302      	str	r3, [sp, #8]
	sd_filter.S0.bit.SFEC =
     d1c:	9b02      	ldr	r3, [sp, #8]
     d1e:	22e0      	movs	r2, #224	; 0xe0
     d20:	0592      	lsls	r2, r2, #22
     d22:	4313      	orrs	r3, r2
     d24:	9302      	str	r3, [sp, #8]
			CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;

	can_set_rx_standand_filter(&can_instance, &sd_filter,
     d26:	4d64      	ldr	r5, [pc, #400]	; (eb8 <main+0x3b4>)
     d28:	1c28      	adds	r0, r5, #0
     d2a:	a902      	add	r1, sp, #8
     d2c:	2200      	movs	r2, #0
     d2e:	4b70      	ldr	r3, [pc, #448]	; (ef0 <main+0x3ec>)
     d30:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     d32:	682a      	ldr	r2, [r5, #0]
     d34:	6d53      	ldr	r3, [r2, #84]	; 0x54
     d36:	2180      	movs	r1, #128	; 0x80
     d38:	0309      	lsls	r1, r1, #12
     d3a:	430b      	orrs	r3, r1
     d3c:	6553      	str	r3, [r2, #84]	; 0x54
     d3e:	e7cb      	b.n	cd8 <main+0x1d4>
			printf("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
			can_set_standard_filter_0();
			break;

		case '1':
			printf("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
     d40:	486c      	ldr	r0, [pc, #432]	; (ef4 <main+0x3f0>)
     d42:	4b62      	ldr	r3, [pc, #392]	; (ecc <main+0x3c8>)
     d44:	4798      	blx	r3
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void can_get_standard_message_filter_element_default(
		struct can_standard_message_filter_element *sd_filter)
{
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
     d46:	4b67      	ldr	r3, [pc, #412]	; (ee4 <main+0x3e0>)
     d48:	9302      	str	r3, [sp, #8]
static void can_set_standard_filter_1(void)
{
	struct can_standard_message_filter_element sd_filter;

	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID1 = CAN_RX_STANDARD_FILTER_ID_1;
     d4a:	9a02      	ldr	r2, [sp, #8]
     d4c:	4b66      	ldr	r3, [pc, #408]	; (ee8 <main+0x3e4>)
     d4e:	4013      	ands	r3, r2
     d50:	4a69      	ldr	r2, [pc, #420]	; (ef8 <main+0x3f4>)
     d52:	4313      	orrs	r3, r2
     d54:	9302      	str	r3, [sp, #8]

	can_set_rx_standand_filter(&can_instance, &sd_filter,
     d56:	4d58      	ldr	r5, [pc, #352]	; (eb8 <main+0x3b4>)
     d58:	1c28      	adds	r0, r5, #0
     d5a:	a902      	add	r1, sp, #8
     d5c:	2201      	movs	r2, #1
     d5e:	4b64      	ldr	r3, [pc, #400]	; (ef0 <main+0x3ec>)
     d60:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     d62:	682a      	ldr	r2, [r5, #0]
     d64:	6d51      	ldr	r1, [r2, #84]	; 0x54
     d66:	2301      	movs	r3, #1
     d68:	430b      	orrs	r3, r1
     d6a:	6553      	str	r3, [r2, #84]	; 0x54
     d6c:	e7b4      	b.n	cd8 <main+0x1d4>
			printf("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
			can_set_standard_filter_1();
			break;

		case '2':
			printf("  2: Send standard message with ID: 0x45A and 4 byte data 0 to 3. \r\n");
     d6e:	4863      	ldr	r0, [pc, #396]	; (efc <main+0x3f8>)
     d70:	4b56      	ldr	r3, [pc, #344]	; (ecc <main+0x3c8>)
     d72:	4798      	blx	r3
			can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_0, tx_message_0,
     d74:	4862      	ldr	r0, [pc, #392]	; (f00 <main+0x3fc>)
     d76:	494c      	ldr	r1, [pc, #304]	; (ea8 <main+0x3a4>)
     d78:	2204      	movs	r2, #4
     d7a:	4b62      	ldr	r3, [pc, #392]	; (f04 <main+0x400>)
     d7c:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE / 2);
			break;
     d7e:	e7ab      	b.n	cd8 <main+0x1d4>

		case '3':
			printf("  3: Send standard message with ID: 0x469 and 4 byte data 128 to 131. \r\n");
     d80:	4861      	ldr	r0, [pc, #388]	; (f08 <main+0x404>)
     d82:	4b52      	ldr	r3, [pc, #328]	; (ecc <main+0x3c8>)
     d84:	4798      	blx	r3
			can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_1, tx_message_1,
     d86:	4861      	ldr	r0, [pc, #388]	; (f0c <main+0x408>)
     d88:	4948      	ldr	r1, [pc, #288]	; (eac <main+0x3a8>)
     d8a:	2204      	movs	r2, #4
     d8c:	4b5d      	ldr	r3, [pc, #372]	; (f04 <main+0x400>)
     d8e:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE / 2);
			break;
     d90:	e7a2      	b.n	cd8 <main+0x1d4>

		case '4':
			printf("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
     d92:	485f      	ldr	r0, [pc, #380]	; (f10 <main+0x40c>)
     d94:	4b4d      	ldr	r3, [pc, #308]	; (ecc <main+0x3c8>)
     d96:	4798      	blx	r3
 * \param[out] et_filter  Pointer to extended filter element struct to initialize to default values
 */
static inline void can_get_extended_message_filter_element_default(
		struct can_extended_message_filter_element *et_filter)
{
	et_filter->F0.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
     d98:	2380      	movs	r3, #128	; 0x80
     d9a:	05db      	lsls	r3, r3, #23
     d9c:	9302      	str	r3, [sp, #8]
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC(
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val);
	et_filter->F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
     d9e:	4b5d      	ldr	r3, [pc, #372]	; (f14 <main+0x410>)
     da0:	9303      	str	r3, [sp, #12]
static void can_set_extended_filter_0(void)
{
	struct can_extended_message_filter_element et_filter;

	can_get_extended_message_filter_element_default(&et_filter);
	et_filter.F0.bit.EFID1 = CAN_RX_EXTENDED_FILTER_ID_0;
     da2:	9b02      	ldr	r3, [sp, #8]
     da4:	0f5b      	lsrs	r3, r3, #29
     da6:	075b      	lsls	r3, r3, #29
     da8:	4a5b      	ldr	r2, [pc, #364]	; (f18 <main+0x414>)
     daa:	4313      	orrs	r3, r2
     dac:	9302      	str	r3, [sp, #8]
	et_filter.F0.bit.EFEC =
     dae:	9b02      	ldr	r3, [sp, #8]
     db0:	22e0      	movs	r2, #224	; 0xe0
     db2:	0612      	lsls	r2, r2, #24
     db4:	4313      	orrs	r3, r2
     db6:	9302      	str	r3, [sp, #8]
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STRXBUF_Val;
	et_filter.F1.bit.EFID2 = CAN_RX_EXTENDED_FILTER_ID_0_BUFFER_INDEX;
     db8:	9b03      	ldr	r3, [sp, #12]
     dba:	0f5b      	lsrs	r3, r3, #29
     dbc:	075b      	lsls	r3, r3, #29
     dbe:	2201      	movs	r2, #1
     dc0:	4313      	orrs	r3, r2
     dc2:	9303      	str	r3, [sp, #12]

	can_set_rx_extended_filter(&can_instance, &et_filter,
     dc4:	4d3c      	ldr	r5, [pc, #240]	; (eb8 <main+0x3b4>)
     dc6:	1c28      	adds	r0, r5, #0
     dc8:	a902      	add	r1, sp, #8
     dca:	2200      	movs	r2, #0
     dcc:	4b53      	ldr	r3, [pc, #332]	; (f1c <main+0x418>)
     dce:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     dd0:	682a      	ldr	r2, [r5, #0]
     dd2:	6d53      	ldr	r3, [r2, #84]	; 0x54
     dd4:	2180      	movs	r1, #128	; 0x80
     dd6:	0309      	lsls	r1, r1, #12
     dd8:	430b      	orrs	r3, r1
     dda:	6553      	str	r3, [r2, #84]	; 0x54
     ddc:	e77c      	b.n	cd8 <main+0x1d4>
			printf("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
			can_set_extended_filter_0();
			break;

		case '5':
			printf("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
     dde:	4850      	ldr	r0, [pc, #320]	; (f20 <main+0x41c>)
     de0:	4b3a      	ldr	r3, [pc, #232]	; (ecc <main+0x3c8>)
     de2:	4798      	blx	r3
 * \param[out] et_filter  Pointer to extended filter element struct to initialize to default values
 */
static inline void can_get_extended_message_filter_element_default(
		struct can_extended_message_filter_element *et_filter)
{
	et_filter->F0.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
     de4:	2380      	movs	r3, #128	; 0x80
     de6:	05db      	lsls	r3, r3, #23
     de8:	9302      	str	r3, [sp, #8]
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC(
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val);
	et_filter->F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
     dea:	4b4a      	ldr	r3, [pc, #296]	; (f14 <main+0x410>)
     dec:	9303      	str	r3, [sp, #12]
static void can_set_extended_filter_1(void)
{
	struct can_extended_message_filter_element et_filter;

	can_get_extended_message_filter_element_default(&et_filter);
	et_filter.F0.bit.EFID1 = CAN_RX_EXTENDED_FILTER_ID_1;
     dee:	9b02      	ldr	r3, [sp, #8]
     df0:	0f5b      	lsrs	r3, r3, #29
     df2:	075b      	lsls	r3, r3, #29
     df4:	4a4b      	ldr	r2, [pc, #300]	; (f24 <main+0x420>)
     df6:	4313      	orrs	r3, r2
     df8:	9302      	str	r3, [sp, #8]

	can_set_rx_extended_filter(&can_instance, &et_filter,
     dfa:	4d2f      	ldr	r5, [pc, #188]	; (eb8 <main+0x3b4>)
     dfc:	1c28      	adds	r0, r5, #0
     dfe:	a902      	add	r1, sp, #8
     e00:	2201      	movs	r2, #1
     e02:	4b46      	ldr	r3, [pc, #280]	; (f1c <main+0x418>)
     e04:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     e06:	682a      	ldr	r2, [r5, #0]
     e08:	6d51      	ldr	r1, [r2, #84]	; 0x54
     e0a:	2310      	movs	r3, #16
     e0c:	430b      	orrs	r3, r1
     e0e:	6553      	str	r3, [r2, #84]	; 0x54
     e10:	e762      	b.n	cd8 <main+0x1d4>
			printf("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
			can_set_extended_filter_1();
			break;

		case '6':
			printf("  6: Send extended message with ID: 0x100000A5 and 8 byte data 0 to 7. \r\n");
     e12:	4845      	ldr	r0, [pc, #276]	; (f28 <main+0x424>)
     e14:	4b2d      	ldr	r3, [pc, #180]	; (ecc <main+0x3c8>)
     e16:	4798      	blx	r3
			can_send_extended_message(CAN_RX_EXTENDED_FILTER_ID_0, tx_message_0,
     e18:	483f      	ldr	r0, [pc, #252]	; (f18 <main+0x414>)
     e1a:	4923      	ldr	r1, [pc, #140]	; (ea8 <main+0x3a4>)
     e1c:	2208      	movs	r2, #8
     e1e:	4b43      	ldr	r3, [pc, #268]	; (f2c <main+0x428>)
     e20:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE);
			break;
     e22:	e759      	b.n	cd8 <main+0x1d4>

		case '7':
			printf("  7: Send extended message with ID: 0x10000096 and 8 byte data 128 to 135. \r\n");
     e24:	4842      	ldr	r0, [pc, #264]	; (f30 <main+0x42c>)
     e26:	4b29      	ldr	r3, [pc, #164]	; (ecc <main+0x3c8>)
     e28:	4798      	blx	r3
			can_send_extended_message(CAN_RX_EXTENDED_FILTER_ID_1, tx_message_1,
     e2a:	483e      	ldr	r0, [pc, #248]	; (f24 <main+0x420>)
     e2c:	491f      	ldr	r1, [pc, #124]	; (eac <main+0x3a8>)
     e2e:	2208      	movs	r2, #8
     e30:	4b3e      	ldr	r3, [pc, #248]	; (f2c <main+0x428>)
     e32:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE);
			break;
     e34:	e750      	b.n	cd8 <main+0x1d4>
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	000029fd 	.word	0x000029fd
     e3c:	20000014 	.word	0x20000014
     e40:	002a0003 	.word	0x002a0003
     e44:	002b0003 	.word	0x002b0003
     e48:	200000d4 	.word	0x200000d4
     e4c:	20000b5c 	.word	0x20000b5c
     e50:	000006d1 	.word	0x000006d1
     e54:	20000b58 	.word	0x20000b58
     e58:	000006a5 	.word	0x000006a5
     e5c:	20000b54 	.word	0x20000b54
     e60:	42001400 	.word	0x42001400
     e64:	00001cbd 	.word	0x00001cbd
     e68:	20000078 	.word	0x20000078
     e6c:	00002ec5 	.word	0x00002ec5
     e70:	00001c31 	.word	0x00001c31
     e74:	e000e100 	.word	0xe000e100
     e78:	000010f1 	.word	0x000010f1
     e7c:	00001105 	.word	0x00001105
     e80:	000011e1 	.word	0x000011e1
     e84:	000005f9 	.word	0x000005f9
     e88:	00000fad 	.word	0x00000fad
     e8c:	00000fb9 	.word	0x00000fb9
     e90:	00000fed 	.word	0x00000fed
     e94:	00000a19 	.word	0x00000a19
     e98:	00000aad 	.word	0x00000aad
     e9c:	20000ae8 	.word	0x20000ae8
     ea0:	000001f9 	.word	0x000001f9
     ea4:	00000ad5 	.word	0x00000ad5
     ea8:	200000bc 	.word	0x200000bc
     eac:	200000c4 	.word	0x200000c4
     eb0:	000029cd 	.word	0x000029cd
     eb4:	1fffffff 	.word	0x1fffffff
     eb8:	200000d0 	.word	0x200000d0
     ebc:	42001c00 	.word	0x42001c00
     ec0:	000012dd 	.word	0x000012dd
     ec4:	000015cd 	.word	0x000015cd
     ec8:	00004c24 	.word	0x00004c24
     ecc:	00002e7d 	.word	0x00002e7d
     ed0:	000011c5 	.word	0x000011c5
     ed4:	00004e80 	.word	0x00004e80
     ed8:	00002e91 	.word	0x00002e91
     edc:	000049d8 	.word	0x000049d8
     ee0:	00004e84 	.word	0x00004e84
     ee4:	880007ff 	.word	0x880007ff
     ee8:	f800ffff 	.word	0xf800ffff
     eec:	045a0000 	.word	0x045a0000
     ef0:	000015e5 	.word	0x000015e5
     ef4:	00004ec4 	.word	0x00004ec4
     ef8:	04690000 	.word	0x04690000
     efc:	00004f04 	.word	0x00004f04
     f00:	0000045a 	.word	0x0000045a
     f04:	000006e9 	.word	0x000006e9
     f08:	00004f48 	.word	0x00004f48
     f0c:	00000469 	.word	0x00000469
     f10:	00004f90 	.word	0x00004f90
     f14:	9fffffff 	.word	0x9fffffff
     f18:	100000a5 	.word	0x100000a5
     f1c:	00001621 	.word	0x00001621
     f20:	00004fd4 	.word	0x00004fd4
     f24:	10000096 	.word	0x10000096
     f28:	00005018 	.word	0x00005018
     f2c:	00000755 	.word	0x00000755
     f30:	00005064 	.word	0x00005064

00000f34 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     f34:	b5f0      	push	{r4, r5, r6, r7, lr}
     f36:	4647      	mov	r7, r8
     f38:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     f3a:	0080      	lsls	r0, r0, #2
     f3c:	4b0d      	ldr	r3, [pc, #52]	; (f74 <_tcc_interrupt_handler+0x40>)
     f3e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     f40:	683b      	ldr	r3, [r7, #0]
     f42:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f46:	401e      	ands	r6, r3
     f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f4a:	401e      	ands	r6, r3
     f4c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     f4e:	4b0a      	ldr	r3, [pc, #40]	; (f78 <_tcc_interrupt_handler+0x44>)
     f50:	4698      	mov	r8, r3
     f52:	4643      	mov	r3, r8
     f54:	58e5      	ldr	r5, [r4, r3]
     f56:	422e      	tst	r6, r5
     f58:	d005      	beq.n	f66 <_tcc_interrupt_handler+0x32>
     f5a:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     f5c:	685b      	ldr	r3, [r3, #4]
     f5e:	1c38      	adds	r0, r7, #0
     f60:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     f62:	683b      	ldr	r3, [r7, #0]
     f64:	62dd      	str	r5, [r3, #44]	; 0x2c
     f66:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     f68:	2c30      	cmp	r4, #48	; 0x30
     f6a:	d1f2      	bne.n	f52 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     f6c:	bc04      	pop	{r2}
     f6e:	4690      	mov	r8, r2
     f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	20000b2c 	.word	0x20000b2c
     f78:	000050b4 	.word	0x000050b4

00000f7c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     f7c:	b508      	push	{r3, lr}
     f7e:	2000      	movs	r0, #0
     f80:	4b01      	ldr	r3, [pc, #4]	; (f88 <TCC0_Handler+0xc>)
     f82:	4798      	blx	r3
     f84:	bd08      	pop	{r3, pc}
     f86:	46c0      	nop			; (mov r8, r8)
     f88:	00000f35 	.word	0x00000f35

00000f8c <TCC1_Handler>:
     f8c:	b508      	push	{r3, lr}
     f8e:	2001      	movs	r0, #1
     f90:	4b01      	ldr	r3, [pc, #4]	; (f98 <TCC1_Handler+0xc>)
     f92:	4798      	blx	r3
     f94:	bd08      	pop	{r3, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00000f35 	.word	0x00000f35

00000f9c <TCC2_Handler>:
     f9c:	b508      	push	{r3, lr}
     f9e:	2002      	movs	r0, #2
     fa0:	4b01      	ldr	r3, [pc, #4]	; (fa8 <TCC2_Handler+0xc>)
     fa2:	4798      	blx	r3
     fa4:	bd08      	pop	{r3, pc}
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	00000f35 	.word	0x00000f35

00000fac <events_create_hook>:
extern struct _events_module _events_inst;

enum status_code events_create_hook(struct events_hook *hook, events_interrupt_hook func)
{
	/* Initialize the hook struct members */
	hook->next      = NULL;
     fac:	2300      	movs	r3, #0
     fae:	6083      	str	r3, [r0, #8]
	hook->resource  = NULL;
     fb0:	6003      	str	r3, [r0, #0]
	hook->hook_func = func;
     fb2:	6041      	str	r1, [r0, #4]

	return STATUS_OK;
}
     fb4:	2000      	movs	r0, #0
     fb6:	4770      	bx	lr

00000fb8 <events_add_hook>:
enum status_code events_add_hook(struct events_resource *resource, struct events_hook *hook)
{
	struct events_hook *tmp_hook = NULL;

	/* Associate the hook with the resource */
	hook->resource = resource;
     fb8:	6008      	str	r0, [r1, #0]

	/* Check if this is the first hook in the list */
	if (_events_inst.hook_list == NULL) {
     fba:	4b0a      	ldr	r3, [pc, #40]	; (fe4 <events_add_hook+0x2c>)
     fbc:	691a      	ldr	r2, [r3, #16]
     fbe:	2a00      	cmp	r2, #0
     fc0:	d102      	bne.n	fc8 <events_add_hook+0x10>
		_events_inst.hook_list = hook;
     fc2:	6119      	str	r1, [r3, #16]
     fc4:	e004      	b.n	fd0 <events_add_hook+0x18>
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
			tmp_hook = tmp_hook->next;
     fc6:	1c1a      	adds	r2, r3, #0
		_events_inst.hook_list = hook;
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
     fc8:	6893      	ldr	r3, [r2, #8]
     fca:	2b00      	cmp	r3, #0
     fcc:	d1fb      	bne.n	fc6 <events_add_hook+0xe>
			tmp_hook = tmp_hook->next;
		}

		/* Put the hook into the next free place in the list */
		tmp_hook->next = hook;
     fce:	6091      	str	r1, [r2, #8]
 *
 */
static inline bool system_interrupt_is_enabled(
		const enum system_interrupt_vector vector)
{
	return (bool)((NVIC->ISER[0] >> (uint32_t)vector) & 0x00000001);
     fd0:	4b05      	ldr	r3, [pc, #20]	; (fe8 <events_add_hook+0x30>)
     fd2:	681b      	ldr	r3, [r3, #0]
	}

	/* Check if interrupts from the EVSYS module is enabled in the interrupt controller */
	if (!system_interrupt_is_enabled(SYSTEM_INTERRUPT_MODULE_EVSYS)) {
     fd4:	05db      	lsls	r3, r3, #23
     fd6:	d403      	bmi.n	fe0 <events_add_hook+0x28>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     fd8:	2280      	movs	r2, #128	; 0x80
     fda:	0052      	lsls	r2, r2, #1
     fdc:	4b02      	ldr	r3, [pc, #8]	; (fe8 <events_add_hook+0x30>)
     fde:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EVSYS);
	}

	return STATUS_OK;
}
     fe0:	2000      	movs	r0, #0
     fe2:	4770      	bx	lr
     fe4:	20000000 	.word	0x20000000
     fe8:	e000e100 	.word	0xe000e100

00000fec <events_enable_interrupt_source>:

	return STATUS_OK;
}

enum status_code events_enable_interrupt_source(struct events_resource *resource, enum events_interrupt_source source)
{
     fec:	b508      	push	{r3, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
     fee:	2901      	cmp	r1, #1
     ff0:	d108      	bne.n	1004 <events_enable_interrupt_source+0x18>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     ff2:	7800      	ldrb	r0, [r0, #0]
     ff4:	310f      	adds	r1, #15
     ff6:	4b09      	ldr	r3, [pc, #36]	; (101c <events_enable_interrupt_source+0x30>)
     ff8:	4798      	blx	r3
     ffa:	2384      	movs	r3, #132	; 0x84
     ffc:	05db      	lsls	r3, r3, #23
     ffe:	6158      	str	r0, [r3, #20]
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1000:	2300      	movs	r3, #0
    1002:	e009      	b.n	1018 <events_enable_interrupt_source+0x2c>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
    1004:	2317      	movs	r3, #23
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
    1006:	2900      	cmp	r1, #0
    1008:	d106      	bne.n	1018 <events_enable_interrupt_source+0x2c>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
    100a:	7800      	ldrb	r0, [r0, #0]
    100c:	4b03      	ldr	r3, [pc, #12]	; (101c <events_enable_interrupt_source+0x30>)
    100e:	4798      	blx	r3
    1010:	2384      	movs	r3, #132	; 0x84
    1012:	05db      	lsls	r3, r3, #23
    1014:	6158      	str	r0, [r3, #20]
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1016:	2300      	movs	r3, #0
}
    1018:	1c18      	adds	r0, r3, #0
    101a:	bd08      	pop	{r3, pc}
    101c:	000010c5 	.word	0x000010c5

00001020 <events_is_interrupt_set>:
	return STATUS_OK;
}


bool events_is_interrupt_set(struct events_resource *resource, enum events_interrupt_source source)
{
    1020:	b508      	push	{r3, lr}
    1022:	1c03      	adds	r3, r0, #0
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
    1024:	2901      	cmp	r1, #1
    1026:	d104      	bne.n	1032 <events_is_interrupt_set+0x12>
		bitpos = _events_find_bit_position(resource->channel,
    1028:	7800      	ldrb	r0, [r0, #0]
    102a:	310f      	adds	r1, #15
    102c:	4b07      	ldr	r3, [pc, #28]	; (104c <events_is_interrupt_set+0x2c>)
    102e:	4798      	blx	r3
    1030:	e005      	b.n	103e <events_is_interrupt_set+0x1e>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
    1032:	2000      	movs	r0, #0
	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
    1034:	2900      	cmp	r1, #0
    1036:	d108      	bne.n	104a <events_is_interrupt_set+0x2a>
		bitpos = _events_find_bit_position(resource->channel,
    1038:	7818      	ldrb	r0, [r3, #0]
    103a:	4b04      	ldr	r3, [pc, #16]	; (104c <events_is_interrupt_set+0x2c>)
    103c:	4798      	blx	r3
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
	}

	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
    103e:	4b04      	ldr	r3, [pc, #16]	; (1050 <events_is_interrupt_set+0x30>)
    1040:	689b      	ldr	r3, [r3, #8]
    1042:	4018      	ands	r0, r3
    1044:	1e43      	subs	r3, r0, #1
    1046:	4198      	sbcs	r0, r3
    1048:	b2c0      	uxtb	r0, r0
}
    104a:	bd08      	pop	{r3, pc}
    104c:	000010c5 	.word	0x000010c5
    1050:	20000000 	.word	0x20000000

00001054 <events_ack_interrupt>:

enum status_code events_ack_interrupt(struct events_resource *resource, enum events_interrupt_source source)
{
    1054:	b508      	push	{r3, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
    1056:	2901      	cmp	r1, #1
    1058:	d104      	bne.n	1064 <events_ack_interrupt+0x10>
		bitpos = _events_find_bit_position(resource->channel,
    105a:	7800      	ldrb	r0, [r0, #0]
    105c:	310f      	adds	r1, #15
    105e:	4b08      	ldr	r3, [pc, #32]	; (1080 <events_ack_interrupt+0x2c>)
    1060:	4798      	blx	r3
    1062:	e005      	b.n	1070 <events_ack_interrupt+0x1c>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
    1064:	2317      	movs	r3, #23
	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
    1066:	2900      	cmp	r1, #0
    1068:	d107      	bne.n	107a <events_ack_interrupt+0x26>
		bitpos = _events_find_bit_position(resource->channel,
    106a:	7800      	ldrb	r0, [r0, #0]
    106c:	4b04      	ldr	r3, [pc, #16]	; (1080 <events_ack_interrupt+0x2c>)
    106e:	4798      	blx	r3
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	_events_inst.interrupt_flag_ack_buffer |= bitpos;
    1070:	4a04      	ldr	r2, [pc, #16]	; (1084 <events_ack_interrupt+0x30>)
    1072:	68d3      	ldr	r3, [r2, #12]
    1074:	4318      	orrs	r0, r3
    1076:	60d0      	str	r0, [r2, #12]

	return STATUS_OK;
    1078:	2300      	movs	r3, #0
}
    107a:	1c18      	adds	r0, r3, #0
    107c:	bd08      	pop	{r3, pc}
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	000010c5 	.word	0x000010c5
    1084:	20000000 	.word	0x20000000

00001088 <EVSYS_Handler>:

void EVSYS_Handler(void)
{
    1088:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
    108a:	4b0c      	ldr	r3, [pc, #48]	; (10bc <EVSYS_Handler+0x34>)
    108c:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    108e:	2184      	movs	r1, #132	; 0x84
    1090:	05c9      	lsls	r1, r1, #23
    1092:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
    1094:	6898      	ldr	r0, [r3, #8]
    1096:	4302      	orrs	r2, r0
    1098:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    109a:	4b09      	ldr	r3, [pc, #36]	; (10c0 <EVSYS_Handler+0x38>)
    109c:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    109e:	2c00      	cmp	r4, #0
    10a0:	d005      	beq.n	10ae <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
    10a2:	6820      	ldr	r0, [r4, #0]
    10a4:	6863      	ldr	r3, [r4, #4]
    10a6:	4798      	blx	r3
		current_hook = current_hook->next;
    10a8:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
    10aa:	2c00      	cmp	r4, #0
    10ac:	d1f9      	bne.n	10a2 <EVSYS_Handler+0x1a>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    10ae:	4b03      	ldr	r3, [pc, #12]	; (10bc <EVSYS_Handler+0x34>)
    10b0:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
    10b2:	689a      	ldr	r2, [r3, #8]
    10b4:	438a      	bics	r2, r1
    10b6:	609a      	str	r2, [r3, #8]
}
    10b8:	bd10      	pop	{r4, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	20000000 	.word	0x20000000
    10c0:	0fff0fff 	.word	0x0fff0fff

000010c4 <_events_find_bit_position>:
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	pos = 0x01UL << (start_offset + channel);
    10c4:	1808      	adds	r0, r1, r0
    10c6:	2301      	movs	r3, #1
    10c8:	4083      	lsls	r3, r0
    10ca:	1c18      	adds	r0, r3, #0

	return pos;
}
    10cc:	4770      	bx	lr
    10ce:	46c0      	nop			; (mov r8, r8)

000010d0 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    10d0:	4906      	ldr	r1, [pc, #24]	; (10ec <_system_events_init+0x1c>)
    10d2:	69cb      	ldr	r3, [r1, #28]
    10d4:	2201      	movs	r2, #1
    10d6:	4313      	orrs	r3, r2
    10d8:	61cb      	str	r3, [r1, #28]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
    10da:	2384      	movs	r3, #132	; 0x84
    10dc:	05db      	lsls	r3, r3, #23
    10de:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
    10e0:	1c19      	adds	r1, r3, #0
    10e2:	780b      	ldrb	r3, [r1, #0]
    10e4:	4213      	tst	r3, r2
    10e6:	d1fc      	bne.n	10e2 <_system_events_init+0x12>
	}
}
    10e8:	4770      	bx	lr
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	40000800 	.word	0x40000800

000010f0 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
    10f0:	2301      	movs	r3, #1
    10f2:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
    10f4:	2300      	movs	r3, #0
    10f6:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
    10f8:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
    10fa:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
    10fc:	7103      	strb	r3, [r0, #4]
	config->on_demand    = false;
    10fe:	7143      	strb	r3, [r0, #5]
}
    1100:	4770      	bx	lr
    1102:	46c0      	nop			; (mov r8, r8)

00001104 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
    1104:	b570      	push	{r4, r5, r6, lr}
    1106:	b082      	sub	sp, #8
    1108:	1c06      	adds	r6, r0, #0
    110a:	1c0d      	adds	r5, r1, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    110c:	4b28      	ldr	r3, [pc, #160]	; (11b0 <events_allocate+0xac>)
    110e:	4798      	blx	r3
	uint32_t tmp;
	bool allocated = false;

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;
    1110:	4b28      	ldr	r3, [pc, #160]	; (11b4 <events_allocate+0xb0>)
    1112:	681b      	ldr	r3, [r3, #0]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {

		if(!(tmp & 0x00000001)) {
    1114:	07da      	lsls	r2, r3, #31
    1116:	d444      	bmi.n	11a2 <events_allocate+0x9e>
    1118:	e002      	b.n	1120 <events_allocate+0x1c>
    111a:	421a      	tst	r2, r3
    111c:	d110      	bne.n	1140 <events_allocate+0x3c>
    111e:	e000      	b.n	1122 <events_allocate+0x1e>

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    1120:	2400      	movs	r4, #0

		if(!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
    1122:	4b24      	ldr	r3, [pc, #144]	; (11b4 <events_allocate+0xb0>)
    1124:	6819      	ldr	r1, [r3, #0]
    1126:	2201      	movs	r2, #1
    1128:	40a2      	lsls	r2, r4
    112a:	430a      	orrs	r2, r1
    112c:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
    112e:	791a      	ldrb	r2, [r3, #4]
    1130:	3a01      	subs	r2, #1
    1132:	711a      	strb	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1134:	4b20      	ldr	r3, [pc, #128]	; (11b8 <events_allocate+0xb4>)
    1136:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
    1138:	2014      	movs	r0, #20

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
    113a:	2cff      	cmp	r4, #255	; 0xff
    113c:	d106      	bne.n	114c <events_allocate+0x48>
    113e:	e034      	b.n	11aa <events_allocate+0xa6>

			break;

		}

		tmp = tmp >> 1;
    1140:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    1142:	3401      	adds	r4, #1
    1144:	b2e4      	uxtb	r4, r4
    1146:	2c0c      	cmp	r4, #12
    1148:	d1e7      	bne.n	111a <events_allocate+0x16>
    114a:	e026      	b.n	119a <events_allocate+0x96>

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
	}

	resource->channel = new_channel;
    114c:	7034      	strb	r4, [r6, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
    114e:	786b      	ldrb	r3, [r5, #1]
    1150:	2b02      	cmp	r3, #2
    1152:	d00a      	beq.n	116a <events_allocate+0x66>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator =
    1154:	a901      	add	r1, sp, #4
    1156:	78eb      	ldrb	r3, [r5, #3]
    1158:	700b      	strb	r3, [r1, #0]
				(enum gclk_generator)config->clock_source;
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    115a:	3406      	adds	r4, #6
    115c:	b2e4      	uxtb	r4, r4
    115e:	1c20      	adds	r0, r4, #0
    1160:	4b16      	ldr	r3, [pc, #88]	; (11bc <events_allocate+0xb8>)
    1162:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
    1164:	1c20      	adds	r0, r4, #0
    1166:	4b16      	ldr	r3, [pc, #88]	; (11c0 <events_allocate+0xbc>)
    1168:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
    116a:	7928      	ldrb	r0, [r5, #4]
    116c:	0380      	lsls	r0, r0, #14
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
    116e:	78aa      	ldrb	r2, [r5, #2]
    1170:	217f      	movs	r1, #127	; 0x7f
    1172:	4011      	ands	r1, r2
    1174:	4301      	orrs	r1, r0
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
    1176:	796a      	ldrb	r2, [r5, #5]
    1178:	03d2      	lsls	r2, r2, #15
    117a:	4311      	orrs	r1, r2
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
			EVSYS_CHANNEL_PATH(config->path)                                 |
    117c:	786b      	ldrb	r3, [r5, #1]
    117e:	021b      	lsls	r3, r3, #8
    1180:	22c0      	movs	r2, #192	; 0xc0
    1182:	0092      	lsls	r2, r2, #2
    1184:	4013      	ands	r3, r2
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
    1186:	4319      	orrs	r1, r3
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    1188:	782b      	ldrb	r3, [r5, #0]
    118a:	029b      	lsls	r3, r3, #10
    118c:	22c0      	movs	r2, #192	; 0xc0
    118e:	0112      	lsls	r2, r2, #4
    1190:	4013      	ands	r3, r2

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
    1192:	430b      	orrs	r3, r1
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
    1194:	6073      	str	r3, [r6, #4]
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
    1196:	2000      	movs	r0, #0
    1198:	e007      	b.n	11aa <events_allocate+0xa6>
    119a:	4b07      	ldr	r3, [pc, #28]	; (11b8 <events_allocate+0xb4>)
    119c:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
    119e:	2014      	movs	r0, #20
    11a0:	e003      	b.n	11aa <events_allocate+0xa6>

			break;

		}

		tmp = tmp >> 1;
    11a2:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    11a4:	2401      	movs	r4, #1

		if(!(tmp & 0x00000001)) {
    11a6:	2201      	movs	r2, #1
    11a8:	e7b7      	b.n	111a <events_allocate+0x16>
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
}
    11aa:	b002      	add	sp, #8
    11ac:	bd70      	pop	{r4, r5, r6, pc}
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	00001201 	.word	0x00001201
    11b4:	20000000 	.word	0x20000000
    11b8:	00001241 	.word	0x00001241
    11bc:	000028d1 	.word	0x000028d1
    11c0:	00002869 	.word	0x00002869

000011c4 <events_is_busy>:

bool events_is_busy(struct events_resource *resource)
{
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
    11c4:	2384      	movs	r3, #132	; 0x84
    11c6:	05db      	lsls	r3, r3, #23
    11c8:	68d9      	ldr	r1, [r3, #12]
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	pos = 0x01UL << (start_offset + channel);
    11ca:	7802      	ldrb	r2, [r0, #0]
    11cc:	3210      	adds	r2, #16
    11ce:	2301      	movs	r3, #1
    11d0:	4093      	lsls	r3, r2
    11d2:	1c18      	adds	r0, r3, #0

bool events_is_busy(struct events_resource *resource)
{
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
    11d4:	4008      	ands	r0, r1
    11d6:	1e43      	subs	r3, r0, #1
    11d8:	4198      	sbcs	r0, r3
    11da:	b2c0      	uxtb	r0, r0
			_EVENTS_START_OFFSET_BUSY_BITS));
}
    11dc:	4770      	bx	lr
    11de:	46c0      	nop			; (mov r8, r8)

000011e0 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER[user_id].reg = EVSYS_USER_CHANNEL(resource->channel + 1);
    11e0:	7803      	ldrb	r3, [r0, #0]
    11e2:	3301      	adds	r3, #1
    11e4:	221f      	movs	r2, #31
    11e6:	4013      	ands	r3, r2
    11e8:	2284      	movs	r2, #132	; 0x84
    11ea:	05d2      	lsls	r2, r2, #23
    11ec:	3120      	adds	r1, #32
    11ee:	0089      	lsls	r1, r1, #2
    11f0:	508b      	str	r3, [r1, r2]

	/* Then configure the channel */
	EVSYS->CHANNEL[resource->channel].reg = resource->channel_reg;
    11f2:	7803      	ldrb	r3, [r0, #0]
    11f4:	6841      	ldr	r1, [r0, #4]
    11f6:	3308      	adds	r3, #8
    11f8:	009b      	lsls	r3, r3, #2
    11fa:	5099      	str	r1, [r3, r2]

	return STATUS_OK;
}
    11fc:	2000      	movs	r0, #0
    11fe:	4770      	bx	lr

00001200 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1200:	4b0c      	ldr	r3, [pc, #48]	; (1234 <cpu_irq_enter_critical+0x34>)
    1202:	681b      	ldr	r3, [r3, #0]
    1204:	2b00      	cmp	r3, #0
    1206:	d110      	bne.n	122a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1208:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    120c:	2b00      	cmp	r3, #0
    120e:	d109      	bne.n	1224 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1210:	b672      	cpsid	i
    1212:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1216:	2200      	movs	r2, #0
    1218:	4b07      	ldr	r3, [pc, #28]	; (1238 <cpu_irq_enter_critical+0x38>)
    121a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    121c:	3201      	adds	r2, #1
    121e:	4b07      	ldr	r3, [pc, #28]	; (123c <cpu_irq_enter_critical+0x3c>)
    1220:	701a      	strb	r2, [r3, #0]
    1222:	e002      	b.n	122a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1224:	2200      	movs	r2, #0
    1226:	4b05      	ldr	r3, [pc, #20]	; (123c <cpu_irq_enter_critical+0x3c>)
    1228:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    122a:	4a02      	ldr	r2, [pc, #8]	; (1234 <cpu_irq_enter_critical+0x34>)
    122c:	6813      	ldr	r3, [r2, #0]
    122e:	3301      	adds	r3, #1
    1230:	6013      	str	r3, [r2, #0]
}
    1232:	4770      	bx	lr
    1234:	20000120 	.word	0x20000120
    1238:	20000014 	.word	0x20000014
    123c:	20000124 	.word	0x20000124

00001240 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1240:	4b08      	ldr	r3, [pc, #32]	; (1264 <cpu_irq_leave_critical+0x24>)
    1242:	681a      	ldr	r2, [r3, #0]
    1244:	3a01      	subs	r2, #1
    1246:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1248:	681b      	ldr	r3, [r3, #0]
    124a:	2b00      	cmp	r3, #0
    124c:	d109      	bne.n	1262 <cpu_irq_leave_critical+0x22>
    124e:	4b06      	ldr	r3, [pc, #24]	; (1268 <cpu_irq_leave_critical+0x28>)
    1250:	781b      	ldrb	r3, [r3, #0]
    1252:	2b00      	cmp	r3, #0
    1254:	d005      	beq.n	1262 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1256:	2201      	movs	r2, #1
    1258:	4b04      	ldr	r3, [pc, #16]	; (126c <cpu_irq_leave_critical+0x2c>)
    125a:	701a      	strb	r2, [r3, #0]
    125c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1260:	b662      	cpsie	i
	}
}
    1262:	4770      	bx	lr
    1264:	20000120 	.word	0x20000120
    1268:	20000124 	.word	0x20000124
    126c:	20000014 	.word	0x20000014

00001270 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1270:	b5f0      	push	{r4, r5, r6, r7, lr}
    1272:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1274:	ac01      	add	r4, sp, #4
    1276:	2501      	movs	r5, #1
    1278:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    127a:	2700      	movs	r7, #0
    127c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    127e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1280:	200f      	movs	r0, #15
    1282:	1c21      	adds	r1, r4, #0
    1284:	4e06      	ldr	r6, [pc, #24]	; (12a0 <system_board_init+0x30>)
    1286:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1288:	2280      	movs	r2, #128	; 0x80
    128a:	0212      	lsls	r2, r2, #8
    128c:	2382      	movs	r3, #130	; 0x82
    128e:	05db      	lsls	r3, r3, #23
    1290:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1292:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1294:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1296:	201c      	movs	r0, #28
    1298:	1c21      	adds	r1, r4, #0
    129a:	47b0      	blx	r6
}
    129c:	b003      	add	sp, #12
    129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12a0:	000017c9 	.word	0x000017c9

000012a4 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
    12a4:	6803      	ldr	r3, [r0, #0]
    12a6:	4a0a      	ldr	r2, [pc, #40]	; (12d0 <_can_enable_peripheral_clock+0x2c>)
    12a8:	4293      	cmp	r3, r2
    12aa:	d106      	bne.n	12ba <_can_enable_peripheral_clock+0x16>
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
    12ac:	4a09      	ldr	r2, [pc, #36]	; (12d4 <_can_enable_peripheral_clock+0x30>)
    12ae:	6913      	ldr	r3, [r2, #16]
    12b0:	2180      	movs	r1, #128	; 0x80
    12b2:	0049      	lsls	r1, r1, #1
    12b4:	430b      	orrs	r3, r1
    12b6:	6113      	str	r3, [r2, #16]
    12b8:	e008      	b.n	12cc <_can_enable_peripheral_clock+0x28>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
    12ba:	4a07      	ldr	r2, [pc, #28]	; (12d8 <_can_enable_peripheral_clock+0x34>)
    12bc:	4293      	cmp	r3, r2
    12be:	d105      	bne.n	12cc <_can_enable_peripheral_clock+0x28>
    12c0:	4a04      	ldr	r2, [pc, #16]	; (12d4 <_can_enable_peripheral_clock+0x30>)
    12c2:	6913      	ldr	r3, [r2, #16]
    12c4:	2180      	movs	r1, #128	; 0x80
    12c6:	0089      	lsls	r1, r1, #2
    12c8:	430b      	orrs	r3, r1
    12ca:	6113      	str	r3, [r2, #16]
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
    12cc:	4770      	bx	lr
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	42001c00 	.word	0x42001c00
    12d4:	40000800 	.word	0x40000800
    12d8:	42002000 	.word	0x42002000

000012dc <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
    12dc:	b538      	push	{r3, r4, r5, lr}
    12de:	1c0c      	adds	r4, r1, #0
    12e0:	1c15      	adds	r5, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    12e2:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
    12e4:	4ba2      	ldr	r3, [pc, #648]	; (1570 <can_init+0x294>)
    12e6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    12e8:	4ba2      	ldr	r3, [pc, #648]	; (1574 <can_init+0x298>)
    12ea:	2200      	movs	r2, #0
    12ec:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    12ee:	782a      	ldrb	r2, [r5, #0]
    12f0:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
    12f2:	4ba1      	ldr	r3, [pc, #644]	; (1578 <can_init+0x29c>)
    12f4:	429c      	cmp	r4, r3
    12f6:	d13d      	bne.n	1374 <can_init+0x98>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
    12f8:	201a      	movs	r0, #26
    12fa:	499e      	ldr	r1, [pc, #632]	; (1574 <can_init+0x298>)
    12fc:	4b9f      	ldr	r3, [pc, #636]	; (157c <can_init+0x2a0>)
    12fe:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    1300:	201a      	movs	r0, #26
    1302:	4b9f      	ldr	r3, [pc, #636]	; (1580 <can_init+0x2a4>)
    1304:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1306:	4b9c      	ldr	r3, [pc, #624]	; (1578 <can_init+0x29c>)
    1308:	6999      	ldr	r1, [r3, #24]
    130a:	2202      	movs	r2, #2
    130c:	430a      	orrs	r2, r1
    130e:	619a      	str	r2, [r3, #24]
static struct can_extended_message_filter_element can1_rx_extended_filter[CONF_CAN1_RX_EXTENDED_ID_FILTER_NUM];

static void _can_message_memory_init(Can *hw)
{
	if (hw == CAN0) {
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    1310:	4a9c      	ldr	r2, [pc, #624]	; (1584 <can_init+0x2a8>)
    1312:	0412      	lsls	r2, r2, #16
    1314:	0c12      	lsrs	r2, r2, #16
    1316:	2180      	movs	r1, #128	; 0x80
    1318:	0389      	lsls	r1, r1, #14
    131a:	430a      	orrs	r2, r1
    131c:	2184      	movs	r1, #132	; 0x84
    131e:	505a      	str	r2, [r3, r1]
				CAN_SIDFC_LSS(CONF_CAN0_RX_STANDARD_ID_FILTER_NUM);
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    1320:	4a99      	ldr	r2, [pc, #612]	; (1588 <can_init+0x2ac>)
    1322:	0412      	lsls	r2, r2, #16
    1324:	0c12      	lsrs	r2, r2, #16
    1326:	2080      	movs	r0, #128	; 0x80
    1328:	0340      	lsls	r0, r0, #13
    132a:	4302      	orrs	r2, r0
    132c:	3104      	adds	r1, #4
    132e:	505a      	str	r2, [r3, r1]
				CAN_XIDFC_LSE(CONF_CAN0_RX_EXTENDED_ID_FILTER_NUM);
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    1330:	4996      	ldr	r1, [pc, #600]	; (158c <can_init+0x2b0>)
    1332:	0409      	lsls	r1, r1, #16
    1334:	0c09      	lsrs	r1, r1, #16
    1336:	4301      	orrs	r1, r0
    1338:	22a0      	movs	r2, #160	; 0xa0
    133a:	5099      	str	r1, [r3, r2]
				CAN_RXF0C_F0S(CONF_CAN0_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    133c:	4994      	ldr	r1, [pc, #592]	; (1590 <can_init+0x2b4>)
    133e:	0409      	lsls	r1, r1, #16
    1340:	0c09      	lsrs	r1, r1, #16
    1342:	4301      	orrs	r1, r0
    1344:	3210      	adds	r2, #16
    1346:	5099      	str	r1, [r3, r2]
				CAN_RXF1C_F1S(CONF_CAN0_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer) |
    1348:	4a92      	ldr	r2, [pc, #584]	; (1594 <can_init+0x2b8>)
    134a:	0412      	lsls	r2, r2, #16
    134c:	0c12      	lsrs	r2, r2, #16
    134e:	4302      	orrs	r2, r0
    1350:	21ac      	movs	r1, #172	; 0xac
    1352:	505a      	str	r2, [r3, r1]
				CAN_RXF0C_F0S(CONF_CAN0_RX_BUFFER_NUM);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    1354:	4a90      	ldr	r2, [pc, #576]	; (1598 <can_init+0x2bc>)
    1356:	0412      	lsls	r2, r2, #16
    1358:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    135a:	4990      	ldr	r1, [pc, #576]	; (159c <can_init+0x2c0>)
    135c:	430a      	orrs	r2, r1
				CAN_RXF0C_F0S(CONF_CAN0_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
				CAN_RXF1C_F1S(CONF_CAN0_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer) |
				CAN_RXF0C_F0S(CONF_CAN0_RX_BUFFER_NUM);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    135e:	21c0      	movs	r1, #192	; 0xc0
    1360:	505a      	str	r2, [r3, r1]
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN0_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    1362:	4a8f      	ldr	r2, [pc, #572]	; (15a0 <can_init+0x2c4>)
    1364:	0412      	lsls	r2, r2, #16
    1366:	0c12      	lsrs	r2, r2, #16
    1368:	2180      	movs	r1, #128	; 0x80
    136a:	0309      	lsls	r1, r1, #12
    136c:	430a      	orrs	r2, r1
    136e:	21f0      	movs	r1, #240	; 0xf0
    1370:	505a      	str	r2, [r3, r1]
    1372:	e040      	b.n	13f6 <can_init+0x11a>
	gclk_chan_conf.source_generator = config->clock_source;

	if (hw == CAN0) {
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
    1374:	4b8b      	ldr	r3, [pc, #556]	; (15a4 <can_init+0x2c8>)
    1376:	429c      	cmp	r4, r3
    1378:	d000      	beq.n	137c <can_init+0xa0>
    137a:	e0f3      	b.n	1564 <can_init+0x288>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    137c:	201b      	movs	r0, #27
    137e:	497d      	ldr	r1, [pc, #500]	; (1574 <can_init+0x298>)
    1380:	4b7e      	ldr	r3, [pc, #504]	; (157c <can_init+0x2a0>)
    1382:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    1384:	201b      	movs	r0, #27
    1386:	4b7e      	ldr	r3, [pc, #504]	; (1580 <can_init+0x2a4>)
    1388:	4798      	blx	r3
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    138a:	4b86      	ldr	r3, [pc, #536]	; (15a4 <can_init+0x2c8>)
    138c:	6999      	ldr	r1, [r3, #24]
    138e:	2202      	movs	r2, #2
    1390:	430a      	orrs	r2, r1
    1392:	619a      	str	r2, [r3, #24]
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN0_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
				CAN_TXEFC_EFS(CONF_CAN0_TX_EVENT_FIFO);
	} else if (hw == CAN1) {
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    1394:	4a84      	ldr	r2, [pc, #528]	; (15a8 <can_init+0x2cc>)
    1396:	0412      	lsls	r2, r2, #16
    1398:	0c12      	lsrs	r2, r2, #16
    139a:	2180      	movs	r1, #128	; 0x80
    139c:	0389      	lsls	r1, r1, #14
    139e:	430a      	orrs	r2, r1
    13a0:	2184      	movs	r1, #132	; 0x84
    13a2:	505a      	str	r2, [r3, r1]
				CAN_SIDFC_LSS(CONF_CAN1_RX_STANDARD_ID_FILTER_NUM);
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    13a4:	4a81      	ldr	r2, [pc, #516]	; (15ac <can_init+0x2d0>)
    13a6:	0412      	lsls	r2, r2, #16
    13a8:	0c12      	lsrs	r2, r2, #16
    13aa:	2080      	movs	r0, #128	; 0x80
    13ac:	0340      	lsls	r0, r0, #13
    13ae:	4302      	orrs	r2, r0
    13b0:	3104      	adds	r1, #4
    13b2:	505a      	str	r2, [r3, r1]
				CAN_XIDFC_LSE(CONF_CAN1_RX_EXTENDED_ID_FILTER_NUM);
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    13b4:	497e      	ldr	r1, [pc, #504]	; (15b0 <can_init+0x2d4>)
    13b6:	0409      	lsls	r1, r1, #16
    13b8:	0c09      	lsrs	r1, r1, #16
    13ba:	4301      	orrs	r1, r0
    13bc:	22a0      	movs	r2, #160	; 0xa0
    13be:	5099      	str	r1, [r3, r2]
				CAN_RXF0C_F0S(CONF_CAN1_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    13c0:	497c      	ldr	r1, [pc, #496]	; (15b4 <can_init+0x2d8>)
    13c2:	0409      	lsls	r1, r1, #16
    13c4:	0c09      	lsrs	r1, r1, #16
    13c6:	4301      	orrs	r1, r0
    13c8:	3210      	adds	r2, #16
    13ca:	5099      	str	r1, [r3, r2]
				CAN_RXF1C_F1S(CONF_CAN1_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer) |
    13cc:	4a7a      	ldr	r2, [pc, #488]	; (15b8 <can_init+0x2dc>)
    13ce:	0412      	lsls	r2, r2, #16
    13d0:	0c12      	lsrs	r2, r2, #16
    13d2:	4302      	orrs	r2, r0
    13d4:	21ac      	movs	r1, #172	; 0xac
    13d6:	505a      	str	r2, [r3, r1]
				CAN_RXF0C_F0S(CONF_CAN1_RX_BUFFER_NUM);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    13d8:	4a78      	ldr	r2, [pc, #480]	; (15bc <can_init+0x2e0>)
    13da:	0412      	lsls	r2, r2, #16
    13dc:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    13de:	496f      	ldr	r1, [pc, #444]	; (159c <can_init+0x2c0>)
    13e0:	430a      	orrs	r2, r1
				CAN_RXF0C_F0S(CONF_CAN1_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
				CAN_RXF1C_F1S(CONF_CAN1_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer) |
				CAN_RXF0C_F0S(CONF_CAN1_RX_BUFFER_NUM);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    13e2:	21c0      	movs	r1, #192	; 0xc0
    13e4:	505a      	str	r2, [r3, r1]
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN1_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    13e6:	4a76      	ldr	r2, [pc, #472]	; (15c0 <can_init+0x2e4>)
    13e8:	0412      	lsls	r2, r2, #16
    13ea:	0c12      	lsrs	r2, r2, #16
    13ec:	2180      	movs	r1, #128	; 0x80
    13ee:	0309      	lsls	r1, r1, #12
    13f0:	430a      	orrs	r2, r1
    13f2:	21f0      	movs	r1, #240	; 0xf0
    13f4:	505a      	str	r2, [r3, r1]
	 * The corresponding setting value in register is 0/1//2/3/4/5/6/7.
	 * To simplify the calculation, seperate to two group 8/12/16/20/24 which
	 * increased with 4 and 32/48/64 which increased with 16.
	 */
	if (CONF_CAN_ELEMENT_DATA_SIZE <= 24) {
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
    13f6:	2300      	movs	r3, #0
    13f8:	22bc      	movs	r2, #188	; 0xbc
    13fa:	50a3      	str	r3, [r4, r2]
				CAN_RXESC_F0DS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
				CAN_RXESC_F1DS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
    13fc:	320c      	adds	r2, #12
    13fe:	50a3      	str	r3, [r4, r2]
}

static void _can_set_configuration(Can *hw, struct can_config *config)
{
	/* Timing setting. */
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    1400:	4b70      	ldr	r3, [pc, #448]	; (15c4 <can_init+0x2e8>)
    1402:	61e3      	str	r3, [r4, #28]
			CAN_NBTP_NSJW(CONF_CAN_NBTP_NSJW_VALUE) |
			CAN_NBTP_NTSEG1(CONF_CAN_NBTP_NTSEG1_VALUE) |
			CAN_NBTP_NTSEG2(CONF_CAN_NBTP_NTSEG2_VALUE);
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    1404:	4b70      	ldr	r3, [pc, #448]	; (15c8 <can_init+0x2ec>)
    1406:	60e3      	str	r3, [r4, #12]
			CAN_DBTP_DSJW(CONF_CAN_DBTP_DSJW_VALUE) |
			CAN_DBTP_DTSEG1(CONF_CAN_DBTP_DTSEG1_VALUE) |
			CAN_DBTP_DTSEG2(CONF_CAN_DBTP_DTSEG2_VALUE);

	if (config->run_in_standby) {
    1408:	786b      	ldrb	r3, [r5, #1]
    140a:	2b00      	cmp	r3, #0
    140c:	d003      	beq.n	1416 <can_init+0x13a>
		hw->MRCFG.reg |= 0x01<<6;
    140e:	68a2      	ldr	r2, [r4, #8]
    1410:	2340      	movs	r3, #64	; 0x40
    1412:	4313      	orrs	r3, r2
    1414:	60a3      	str	r3, [r4, #8]
	}

	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    1416:	6963      	ldr	r3, [r4, #20]
    1418:	78aa      	ldrb	r2, [r5, #2]
    141a:	4313      	orrs	r3, r2
    141c:	6163      	str	r3, [r4, #20]

	if (config->transmit_pause) {
    141e:	78eb      	ldrb	r3, [r5, #3]
    1420:	2b00      	cmp	r3, #0
    1422:	d004      	beq.n	142e <can_init+0x152>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    1424:	69a3      	ldr	r3, [r4, #24]
    1426:	2280      	movs	r2, #128	; 0x80
    1428:	01d2      	lsls	r2, r2, #7
    142a:	4313      	orrs	r3, r2
    142c:	61a3      	str	r3, [r4, #24]
	}

	if (config->edge_filtering) {
    142e:	792b      	ldrb	r3, [r5, #4]
    1430:	2b00      	cmp	r3, #0
    1432:	d004      	beq.n	143e <can_init+0x162>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    1434:	69a3      	ldr	r3, [r4, #24]
    1436:	2280      	movs	r2, #128	; 0x80
    1438:	0192      	lsls	r2, r2, #6
    143a:	4313      	orrs	r3, r2
    143c:	61a3      	str	r3, [r4, #24]
	}

	if (config->protocol_exception_handling) {
    143e:	796b      	ldrb	r3, [r5, #5]
    1440:	2b00      	cmp	r3, #0
    1442:	d004      	beq.n	144e <can_init+0x172>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    1444:	69a3      	ldr	r3, [r4, #24]
    1446:	2280      	movs	r2, #128	; 0x80
    1448:	0152      	lsls	r2, r2, #5
    144a:	4313      	orrs	r3, r2
    144c:	61a3      	str	r3, [r4, #24]
	}

	if (!config->automatic_retransmission) {
    144e:	79ab      	ldrb	r3, [r5, #6]
    1450:	2b00      	cmp	r3, #0
    1452:	d103      	bne.n	145c <can_init+0x180>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    1454:	69a2      	ldr	r2, [r4, #24]
    1456:	3340      	adds	r3, #64	; 0x40
    1458:	4313      	orrs	r3, r2
    145a:	61a3      	str	r3, [r4, #24]
	}

	if (config->clock_stop_request) {
    145c:	79eb      	ldrb	r3, [r5, #7]
    145e:	2b00      	cmp	r3, #0
    1460:	d003      	beq.n	146a <can_init+0x18e>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    1462:	69a2      	ldr	r2, [r4, #24]
    1464:	2310      	movs	r3, #16
    1466:	4313      	orrs	r3, r2
    1468:	61a3      	str	r3, [r4, #24]
	}

	if (config->clock_stop_acknowledge) {
    146a:	7a2b      	ldrb	r3, [r5, #8]
    146c:	2b00      	cmp	r3, #0
    146e:	d003      	beq.n	1478 <can_init+0x19c>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    1470:	69a2      	ldr	r2, [r4, #24]
    1472:	2308      	movs	r3, #8
    1474:	4313      	orrs	r3, r2
    1476:	61a3      	str	r3, [r4, #24]
	}

	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    1478:	7a6b      	ldrb	r3, [r5, #9]
    147a:	041b      	lsls	r3, r3, #16
    147c:	22f0      	movs	r2, #240	; 0xf0
    147e:	0312      	lsls	r2, r2, #12
    1480:	4013      	ands	r3, r2
    1482:	2201      	movs	r2, #1
    1484:	4313      	orrs	r3, r2
    1486:	6223      	str	r3, [r4, #32]
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
			config->timeout_mode | config->timeout_enable;
    1488:	7b6a      	ldrb	r2, [r5, #13]
	}

	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    148a:	7b2b      	ldrb	r3, [r5, #12]
    148c:	4313      	orrs	r3, r2
    148e:	896a      	ldrh	r2, [r5, #10]
    1490:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
    1492:	4313      	orrs	r3, r2
	}

	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    1494:	62a3      	str	r3, [r4, #40]	; 0x28
			config->timeout_mode | config->timeout_enable;

	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    1496:	7bab      	ldrb	r3, [r5, #14]
    1498:	021b      	lsls	r3, r3, #8
    149a:	22fe      	movs	r2, #254	; 0xfe
    149c:	01d2      	lsls	r2, r2, #7
    149e:	4013      	ands	r3, r2
    14a0:	1c19      	adds	r1, r3, #0
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
    14a2:	7bea      	ldrb	r2, [r5, #15]
    14a4:	237f      	movs	r3, #127	; 0x7f
    14a6:	401a      	ands	r2, r3
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
			config->timeout_mode | config->timeout_enable;

	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    14a8:	1c0b      	adds	r3, r1, #0
    14aa:	4313      	orrs	r3, r2
    14ac:	64a3      	str	r3, [r4, #72]	; 0x48
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);

	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
    14ae:	7c6b      	ldrb	r3, [r5, #17]
    14b0:	009b      	lsls	r3, r3, #2
    14b2:	210c      	movs	r1, #12
    14b4:	4019      	ands	r1, r3
			config->timeout_mode | config->timeout_enable;

	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);

	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    14b6:	7c2a      	ldrb	r2, [r5, #16]
    14b8:	0112      	lsls	r2, r2, #4
    14ba:	2330      	movs	r3, #48	; 0x30
    14bc:	4013      	ands	r3, r2
    14be:	430b      	orrs	r3, r1
    14c0:	2280      	movs	r2, #128	; 0x80
    14c2:	50a3      	str	r3, [r4, r2]
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
	if (config->remote_frames_standard_reject) {
    14c4:	7cab      	ldrb	r3, [r5, #18]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d003      	beq.n	14d2 <can_init+0x1f6>
		hw->GFC.reg |= CAN_GFC_RRFS;
    14ca:	58a1      	ldr	r1, [r4, r2]
    14cc:	2302      	movs	r3, #2
    14ce:	430b      	orrs	r3, r1
    14d0:	50a3      	str	r3, [r4, r2]
	}
	if (config->remote_frames_extended_reject) {
    14d2:	7ceb      	ldrb	r3, [r5, #19]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d004      	beq.n	14e2 <can_init+0x206>
		hw->GFC.reg |= CAN_GFC_RRFE;
    14d8:	2280      	movs	r2, #128	; 0x80
    14da:	58a1      	ldr	r1, [r4, r2]
    14dc:	2301      	movs	r3, #1
    14de:	430b      	orrs	r3, r1
    14e0:	50a3      	str	r3, [r4, r2]
	}

	hw->XIDAM.reg = config->extended_id_mask;
    14e2:	2390      	movs	r3, #144	; 0x90
    14e4:	696a      	ldr	r2, [r5, #20]
    14e6:	50e2      	str	r2, [r4, r3]

	if (config->rx_fifo_0_overwrite) {
    14e8:	7e2b      	ldrb	r3, [r5, #24]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d005      	beq.n	14fa <can_init+0x21e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    14ee:	22a0      	movs	r2, #160	; 0xa0
    14f0:	58a3      	ldr	r3, [r4, r2]
    14f2:	2180      	movs	r1, #128	; 0x80
    14f4:	0609      	lsls	r1, r1, #24
    14f6:	430b      	orrs	r3, r1
    14f8:	50a3      	str	r3, [r4, r2]
	}
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    14fa:	20a0      	movs	r0, #160	; 0xa0
    14fc:	5822      	ldr	r2, [r4, r0]
    14fe:	7e6b      	ldrb	r3, [r5, #25]
    1500:	061b      	lsls	r3, r3, #24
    1502:	21fe      	movs	r1, #254	; 0xfe
    1504:	05c9      	lsls	r1, r1, #23
    1506:	400b      	ands	r3, r1
    1508:	4313      	orrs	r3, r2
    150a:	5023      	str	r3, [r4, r0]

	if (config->rx_fifo_1_overwrite) {
    150c:	7eab      	ldrb	r3, [r5, #26]
    150e:	2b00      	cmp	r3, #0
    1510:	d005      	beq.n	151e <can_init+0x242>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    1512:	22b0      	movs	r2, #176	; 0xb0
    1514:	58a3      	ldr	r3, [r4, r2]
    1516:	2180      	movs	r1, #128	; 0x80
    1518:	0609      	lsls	r1, r1, #24
    151a:	430b      	orrs	r3, r1
    151c:	50a3      	str	r3, [r4, r2]
	}
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    151e:	20b0      	movs	r0, #176	; 0xb0
    1520:	5822      	ldr	r2, [r4, r0]
    1522:	7eeb      	ldrb	r3, [r5, #27]
    1524:	061b      	lsls	r3, r3, #24
    1526:	21fe      	movs	r1, #254	; 0xfe
    1528:	05c9      	lsls	r1, r1, #23
    152a:	400b      	ands	r3, r1
    152c:	4313      	orrs	r3, r2
    152e:	5023      	str	r3, [r4, r0]

	if (config->tx_queue_mode) {
    1530:	7f2b      	ldrb	r3, [r5, #28]
    1532:	2b00      	cmp	r3, #0
    1534:	d005      	beq.n	1542 <can_init+0x266>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    1536:	22c0      	movs	r2, #192	; 0xc0
    1538:	58a3      	ldr	r3, [r4, r2]
    153a:	2180      	movs	r1, #128	; 0x80
    153c:	05c9      	lsls	r1, r1, #23
    153e:	430b      	orrs	r3, r1
    1540:	50a3      	str	r3, [r4, r2]
	}

	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    1542:	20f0      	movs	r0, #240	; 0xf0
    1544:	5822      	ldr	r2, [r4, r0]
    1546:	7f6b      	ldrb	r3, [r5, #29]
    1548:	061b      	lsls	r3, r3, #24
    154a:	21fc      	movs	r1, #252	; 0xfc
    154c:	0589      	lsls	r1, r1, #22
    154e:	400b      	ands	r3, r1
    1550:	4313      	orrs	r3, r2
    1552:	5023      	str	r3, [r4, r0]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    1554:	2303      	movs	r3, #3
    1556:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    1558:	3b04      	subs	r3, #4
    155a:	22e0      	movs	r2, #224	; 0xe0
    155c:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    155e:	3204      	adds	r2, #4
    1560:	50a3      	str	r3, [r4, r2]
    1562:	e004      	b.n	156e <can_init+0x292>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1564:	69a2      	ldr	r2, [r4, #24]
    1566:	2302      	movs	r3, #2
    1568:	4313      	orrs	r3, r2
    156a:	61a3      	str	r3, [r4, #24]
    156c:	e743      	b.n	13f6 <can_init+0x11a>

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
}
    156e:	bd38      	pop	{r3, r4, r5, pc}
    1570:	000012a5 	.word	0x000012a5
    1574:	20000b38 	.word	0x20000b38
    1578:	42001c00 	.word	0x42001c00
    157c:	000028d1 	.word	0x000028d1
    1580:	00002869 	.word	0x00002869
    1584:	200005a8 	.word	0x200005a8
    1588:	200004a8 	.word	0x200004a8
    158c:	200009a8 	.word	0x200009a8
    1590:	20000128 	.word	0x20000128
    1594:	20000828 	.word	0x20000828
    1598:	200006a8 	.word	0x200006a8
    159c:	04040000 	.word	0x04040000
    15a0:	20000968 	.word	0x20000968
    15a4:	42002000 	.word	0x42002000
    15a8:	20000528 	.word	0x20000528
    15ac:	20000428 	.word	0x20000428
    15b0:	20000228 	.word	0x20000228
    15b4:	20000328 	.word	0x20000328
    15b8:	20000728 	.word	0x20000728
    15bc:	20000628 	.word	0x20000628
    15c0:	20000928 	.word	0x20000928
    15c4:	06050a03 	.word	0x06050a03
    15c8:	00050a33 	.word	0x00050a33

000015cc <can_start>:

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    15cc:	6802      	ldr	r2, [r0, #0]
    15ce:	6993      	ldr	r3, [r2, #24]
    15d0:	2101      	movs	r1, #1
    15d2:	438b      	bics	r3, r1
    15d4:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    15d6:	6801      	ldr	r1, [r0, #0]
    15d8:	2201      	movs	r2, #1
    15da:	698b      	ldr	r3, [r1, #24]
    15dc:	421a      	tst	r2, r3
    15de:	d1fc      	bne.n	15da <can_start+0xe>
}
    15e0:	4770      	bx	lr
    15e2:	46c0      	nop			; (mov r8, r8)

000015e4 <can_set_rx_standand_filter>:
}

enum status_code can_set_rx_standand_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
    15e4:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    15e6:	6803      	ldr	r3, [r0, #0]
    15e8:	4809      	ldr	r0, [pc, #36]	; (1610 <can_set_rx_standand_filter+0x2c>)
    15ea:	4283      	cmp	r3, r0
    15ec:	d105      	bne.n	15fa <can_set_rx_standand_filter+0x16>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    15ee:	6809      	ldr	r1, [r1, #0]
    15f0:	0092      	lsls	r2, r2, #2
    15f2:	4b08      	ldr	r3, [pc, #32]	; (1614 <can_set_rx_standand_filter+0x30>)
    15f4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    15f6:	2000      	movs	r0, #0
    15f8:	e008      	b.n	160c <can_set_rx_standand_filter+0x28>
	} else if (module_inst->hw == CAN1) {
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    15fa:	2017      	movs	r0, #23
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    15fc:	4c06      	ldr	r4, [pc, #24]	; (1618 <can_set_rx_standand_filter+0x34>)
    15fe:	42a3      	cmp	r3, r4
    1600:	d104      	bne.n	160c <can_set_rx_standand_filter+0x28>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    1602:	6809      	ldr	r1, [r1, #0]
    1604:	0092      	lsls	r2, r2, #2
    1606:	4b05      	ldr	r3, [pc, #20]	; (161c <can_set_rx_standand_filter+0x38>)
    1608:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    160a:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    160c:	bd10      	pop	{r4, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	42001c00 	.word	0x42001c00
    1614:	200005a8 	.word	0x200005a8
    1618:	42002000 	.word	0x42002000
    161c:	20000528 	.word	0x20000528

00001620 <can_set_rx_extended_filter>:

enum status_code can_set_rx_extended_filter(
		struct can_module *const module_inst,
		struct can_extended_message_filter_element *et_filter, uint32_t index)
{
    1620:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    1622:	6803      	ldr	r3, [r0, #0]
    1624:	480c      	ldr	r0, [pc, #48]	; (1658 <can_set_rx_extended_filter+0x38>)
    1626:	4283      	cmp	r3, r0
    1628:	d108      	bne.n	163c <can_set_rx_extended_filter+0x1c>
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
    162a:	6808      	ldr	r0, [r1, #0]
    162c:	4b0b      	ldr	r3, [pc, #44]	; (165c <can_set_rx_extended_filter+0x3c>)
    162e:	00d2      	lsls	r2, r2, #3
    1630:	50d0      	str	r0, [r2, r3]
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
    1632:	6849      	ldr	r1, [r1, #4]
    1634:	189a      	adds	r2, r3, r2
    1636:	6051      	str	r1, [r2, #4]
		return STATUS_OK;
    1638:	2000      	movs	r0, #0
    163a:	e00b      	b.n	1654 <can_set_rx_extended_filter+0x34>
	} else if (module_inst->hw == CAN1) {
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    163c:	2017      	movs	r0, #23
{
	if (module_inst->hw == CAN0) {
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    163e:	4c08      	ldr	r4, [pc, #32]	; (1660 <can_set_rx_extended_filter+0x40>)
    1640:	42a3      	cmp	r3, r4
    1642:	d107      	bne.n	1654 <can_set_rx_extended_filter+0x34>
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
    1644:	6808      	ldr	r0, [r1, #0]
    1646:	4b07      	ldr	r3, [pc, #28]	; (1664 <can_set_rx_extended_filter+0x44>)
    1648:	00d2      	lsls	r2, r2, #3
    164a:	50d0      	str	r0, [r2, r3]
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
    164c:	6849      	ldr	r1, [r1, #4]
    164e:	189a      	adds	r2, r3, r2
    1650:	6051      	str	r1, [r2, #4]
		return STATUS_OK;
    1652:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    1654:	bd10      	pop	{r4, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	42001c00 	.word	0x42001c00
    165c:	200004a8 	.word	0x200004a8
    1660:	42002000 	.word	0x42002000
    1664:	20000428 	.word	0x20000428

00001668 <can_get_rx_buffer_element>:

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    1668:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    166a:	6803      	ldr	r3, [r0, #0]
    166c:	4c0d      	ldr	r4, [pc, #52]	; (16a4 <can_get_rx_buffer_element+0x3c>)
    166e:	42a3      	cmp	r3, r4
    1670:	d109      	bne.n	1686 <can_get_rx_buffer_element+0x1e>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    1672:	0112      	lsls	r2, r2, #4
    1674:	4b0c      	ldr	r3, [pc, #48]	; (16a8 <can_get_rx_buffer_element+0x40>)
    1676:	189a      	adds	r2, r3, r2
    1678:	1c08      	adds	r0, r1, #0
    167a:	1c11      	adds	r1, r2, #0
    167c:	2210      	movs	r2, #16
    167e:	4b0b      	ldr	r3, [pc, #44]	; (16ac <can_get_rx_buffer_element+0x44>)
    1680:	4798      	blx	r3
		return STATUS_OK;
    1682:	2000      	movs	r0, #0
    1684:	e00c      	b.n	16a0 <can_get_rx_buffer_element+0x38>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1686:	2017      	movs	r0, #23
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1688:	4c09      	ldr	r4, [pc, #36]	; (16b0 <can_get_rx_buffer_element+0x48>)
    168a:	42a3      	cmp	r3, r4
    168c:	d108      	bne.n	16a0 <can_get_rx_buffer_element+0x38>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    168e:	0112      	lsls	r2, r2, #4
    1690:	4b08      	ldr	r3, [pc, #32]	; (16b4 <can_get_rx_buffer_element+0x4c>)
    1692:	189a      	adds	r2, r3, r2
    1694:	1c08      	adds	r0, r1, #0
    1696:	1c11      	adds	r1, r2, #0
    1698:	2210      	movs	r2, #16
    169a:	4b04      	ldr	r3, [pc, #16]	; (16ac <can_get_rx_buffer_element+0x44>)
    169c:	4798      	blx	r3
		return STATUS_OK;
    169e:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    16a0:	bd10      	pop	{r4, pc}
    16a2:	46c0      	nop			; (mov r8, r8)
    16a4:	42001c00 	.word	0x42001c00
    16a8:	20000828 	.word	0x20000828
    16ac:	00002d61 	.word	0x00002d61
    16b0:	42002000 	.word	0x42002000
    16b4:	20000728 	.word	0x20000728

000016b8 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
    16b8:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    16ba:	6803      	ldr	r3, [r0, #0]
    16bc:	4c0d      	ldr	r4, [pc, #52]	; (16f4 <can_get_rx_fifo_0_element+0x3c>)
    16be:	42a3      	cmp	r3, r4
    16c0:	d109      	bne.n	16d6 <can_get_rx_fifo_0_element+0x1e>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    16c2:	0112      	lsls	r2, r2, #4
    16c4:	4b0c      	ldr	r3, [pc, #48]	; (16f8 <can_get_rx_fifo_0_element+0x40>)
    16c6:	189a      	adds	r2, r3, r2
    16c8:	1c08      	adds	r0, r1, #0
    16ca:	1c11      	adds	r1, r2, #0
    16cc:	2210      	movs	r2, #16
    16ce:	4b0b      	ldr	r3, [pc, #44]	; (16fc <can_get_rx_fifo_0_element+0x44>)
    16d0:	4798      	blx	r3
		return STATUS_OK;
    16d2:	2000      	movs	r0, #0
    16d4:	e00c      	b.n	16f0 <can_get_rx_fifo_0_element+0x38>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    16d6:	2017      	movs	r0, #23
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    16d8:	4c09      	ldr	r4, [pc, #36]	; (1700 <can_get_rx_fifo_0_element+0x48>)
    16da:	42a3      	cmp	r3, r4
    16dc:	d108      	bne.n	16f0 <can_get_rx_fifo_0_element+0x38>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    16de:	0112      	lsls	r2, r2, #4
    16e0:	4b08      	ldr	r3, [pc, #32]	; (1704 <can_get_rx_fifo_0_element+0x4c>)
    16e2:	189a      	adds	r2, r3, r2
    16e4:	1c08      	adds	r0, r1, #0
    16e6:	1c11      	adds	r1, r2, #0
    16e8:	2210      	movs	r2, #16
    16ea:	4b04      	ldr	r3, [pc, #16]	; (16fc <can_get_rx_fifo_0_element+0x44>)
    16ec:	4798      	blx	r3
		return STATUS_OK;
    16ee:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    16f0:	bd10      	pop	{r4, pc}
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	42001c00 	.word	0x42001c00
    16f8:	200009a8 	.word	0x200009a8
    16fc:	00002d61 	.word	0x00002d61
    1700:	42002000 	.word	0x42002000
    1704:	20000228 	.word	0x20000228

00001708 <can_get_rx_fifo_1_element>:

enum status_code can_get_rx_fifo_1_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
    1708:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    170a:	6803      	ldr	r3, [r0, #0]
    170c:	4c0d      	ldr	r4, [pc, #52]	; (1744 <can_get_rx_fifo_1_element+0x3c>)
    170e:	42a3      	cmp	r3, r4
    1710:	d109      	bne.n	1726 <can_get_rx_fifo_1_element+0x1e>
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    1712:	0112      	lsls	r2, r2, #4
    1714:	4b0c      	ldr	r3, [pc, #48]	; (1748 <can_get_rx_fifo_1_element+0x40>)
    1716:	189a      	adds	r2, r3, r2
    1718:	1c08      	adds	r0, r1, #0
    171a:	1c11      	adds	r1, r2, #0
    171c:	2210      	movs	r2, #16
    171e:	4b0b      	ldr	r3, [pc, #44]	; (174c <can_get_rx_fifo_1_element+0x44>)
    1720:	4798      	blx	r3
		return STATUS_OK;
    1722:	2000      	movs	r0, #0
    1724:	e00c      	b.n	1740 <can_get_rx_fifo_1_element+0x38>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1726:	2017      	movs	r0, #23
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1728:	4c09      	ldr	r4, [pc, #36]	; (1750 <can_get_rx_fifo_1_element+0x48>)
    172a:	42a3      	cmp	r3, r4
    172c:	d108      	bne.n	1740 <can_get_rx_fifo_1_element+0x38>
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    172e:	0112      	lsls	r2, r2, #4
    1730:	4b08      	ldr	r3, [pc, #32]	; (1754 <can_get_rx_fifo_1_element+0x4c>)
    1732:	189a      	adds	r2, r3, r2
    1734:	1c08      	adds	r0, r1, #0
    1736:	1c11      	adds	r1, r2, #0
    1738:	2210      	movs	r2, #16
    173a:	4b04      	ldr	r3, [pc, #16]	; (174c <can_get_rx_fifo_1_element+0x44>)
    173c:	4798      	blx	r3
		return STATUS_OK;
    173e:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    1740:	bd10      	pop	{r4, pc}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	42001c00 	.word	0x42001c00
    1748:	20000128 	.word	0x20000128
    174c:	00002d61 	.word	0x00002d61
    1750:	42002000 	.word	0x42002000
    1754:	20000328 	.word	0x20000328

00001758 <can_set_tx_buffer_element>:

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
    1758:	b530      	push	{r4, r5, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
    175a:	6803      	ldr	r3, [r0, #0]
    175c:	4816      	ldr	r0, [pc, #88]	; (17b8 <can_set_tx_buffer_element+0x60>)
    175e:	4283      	cmp	r3, r0
    1760:	d112      	bne.n	1788 <can_set_tx_buffer_element+0x30>
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
    1762:	6808      	ldr	r0, [r1, #0]
    1764:	4b15      	ldr	r3, [pc, #84]	; (17bc <can_set_tx_buffer_element+0x64>)
    1766:	0112      	lsls	r2, r2, #4
    1768:	50d0      	str	r0, [r2, r3]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
    176a:	6848      	ldr	r0, [r1, #4]
    176c:	189b      	adds	r3, r3, r2
    176e:	6058      	str	r0, [r3, #4]
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    1770:	2300      	movs	r3, #0
    1772:	4d12      	ldr	r5, [pc, #72]	; (17bc <can_set_tx_buffer_element+0x64>)
    1774:	18c8      	adds	r0, r1, r3
			can0_tx_buffer[index].data[i] = tx_element->data[i];
    1776:	7a04      	ldrb	r4, [r0, #8]
    1778:	1898      	adds	r0, r3, r2
    177a:	1828      	adds	r0, r5, r0
    177c:	7204      	strb	r4, [r0, #8]
{
	uint32_t i;
	if (module_inst->hw == CAN0) {
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    177e:	3301      	adds	r3, #1
    1780:	2b08      	cmp	r3, #8
    1782:	d1f7      	bne.n	1774 <can_set_tx_buffer_element+0x1c>
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
    1784:	2000      	movs	r0, #0
    1786:	e015      	b.n	17b4 <can_set_tx_buffer_element+0x5c>
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1788:	2017      	movs	r0, #23
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    178a:	4c0d      	ldr	r4, [pc, #52]	; (17c0 <can_set_tx_buffer_element+0x68>)
    178c:	42a3      	cmp	r3, r4
    178e:	d111      	bne.n	17b4 <can_set_tx_buffer_element+0x5c>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
    1790:	6808      	ldr	r0, [r1, #0]
    1792:	4b0c      	ldr	r3, [pc, #48]	; (17c4 <can_set_tx_buffer_element+0x6c>)
    1794:	0112      	lsls	r2, r2, #4
    1796:	50d0      	str	r0, [r2, r3]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
    1798:	6848      	ldr	r0, [r1, #4]
    179a:	189b      	adds	r3, r3, r2
    179c:	6058      	str	r0, [r3, #4]
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    179e:	2300      	movs	r3, #0
    17a0:	4d08      	ldr	r5, [pc, #32]	; (17c4 <can_set_tx_buffer_element+0x6c>)
    17a2:	18c8      	adds	r0, r1, r3
			can1_tx_buffer[index].data[i] = tx_element->data[i];
    17a4:	7a04      	ldrb	r4, [r0, #8]
    17a6:	1898      	adds	r0, r3, r2
    17a8:	1828      	adds	r0, r5, r0
    17aa:	7204      	strb	r4, [r0, #8]
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    17ac:	3301      	adds	r3, #1
    17ae:	2b08      	cmp	r3, #8
    17b0:	d1f7      	bne.n	17a2 <can_set_tx_buffer_element+0x4a>
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
    17b2:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    17b4:	bd30      	pop	{r4, r5, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	42001c00 	.word	0x42001c00
    17bc:	200006a8 	.word	0x200006a8
    17c0:	42002000 	.word	0x42002000
    17c4:	20000628 	.word	0x20000628

000017c8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    17c8:	b500      	push	{lr}
    17ca:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    17cc:	ab01      	add	r3, sp, #4
    17ce:	2280      	movs	r2, #128	; 0x80
    17d0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    17d2:	780a      	ldrb	r2, [r1, #0]
    17d4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    17d6:	784a      	ldrb	r2, [r1, #1]
    17d8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    17da:	788a      	ldrb	r2, [r1, #2]
    17dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    17de:	1c19      	adds	r1, r3, #0
    17e0:	4b01      	ldr	r3, [pc, #4]	; (17e8 <port_pin_set_config+0x20>)
    17e2:	4798      	blx	r3
}
    17e4:	b003      	add	sp, #12
    17e6:	bd00      	pop	{pc}
    17e8:	000029cd 	.word	0x000029cd

000017ec <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    17ec:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    17ee:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    17f0:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    17f2:	4281      	cmp	r1, r0
    17f4:	d30c      	bcc.n	1810 <_sercom_get_sync_baud_val+0x24>
    17f6:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    17f8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    17fa:	3301      	adds	r3, #1
    17fc:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    17fe:	4288      	cmp	r0, r1
    1800:	d9fa      	bls.n	17f8 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    1802:	3b01      	subs	r3, #1
    1804:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1806:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1808:	2bff      	cmp	r3, #255	; 0xff
    180a:	d801      	bhi.n	1810 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    180c:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    180e:	2400      	movs	r4, #0
	}
}
    1810:	1c20      	adds	r0, r4, #0
    1812:	bd10      	pop	{r4, pc}

00001814 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1814:	b5f0      	push	{r4, r5, r6, r7, lr}
    1816:	465f      	mov	r7, fp
    1818:	4656      	mov	r6, sl
    181a:	464d      	mov	r5, r9
    181c:	4644      	mov	r4, r8
    181e:	b4f0      	push	{r4, r5, r6, r7}
    1820:	b089      	sub	sp, #36	; 0x24
    1822:	1c1c      	adds	r4, r3, #0
    1824:	ab12      	add	r3, sp, #72	; 0x48
    1826:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1828:	1c06      	adds	r6, r0, #0
    182a:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    182c:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    182e:	428e      	cmp	r6, r1
    1830:	d900      	bls.n	1834 <_sercom_get_async_baud_val+0x20>
    1832:	e0c7      	b.n	19c4 <_sercom_get_async_baud_val+0x1b0>
    1834:	1c25      	adds	r5, r4, #0
    1836:	9207      	str	r2, [sp, #28]
    1838:	1c0c      	adds	r4, r1, #0
    183a:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    183c:	2d00      	cmp	r5, #0
    183e:	d151      	bne.n	18e4 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1840:	1c18      	adds	r0, r3, #0
    1842:	2100      	movs	r1, #0
    1844:	2300      	movs	r3, #0
    1846:	4d63      	ldr	r5, [pc, #396]	; (19d4 <_sercom_get_async_baud_val+0x1c0>)
    1848:	47a8      	blx	r5
    184a:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    184c:	1c26      	adds	r6, r4, #0
    184e:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1850:	2300      	movs	r3, #0
    1852:	2400      	movs	r4, #0
    1854:	9302      	str	r3, [sp, #8]
    1856:	9403      	str	r4, [sp, #12]
    1858:	2200      	movs	r2, #0
    185a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    185c:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    185e:	2120      	movs	r1, #32
    1860:	468c      	mov	ip, r1
    1862:	391f      	subs	r1, #31
    1864:	9600      	str	r6, [sp, #0]
    1866:	9701      	str	r7, [sp, #4]
    1868:	2420      	movs	r4, #32
    186a:	4264      	negs	r4, r4
    186c:	1904      	adds	r4, r0, r4
    186e:	d403      	bmi.n	1878 <_sercom_get_async_baud_val+0x64>
    1870:	1c0d      	adds	r5, r1, #0
    1872:	40a5      	lsls	r5, r4
    1874:	46a8      	mov	r8, r5
    1876:	e004      	b.n	1882 <_sercom_get_async_baud_val+0x6e>
    1878:	4664      	mov	r4, ip
    187a:	1a24      	subs	r4, r4, r0
    187c:	1c0d      	adds	r5, r1, #0
    187e:	40e5      	lsrs	r5, r4
    1880:	46a8      	mov	r8, r5
    1882:	1c0c      	adds	r4, r1, #0
    1884:	4084      	lsls	r4, r0
    1886:	46a1      	mov	r9, r4

		r = r << 1;
    1888:	1c14      	adds	r4, r2, #0
    188a:	1c1d      	adds	r5, r3, #0
    188c:	18a4      	adds	r4, r4, r2
    188e:	415d      	adcs	r5, r3
    1890:	1c22      	adds	r2, r4, #0
    1892:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    1894:	465e      	mov	r6, fp
    1896:	4647      	mov	r7, r8
    1898:	423e      	tst	r6, r7
    189a:	d003      	beq.n	18a4 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    189c:	1c0e      	adds	r6, r1, #0
    189e:	4326      	orrs	r6, r4
    18a0:	1c32      	adds	r2, r6, #0
    18a2:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    18a4:	9c01      	ldr	r4, [sp, #4]
    18a6:	429c      	cmp	r4, r3
    18a8:	d810      	bhi.n	18cc <_sercom_get_async_baud_val+0xb8>
    18aa:	d102      	bne.n	18b2 <_sercom_get_async_baud_val+0x9e>
    18ac:	9c00      	ldr	r4, [sp, #0]
    18ae:	4294      	cmp	r4, r2
    18b0:	d80c      	bhi.n	18cc <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    18b2:	9c00      	ldr	r4, [sp, #0]
    18b4:	9d01      	ldr	r5, [sp, #4]
    18b6:	1b12      	subs	r2, r2, r4
    18b8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    18ba:	464d      	mov	r5, r9
    18bc:	9e02      	ldr	r6, [sp, #8]
    18be:	9f03      	ldr	r7, [sp, #12]
    18c0:	4335      	orrs	r5, r6
    18c2:	1c3c      	adds	r4, r7, #0
    18c4:	4646      	mov	r6, r8
    18c6:	4334      	orrs	r4, r6
    18c8:	9502      	str	r5, [sp, #8]
    18ca:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    18cc:	3801      	subs	r0, #1
    18ce:	d2cb      	bcs.n	1868 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    18d0:	2200      	movs	r2, #0
    18d2:	2301      	movs	r3, #1
    18d4:	9802      	ldr	r0, [sp, #8]
    18d6:	9903      	ldr	r1, [sp, #12]
    18d8:	1a12      	subs	r2, r2, r0
    18da:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    18dc:	0c11      	lsrs	r1, r2, #16
    18de:	041b      	lsls	r3, r3, #16
    18e0:	4319      	orrs	r1, r3
    18e2:	e06c      	b.n	19be <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    18e4:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    18e6:	2d01      	cmp	r5, #1
    18e8:	d169      	bne.n	19be <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    18ea:	0f61      	lsrs	r1, r4, #29
    18ec:	1c0f      	adds	r7, r1, #0
    18ee:	00e1      	lsls	r1, r4, #3
    18f0:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    18f2:	1c18      	adds	r0, r3, #0
    18f4:	2100      	movs	r1, #0
    18f6:	2300      	movs	r3, #0
    18f8:	4c36      	ldr	r4, [pc, #216]	; (19d4 <_sercom_get_async_baud_val+0x1c0>)
    18fa:	47a0      	blx	r4
    18fc:	1c04      	adds	r4, r0, #0
    18fe:	1c0d      	adds	r5, r1, #0
    1900:	2300      	movs	r3, #0
    1902:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1904:	3320      	adds	r3, #32
    1906:	469b      	mov	fp, r3
    1908:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    190a:	4663      	mov	r3, ip
    190c:	9305      	str	r3, [sp, #20]
    190e:	46b9      	mov	r9, r7
    1910:	466b      	mov	r3, sp
    1912:	7d1b      	ldrb	r3, [r3, #20]
    1914:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1916:	2300      	movs	r3, #0
    1918:	469c      	mov	ip, r3
    191a:	2000      	movs	r0, #0
    191c:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    191e:	223f      	movs	r2, #63	; 0x3f
    1920:	9400      	str	r4, [sp, #0]
    1922:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    1924:	2320      	movs	r3, #32
    1926:	425b      	negs	r3, r3
    1928:	18d3      	adds	r3, r2, r3
    192a:	d403      	bmi.n	1934 <_sercom_get_async_baud_val+0x120>
    192c:	1c34      	adds	r4, r6, #0
    192e:	409c      	lsls	r4, r3
    1930:	1c23      	adds	r3, r4, #0
    1932:	e004      	b.n	193e <_sercom_get_async_baud_val+0x12a>
    1934:	465b      	mov	r3, fp
    1936:	1a9b      	subs	r3, r3, r2
    1938:	1c34      	adds	r4, r6, #0
    193a:	40dc      	lsrs	r4, r3
    193c:	1c23      	adds	r3, r4, #0
    193e:	1c37      	adds	r7, r6, #0
    1940:	4097      	lsls	r7, r2

		r = r << 1;
    1942:	1c04      	adds	r4, r0, #0
    1944:	1c0d      	adds	r5, r1, #0
    1946:	1824      	adds	r4, r4, r0
    1948:	414d      	adcs	r5, r1
    194a:	1c20      	adds	r0, r4, #0
    194c:	1c29      	adds	r1, r5, #0
    194e:	9002      	str	r0, [sp, #8]
    1950:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    1952:	4644      	mov	r4, r8
    1954:	403c      	ands	r4, r7
    1956:	46a2      	mov	sl, r4
    1958:	464c      	mov	r4, r9
    195a:	4023      	ands	r3, r4
    195c:	4654      	mov	r4, sl
    195e:	4323      	orrs	r3, r4
    1960:	d005      	beq.n	196e <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    1962:	9b02      	ldr	r3, [sp, #8]
    1964:	9c03      	ldr	r4, [sp, #12]
    1966:	1c1d      	adds	r5, r3, #0
    1968:	4335      	orrs	r5, r6
    196a:	1c28      	adds	r0, r5, #0
    196c:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    196e:	9b01      	ldr	r3, [sp, #4]
    1970:	428b      	cmp	r3, r1
    1972:	d80a      	bhi.n	198a <_sercom_get_async_baud_val+0x176>
    1974:	d102      	bne.n	197c <_sercom_get_async_baud_val+0x168>
    1976:	9b00      	ldr	r3, [sp, #0]
    1978:	4283      	cmp	r3, r0
    197a:	d806      	bhi.n	198a <_sercom_get_async_baud_val+0x176>
			r = r - d;
    197c:	9b00      	ldr	r3, [sp, #0]
    197e:	9c01      	ldr	r4, [sp, #4]
    1980:	1ac0      	subs	r0, r0, r3
    1982:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    1984:	4663      	mov	r3, ip
    1986:	433b      	orrs	r3, r7
    1988:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    198a:	3a01      	subs	r2, #1
    198c:	d2ca      	bcs.n	1924 <_sercom_get_async_baud_val+0x110>
    198e:	9c00      	ldr	r4, [sp, #0]
    1990:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    1992:	4662      	mov	r2, ip
    1994:	9905      	ldr	r1, [sp, #20]
    1996:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    1998:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    199a:	4a0f      	ldr	r2, [pc, #60]	; (19d8 <_sercom_get_async_baud_val+0x1c4>)
    199c:	4293      	cmp	r3, r2
    199e:	d908      	bls.n	19b2 <_sercom_get_async_baud_val+0x19e>
    19a0:	9a06      	ldr	r2, [sp, #24]
    19a2:	3201      	adds	r2, #1
    19a4:	b2d2      	uxtb	r2, r2
    19a6:	9206      	str	r2, [sp, #24]
    19a8:	1c0a      	adds	r2, r1, #0
    19aa:	3201      	adds	r2, #1
    19ac:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    19ae:	2a08      	cmp	r2, #8
    19b0:	d1ae      	bne.n	1910 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19b2:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    19b4:	9a06      	ldr	r2, [sp, #24]
    19b6:	2a08      	cmp	r2, #8
    19b8:	d004      	beq.n	19c4 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    19ba:	0351      	lsls	r1, r2, #13
    19bc:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    19be:	9b07      	ldr	r3, [sp, #28]
    19c0:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    19c2:	2500      	movs	r5, #0
}
    19c4:	1c28      	adds	r0, r5, #0
    19c6:	b009      	add	sp, #36	; 0x24
    19c8:	bc3c      	pop	{r2, r3, r4, r5}
    19ca:	4690      	mov	r8, r2
    19cc:	4699      	mov	r9, r3
    19ce:	46a2      	mov	sl, r4
    19d0:	46ab      	mov	fp, r5
    19d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19d4:	00002cc1 	.word	0x00002cc1
    19d8:	00001fff 	.word	0x00001fff

000019dc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    19dc:	b510      	push	{r4, lr}
    19de:	b082      	sub	sp, #8
    19e0:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    19e2:	4b0e      	ldr	r3, [pc, #56]	; (1a1c <sercom_set_gclk_generator+0x40>)
    19e4:	781b      	ldrb	r3, [r3, #0]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d001      	beq.n	19ee <sercom_set_gclk_generator+0x12>
    19ea:	2900      	cmp	r1, #0
    19ec:	d00d      	beq.n	1a0a <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    19ee:	a901      	add	r1, sp, #4
    19f0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    19f2:	2012      	movs	r0, #18
    19f4:	4b0a      	ldr	r3, [pc, #40]	; (1a20 <sercom_set_gclk_generator+0x44>)
    19f6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    19f8:	2012      	movs	r0, #18
    19fa:	4b0a      	ldr	r3, [pc, #40]	; (1a24 <sercom_set_gclk_generator+0x48>)
    19fc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    19fe:	4b07      	ldr	r3, [pc, #28]	; (1a1c <sercom_set_gclk_generator+0x40>)
    1a00:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1a02:	2201      	movs	r2, #1
    1a04:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1a06:	2000      	movs	r0, #0
    1a08:	e006      	b.n	1a18 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    1a0a:	4b04      	ldr	r3, [pc, #16]	; (1a1c <sercom_set_gclk_generator+0x40>)
    1a0c:	785b      	ldrb	r3, [r3, #1]
    1a0e:	4283      	cmp	r3, r0
    1a10:	d001      	beq.n	1a16 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a12:	201d      	movs	r0, #29
    1a14:	e000      	b.n	1a18 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    1a16:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1a18:	b002      	add	sp, #8
    1a1a:	bd10      	pop	{r4, pc}
    1a1c:	20000aa8 	.word	0x20000aa8
    1a20:	000028d1 	.word	0x000028d1
    1a24:	00002869 	.word	0x00002869

00001a28 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1a28:	4b44      	ldr	r3, [pc, #272]	; (1b3c <_sercom_get_default_pad+0x114>)
    1a2a:	4298      	cmp	r0, r3
    1a2c:	d033      	beq.n	1a96 <_sercom_get_default_pad+0x6e>
    1a2e:	d806      	bhi.n	1a3e <_sercom_get_default_pad+0x16>
    1a30:	4b43      	ldr	r3, [pc, #268]	; (1b40 <_sercom_get_default_pad+0x118>)
    1a32:	4298      	cmp	r0, r3
    1a34:	d00d      	beq.n	1a52 <_sercom_get_default_pad+0x2a>
    1a36:	4b43      	ldr	r3, [pc, #268]	; (1b44 <_sercom_get_default_pad+0x11c>)
    1a38:	4298      	cmp	r0, r3
    1a3a:	d01b      	beq.n	1a74 <_sercom_get_default_pad+0x4c>
    1a3c:	e06f      	b.n	1b1e <_sercom_get_default_pad+0xf6>
    1a3e:	4b42      	ldr	r3, [pc, #264]	; (1b48 <_sercom_get_default_pad+0x120>)
    1a40:	4298      	cmp	r0, r3
    1a42:	d04a      	beq.n	1ada <_sercom_get_default_pad+0xb2>
    1a44:	4b41      	ldr	r3, [pc, #260]	; (1b4c <_sercom_get_default_pad+0x124>)
    1a46:	4298      	cmp	r0, r3
    1a48:	d058      	beq.n	1afc <_sercom_get_default_pad+0xd4>
    1a4a:	4b41      	ldr	r3, [pc, #260]	; (1b50 <_sercom_get_default_pad+0x128>)
    1a4c:	4298      	cmp	r0, r3
    1a4e:	d166      	bne.n	1b1e <_sercom_get_default_pad+0xf6>
    1a50:	e032      	b.n	1ab8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a52:	2901      	cmp	r1, #1
    1a54:	d006      	beq.n	1a64 <_sercom_get_default_pad+0x3c>
    1a56:	2900      	cmp	r1, #0
    1a58:	d063      	beq.n	1b22 <_sercom_get_default_pad+0xfa>
    1a5a:	2902      	cmp	r1, #2
    1a5c:	d006      	beq.n	1a6c <_sercom_get_default_pad+0x44>
    1a5e:	2903      	cmp	r1, #3
    1a60:	d006      	beq.n	1a70 <_sercom_get_default_pad+0x48>
    1a62:	e001      	b.n	1a68 <_sercom_get_default_pad+0x40>
    1a64:	483b      	ldr	r0, [pc, #236]	; (1b54 <_sercom_get_default_pad+0x12c>)
    1a66:	e067      	b.n	1b38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1a68:	2000      	movs	r0, #0
    1a6a:	e065      	b.n	1b38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a6c:	483a      	ldr	r0, [pc, #232]	; (1b58 <_sercom_get_default_pad+0x130>)
    1a6e:	e063      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1a70:	483a      	ldr	r0, [pc, #232]	; (1b5c <_sercom_get_default_pad+0x134>)
    1a72:	e061      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1a74:	2901      	cmp	r1, #1
    1a76:	d006      	beq.n	1a86 <_sercom_get_default_pad+0x5e>
    1a78:	2900      	cmp	r1, #0
    1a7a:	d054      	beq.n	1b26 <_sercom_get_default_pad+0xfe>
    1a7c:	2902      	cmp	r1, #2
    1a7e:	d006      	beq.n	1a8e <_sercom_get_default_pad+0x66>
    1a80:	2903      	cmp	r1, #3
    1a82:	d006      	beq.n	1a92 <_sercom_get_default_pad+0x6a>
    1a84:	e001      	b.n	1a8a <_sercom_get_default_pad+0x62>
    1a86:	4836      	ldr	r0, [pc, #216]	; (1b60 <_sercom_get_default_pad+0x138>)
    1a88:	e056      	b.n	1b38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1a8a:	2000      	movs	r0, #0
    1a8c:	e054      	b.n	1b38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a8e:	4835      	ldr	r0, [pc, #212]	; (1b64 <_sercom_get_default_pad+0x13c>)
    1a90:	e052      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1a92:	4835      	ldr	r0, [pc, #212]	; (1b68 <_sercom_get_default_pad+0x140>)
    1a94:	e050      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1a96:	2901      	cmp	r1, #1
    1a98:	d006      	beq.n	1aa8 <_sercom_get_default_pad+0x80>
    1a9a:	2900      	cmp	r1, #0
    1a9c:	d045      	beq.n	1b2a <_sercom_get_default_pad+0x102>
    1a9e:	2902      	cmp	r1, #2
    1aa0:	d006      	beq.n	1ab0 <_sercom_get_default_pad+0x88>
    1aa2:	2903      	cmp	r1, #3
    1aa4:	d006      	beq.n	1ab4 <_sercom_get_default_pad+0x8c>
    1aa6:	e001      	b.n	1aac <_sercom_get_default_pad+0x84>
    1aa8:	4830      	ldr	r0, [pc, #192]	; (1b6c <_sercom_get_default_pad+0x144>)
    1aaa:	e045      	b.n	1b38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1aac:	2000      	movs	r0, #0
    1aae:	e043      	b.n	1b38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ab0:	482f      	ldr	r0, [pc, #188]	; (1b70 <_sercom_get_default_pad+0x148>)
    1ab2:	e041      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1ab4:	482f      	ldr	r0, [pc, #188]	; (1b74 <_sercom_get_default_pad+0x14c>)
    1ab6:	e03f      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1ab8:	2901      	cmp	r1, #1
    1aba:	d006      	beq.n	1aca <_sercom_get_default_pad+0xa2>
    1abc:	2900      	cmp	r1, #0
    1abe:	d036      	beq.n	1b2e <_sercom_get_default_pad+0x106>
    1ac0:	2902      	cmp	r1, #2
    1ac2:	d006      	beq.n	1ad2 <_sercom_get_default_pad+0xaa>
    1ac4:	2903      	cmp	r1, #3
    1ac6:	d006      	beq.n	1ad6 <_sercom_get_default_pad+0xae>
    1ac8:	e001      	b.n	1ace <_sercom_get_default_pad+0xa6>
    1aca:	482b      	ldr	r0, [pc, #172]	; (1b78 <_sercom_get_default_pad+0x150>)
    1acc:	e034      	b.n	1b38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1ace:	2000      	movs	r0, #0
    1ad0:	e032      	b.n	1b38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ad2:	482a      	ldr	r0, [pc, #168]	; (1b7c <_sercom_get_default_pad+0x154>)
    1ad4:	e030      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1ad6:	482a      	ldr	r0, [pc, #168]	; (1b80 <_sercom_get_default_pad+0x158>)
    1ad8:	e02e      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1ada:	2901      	cmp	r1, #1
    1adc:	d006      	beq.n	1aec <_sercom_get_default_pad+0xc4>
    1ade:	2900      	cmp	r1, #0
    1ae0:	d027      	beq.n	1b32 <_sercom_get_default_pad+0x10a>
    1ae2:	2902      	cmp	r1, #2
    1ae4:	d006      	beq.n	1af4 <_sercom_get_default_pad+0xcc>
    1ae6:	2903      	cmp	r1, #3
    1ae8:	d006      	beq.n	1af8 <_sercom_get_default_pad+0xd0>
    1aea:	e001      	b.n	1af0 <_sercom_get_default_pad+0xc8>
    1aec:	4825      	ldr	r0, [pc, #148]	; (1b84 <_sercom_get_default_pad+0x15c>)
    1aee:	e023      	b.n	1b38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1af0:	2000      	movs	r0, #0
    1af2:	e021      	b.n	1b38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1af4:	4824      	ldr	r0, [pc, #144]	; (1b88 <_sercom_get_default_pad+0x160>)
    1af6:	e01f      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1af8:	4824      	ldr	r0, [pc, #144]	; (1b8c <_sercom_get_default_pad+0x164>)
    1afa:	e01d      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1afc:	2901      	cmp	r1, #1
    1afe:	d006      	beq.n	1b0e <_sercom_get_default_pad+0xe6>
    1b00:	2900      	cmp	r1, #0
    1b02:	d018      	beq.n	1b36 <_sercom_get_default_pad+0x10e>
    1b04:	2902      	cmp	r1, #2
    1b06:	d006      	beq.n	1b16 <_sercom_get_default_pad+0xee>
    1b08:	2903      	cmp	r1, #3
    1b0a:	d006      	beq.n	1b1a <_sercom_get_default_pad+0xf2>
    1b0c:	e001      	b.n	1b12 <_sercom_get_default_pad+0xea>
    1b0e:	4820      	ldr	r0, [pc, #128]	; (1b90 <_sercom_get_default_pad+0x168>)
    1b10:	e012      	b.n	1b38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1b12:	2000      	movs	r0, #0
    1b14:	e010      	b.n	1b38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b16:	481f      	ldr	r0, [pc, #124]	; (1b94 <_sercom_get_default_pad+0x16c>)
    1b18:	e00e      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1b1a:	481f      	ldr	r0, [pc, #124]	; (1b98 <_sercom_get_default_pad+0x170>)
    1b1c:	e00c      	b.n	1b38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1b1e:	2000      	movs	r0, #0
    1b20:	e00a      	b.n	1b38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b22:	481e      	ldr	r0, [pc, #120]	; (1b9c <_sercom_get_default_pad+0x174>)
    1b24:	e008      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1b26:	481e      	ldr	r0, [pc, #120]	; (1ba0 <_sercom_get_default_pad+0x178>)
    1b28:	e006      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1b2a:	481e      	ldr	r0, [pc, #120]	; (1ba4 <_sercom_get_default_pad+0x17c>)
    1b2c:	e004      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1b2e:	481e      	ldr	r0, [pc, #120]	; (1ba8 <_sercom_get_default_pad+0x180>)
    1b30:	e002      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1b32:	481e      	ldr	r0, [pc, #120]	; (1bac <_sercom_get_default_pad+0x184>)
    1b34:	e000      	b.n	1b38 <_sercom_get_default_pad+0x110>
    1b36:	481e      	ldr	r0, [pc, #120]	; (1bb0 <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
    1b38:	4770      	bx	lr
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	42000c00 	.word	0x42000c00
    1b40:	42000400 	.word	0x42000400
    1b44:	42000800 	.word	0x42000800
    1b48:	42001400 	.word	0x42001400
    1b4c:	42001800 	.word	0x42001800
    1b50:	42001000 	.word	0x42001000
    1b54:	00050003 	.word	0x00050003
    1b58:	00060003 	.word	0x00060003
    1b5c:	00070003 	.word	0x00070003
    1b60:	00110002 	.word	0x00110002
    1b64:	00120002 	.word	0x00120002
    1b68:	00130002 	.word	0x00130002
    1b6c:	000d0002 	.word	0x000d0002
    1b70:	000e0002 	.word	0x000e0002
    1b74:	000f0002 	.word	0x000f0002
    1b78:	00170002 	.word	0x00170002
    1b7c:	00180002 	.word	0x00180002
    1b80:	00190002 	.word	0x00190002
    1b84:	00290003 	.word	0x00290003
    1b88:	002a0003 	.word	0x002a0003
    1b8c:	002b0003 	.word	0x002b0003
    1b90:	00230003 	.word	0x00230003
    1b94:	00200003 	.word	0x00200003
    1b98:	00210003 	.word	0x00210003
    1b9c:	00040003 	.word	0x00040003
    1ba0:	00100002 	.word	0x00100002
    1ba4:	000c0002 	.word	0x000c0002
    1ba8:	00160002 	.word	0x00160002
    1bac:	00280003 	.word	0x00280003
    1bb0:	00220003 	.word	0x00220003

00001bb4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1bb4:	b530      	push	{r4, r5, lr}
    1bb6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1bb8:	4b0c      	ldr	r3, [pc, #48]	; (1bec <_sercom_get_sercom_inst_index+0x38>)
    1bba:	466a      	mov	r2, sp
    1bbc:	cb32      	ldmia	r3!, {r1, r4, r5}
    1bbe:	c232      	stmia	r2!, {r1, r4, r5}
    1bc0:	cb32      	ldmia	r3!, {r1, r4, r5}
    1bc2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1bc4:	9b00      	ldr	r3, [sp, #0]
    1bc6:	4283      	cmp	r3, r0
    1bc8:	d006      	beq.n	1bd8 <_sercom_get_sercom_inst_index+0x24>
    1bca:	2301      	movs	r3, #1
    1bcc:	009a      	lsls	r2, r3, #2
    1bce:	4669      	mov	r1, sp
    1bd0:	5852      	ldr	r2, [r2, r1]
    1bd2:	4282      	cmp	r2, r0
    1bd4:	d103      	bne.n	1bde <_sercom_get_sercom_inst_index+0x2a>
    1bd6:	e000      	b.n	1bda <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1bd8:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    1bda:	b2d8      	uxtb	r0, r3
    1bdc:	e003      	b.n	1be6 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1bde:	3301      	adds	r3, #1
    1be0:	2b06      	cmp	r3, #6
    1be2:	d1f3      	bne.n	1bcc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1be4:	2000      	movs	r0, #0
}
    1be6:	b007      	add	sp, #28
    1be8:	bd30      	pop	{r4, r5, pc}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	000050e4 	.word	0x000050e4

00001bf0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1bf0:	4770      	bx	lr
    1bf2:	46c0      	nop			; (mov r8, r8)

00001bf4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1bf6:	4b0a      	ldr	r3, [pc, #40]	; (1c20 <_sercom_set_handler+0x2c>)
    1bf8:	781b      	ldrb	r3, [r3, #0]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d10c      	bne.n	1c18 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1bfe:	4f09      	ldr	r7, [pc, #36]	; (1c24 <_sercom_set_handler+0x30>)
    1c00:	4e09      	ldr	r6, [pc, #36]	; (1c28 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1c02:	4d0a      	ldr	r5, [pc, #40]	; (1c2c <_sercom_set_handler+0x38>)
    1c04:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c06:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1c08:	195a      	adds	r2, r3, r5
    1c0a:	6014      	str	r4, [r2, #0]
    1c0c:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c0e:	2b18      	cmp	r3, #24
    1c10:	d1f9      	bne.n	1c06 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1c12:	2201      	movs	r2, #1
    1c14:	4b02      	ldr	r3, [pc, #8]	; (1c20 <_sercom_set_handler+0x2c>)
    1c16:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1c18:	0080      	lsls	r0, r0, #2
    1c1a:	4b02      	ldr	r3, [pc, #8]	; (1c24 <_sercom_set_handler+0x30>)
    1c1c:	50c1      	str	r1, [r0, r3]
}
    1c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c20:	20000aaa 	.word	0x20000aaa
    1c24:	20000aac 	.word	0x20000aac
    1c28:	00001bf1 	.word	0x00001bf1
    1c2c:	20000b3c 	.word	0x20000b3c

00001c30 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1c30:	b510      	push	{r4, lr}
    1c32:	b082      	sub	sp, #8
    1c34:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1c36:	4668      	mov	r0, sp
    1c38:	4905      	ldr	r1, [pc, #20]	; (1c50 <_sercom_get_interrupt_vector+0x20>)
    1c3a:	2206      	movs	r2, #6
    1c3c:	4b05      	ldr	r3, [pc, #20]	; (1c54 <_sercom_get_interrupt_vector+0x24>)
    1c3e:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1c40:	1c20      	adds	r0, r4, #0
    1c42:	4b05      	ldr	r3, [pc, #20]	; (1c58 <_sercom_get_interrupt_vector+0x28>)
    1c44:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1c46:	466b      	mov	r3, sp
    1c48:	5618      	ldrsb	r0, [r3, r0]
}
    1c4a:	b002      	add	sp, #8
    1c4c:	bd10      	pop	{r4, pc}
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	000050fc 	.word	0x000050fc
    1c54:	00002d61 	.word	0x00002d61
    1c58:	00001bb5 	.word	0x00001bb5

00001c5c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1c5c:	b508      	push	{r3, lr}
    1c5e:	4b02      	ldr	r3, [pc, #8]	; (1c68 <SERCOM0_Handler+0xc>)
    1c60:	681b      	ldr	r3, [r3, #0]
    1c62:	2000      	movs	r0, #0
    1c64:	4798      	blx	r3
    1c66:	bd08      	pop	{r3, pc}
    1c68:	20000aac 	.word	0x20000aac

00001c6c <SERCOM1_Handler>:
    1c6c:	b508      	push	{r3, lr}
    1c6e:	4b02      	ldr	r3, [pc, #8]	; (1c78 <SERCOM1_Handler+0xc>)
    1c70:	685b      	ldr	r3, [r3, #4]
    1c72:	2001      	movs	r0, #1
    1c74:	4798      	blx	r3
    1c76:	bd08      	pop	{r3, pc}
    1c78:	20000aac 	.word	0x20000aac

00001c7c <SERCOM2_Handler>:
    1c7c:	b508      	push	{r3, lr}
    1c7e:	4b02      	ldr	r3, [pc, #8]	; (1c88 <SERCOM2_Handler+0xc>)
    1c80:	689b      	ldr	r3, [r3, #8]
    1c82:	2002      	movs	r0, #2
    1c84:	4798      	blx	r3
    1c86:	bd08      	pop	{r3, pc}
    1c88:	20000aac 	.word	0x20000aac

00001c8c <SERCOM3_Handler>:
    1c8c:	b508      	push	{r3, lr}
    1c8e:	4b02      	ldr	r3, [pc, #8]	; (1c98 <SERCOM3_Handler+0xc>)
    1c90:	68db      	ldr	r3, [r3, #12]
    1c92:	2003      	movs	r0, #3
    1c94:	4798      	blx	r3
    1c96:	bd08      	pop	{r3, pc}
    1c98:	20000aac 	.word	0x20000aac

00001c9c <SERCOM4_Handler>:
    1c9c:	b508      	push	{r3, lr}
    1c9e:	4b02      	ldr	r3, [pc, #8]	; (1ca8 <SERCOM4_Handler+0xc>)
    1ca0:	691b      	ldr	r3, [r3, #16]
    1ca2:	2004      	movs	r0, #4
    1ca4:	4798      	blx	r3
    1ca6:	bd08      	pop	{r3, pc}
    1ca8:	20000aac 	.word	0x20000aac

00001cac <SERCOM5_Handler>:
    1cac:	b508      	push	{r3, lr}
    1cae:	4b02      	ldr	r3, [pc, #8]	; (1cb8 <SERCOM5_Handler+0xc>)
    1cb0:	695b      	ldr	r3, [r3, #20]
    1cb2:	2005      	movs	r0, #5
    1cb4:	4798      	blx	r3
    1cb6:	bd08      	pop	{r3, pc}
    1cb8:	20000aac 	.word	0x20000aac

00001cbc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cbe:	465f      	mov	r7, fp
    1cc0:	4656      	mov	r6, sl
    1cc2:	464d      	mov	r5, r9
    1cc4:	4644      	mov	r4, r8
    1cc6:	b4f0      	push	{r4, r5, r6, r7}
    1cc8:	b091      	sub	sp, #68	; 0x44
    1cca:	1c05      	adds	r5, r0, #0
    1ccc:	1c0c      	adds	r4, r1, #0
    1cce:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1cd0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1cd2:	1c08      	adds	r0, r1, #0
    1cd4:	4bce      	ldr	r3, [pc, #824]	; (2010 <STACK_SIZE+0x10>)
    1cd6:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1cd8:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1cda:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1cdc:	07d2      	lsls	r2, r2, #31
    1cde:	d500      	bpl.n	1ce2 <usart_init+0x26>
    1ce0:	e18e      	b.n	2000 <STACK_SIZE>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1ce2:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1ce4:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1ce6:	0792      	lsls	r2, r2, #30
    1ce8:	d500      	bpl.n	1cec <usart_init+0x30>
    1cea:	e189      	b.n	2000 <STACK_SIZE>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1cec:	49c9      	ldr	r1, [pc, #804]	; (2014 <STACK_SIZE+0x14>)
    1cee:	69ca      	ldr	r2, [r1, #28]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1cf0:	1c47      	adds	r7, r0, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1cf2:	3b1b      	subs	r3, #27
    1cf4:	40bb      	lsls	r3, r7
    1cf6:	4313      	orrs	r3, r2
    1cf8:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1cfa:	a90f      	add	r1, sp, #60	; 0x3c
    1cfc:	2735      	movs	r7, #53	; 0x35
    1cfe:	5df3      	ldrb	r3, [r6, r7]
    1d00:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1d02:	3013      	adds	r0, #19

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1d04:	b2c3      	uxtb	r3, r0
    1d06:	9302      	str	r3, [sp, #8]
    1d08:	1c18      	adds	r0, r3, #0
    1d0a:	4bc3      	ldr	r3, [pc, #780]	; (2018 <STACK_SIZE+0x18>)
    1d0c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1d0e:	9802      	ldr	r0, [sp, #8]
    1d10:	4bc2      	ldr	r3, [pc, #776]	; (201c <STACK_SIZE+0x1c>)
    1d12:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1d14:	5df0      	ldrb	r0, [r6, r7]
    1d16:	2100      	movs	r1, #0
    1d18:	4bc1      	ldr	r3, [pc, #772]	; (2020 <STACK_SIZE+0x20>)
    1d1a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1d1c:	7af3      	ldrb	r3, [r6, #11]
    1d1e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1d20:	232c      	movs	r3, #44	; 0x2c
    1d22:	5cf3      	ldrb	r3, [r6, r3]
    1d24:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1d26:	232d      	movs	r3, #45	; 0x2d
    1d28:	5cf3      	ldrb	r3, [r6, r3]
    1d2a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1d2c:	7ef3      	ldrb	r3, [r6, #27]
    1d2e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1d30:	2324      	movs	r3, #36	; 0x24
    1d32:	5cf3      	ldrb	r3, [r6, r3]
    1d34:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d36:	682b      	ldr	r3, [r5, #0]
    1d38:	4698      	mov	r8, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1d3a:	1c18      	adds	r0, r3, #0
    1d3c:	4bb4      	ldr	r3, [pc, #720]	; (2010 <STACK_SIZE+0x10>)
    1d3e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1d40:	3013      	adds	r0, #19
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1d42:	2200      	movs	r2, #0
    1d44:	230e      	movs	r3, #14
    1d46:	a906      	add	r1, sp, #24
    1d48:	468c      	mov	ip, r1
    1d4a:	4463      	add	r3, ip
    1d4c:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1d4e:	8a33      	ldrh	r3, [r6, #16]
    1d50:	469a      	mov	sl, r3
    1d52:	2380      	movs	r3, #128	; 0x80
    1d54:	01db      	lsls	r3, r3, #7
    1d56:	459a      	cmp	sl, r3
    1d58:	d019      	beq.n	1d8e <usart_init+0xd2>
    1d5a:	d804      	bhi.n	1d66 <usart_init+0xaa>
    1d5c:	2380      	movs	r3, #128	; 0x80
    1d5e:	019b      	lsls	r3, r3, #6
    1d60:	459a      	cmp	sl, r3
    1d62:	d00a      	beq.n	1d7a <usart_init+0xbe>
    1d64:	e12d      	b.n	1fc2 <usart_init+0x306>
    1d66:	23c0      	movs	r3, #192	; 0xc0
    1d68:	01db      	lsls	r3, r3, #7
    1d6a:	459a      	cmp	sl, r3
    1d6c:	d00a      	beq.n	1d84 <usart_init+0xc8>
    1d6e:	2380      	movs	r3, #128	; 0x80
    1d70:	021b      	lsls	r3, r3, #8
    1d72:	459a      	cmp	sl, r3
    1d74:	d100      	bne.n	1d78 <usart_init+0xbc>
    1d76:	e129      	b.n	1fcc <usart_init+0x310>
    1d78:	e123      	b.n	1fc2 <usart_init+0x306>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1d7a:	2310      	movs	r3, #16
    1d7c:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1d7e:	3b0f      	subs	r3, #15
    1d80:	9307      	str	r3, [sp, #28]
    1d82:	e127      	b.n	1fd4 <usart_init+0x318>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1d84:	2308      	movs	r3, #8
    1d86:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1d88:	3b07      	subs	r3, #7
    1d8a:	9307      	str	r3, [sp, #28]
    1d8c:	e122      	b.n	1fd4 <usart_init+0x318>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1d8e:	6833      	ldr	r3, [r6, #0]
    1d90:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1d92:	68f3      	ldr	r3, [r6, #12]
    1d94:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1d96:	6973      	ldr	r3, [r6, #20]
    1d98:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d9a:	7e33      	ldrb	r3, [r6, #24]
    1d9c:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d9e:	232e      	movs	r3, #46	; 0x2e
    1da0:	5cf3      	ldrb	r3, [r6, r3]
    1da2:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1da4:	6872      	ldr	r2, [r6, #4]
    1da6:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1da8:	2a00      	cmp	r2, #0
    1daa:	d015      	beq.n	1dd8 <usart_init+0x11c>
    1dac:	2380      	movs	r3, #128	; 0x80
    1dae:	055b      	lsls	r3, r3, #21
    1db0:	429a      	cmp	r2, r3
    1db2:	d136      	bne.n	1e22 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1db4:	232f      	movs	r3, #47	; 0x2f
    1db6:	5cf3      	ldrb	r3, [r6, r3]
    1db8:	2b00      	cmp	r3, #0
    1dba:	d136      	bne.n	1e2a <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1dbc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1dbe:	4699      	mov	r9, r3
    1dc0:	b2c0      	uxtb	r0, r0
    1dc2:	4b98      	ldr	r3, [pc, #608]	; (2024 <STACK_SIZE+0x24>)
    1dc4:	4798      	blx	r3
    1dc6:	1c01      	adds	r1, r0, #0
    1dc8:	4648      	mov	r0, r9
    1dca:	220e      	movs	r2, #14
    1dcc:	ab06      	add	r3, sp, #24
    1dce:	469c      	mov	ip, r3
    1dd0:	4462      	add	r2, ip
    1dd2:	4b95      	ldr	r3, [pc, #596]	; (2028 <STACK_SIZE+0x28>)
    1dd4:	4798      	blx	r3
    1dd6:	e025      	b.n	1e24 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1dd8:	2308      	movs	r3, #8
    1dda:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1ddc:	2300      	movs	r3, #0
    1dde:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1de0:	232f      	movs	r3, #47	; 0x2f
    1de2:	5cf3      	ldrb	r3, [r6, r3]
    1de4:	2b00      	cmp	r3, #0
    1de6:	d00b      	beq.n	1e00 <usart_init+0x144>
				status_code =
    1de8:	464b      	mov	r3, r9
    1dea:	9300      	str	r3, [sp, #0]
    1dec:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1dee:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1df0:	220e      	movs	r2, #14
    1df2:	ab06      	add	r3, sp, #24
    1df4:	469c      	mov	ip, r3
    1df6:	4462      	add	r2, ip
    1df8:	9b07      	ldr	r3, [sp, #28]
    1dfa:	4f8c      	ldr	r7, [pc, #560]	; (202c <STACK_SIZE+0x2c>)
    1dfc:	47b8      	blx	r7
    1dfe:	e011      	b.n	1e24 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1e00:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1e02:	1c1f      	adds	r7, r3, #0
    1e04:	b2c0      	uxtb	r0, r0
    1e06:	4b87      	ldr	r3, [pc, #540]	; (2024 <STACK_SIZE+0x24>)
    1e08:	4798      	blx	r3
    1e0a:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1e0c:	464b      	mov	r3, r9
    1e0e:	9300      	str	r3, [sp, #0]
    1e10:	1c38      	adds	r0, r7, #0
    1e12:	220e      	movs	r2, #14
    1e14:	ab06      	add	r3, sp, #24
    1e16:	469c      	mov	ip, r3
    1e18:	4462      	add	r2, ip
    1e1a:	9b07      	ldr	r3, [sp, #28]
    1e1c:	4f83      	ldr	r7, [pc, #524]	; (202c <STACK_SIZE+0x2c>)
    1e1e:	47b8      	blx	r7
    1e20:	e000      	b.n	1e24 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    1e22:	2000      	movs	r0, #0
    1e24:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1e26:	d000      	beq.n	1e2a <usart_init+0x16e>
    1e28:	e0ea      	b.n	2000 <STACK_SIZE>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1e2a:	7e73      	ldrb	r3, [r6, #25]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d002      	beq.n	1e36 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1e30:	7eb3      	ldrb	r3, [r6, #26]
    1e32:	4642      	mov	r2, r8
    1e34:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1e36:	682a      	ldr	r2, [r5, #0]
    1e38:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1e3a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d1fc      	bne.n	1e3a <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1e40:	330e      	adds	r3, #14
    1e42:	aa06      	add	r2, sp, #24
    1e44:	4694      	mov	ip, r2
    1e46:	4463      	add	r3, ip
    1e48:	881b      	ldrh	r3, [r3, #0]
    1e4a:	4642      	mov	r2, r8
    1e4c:	8193      	strh	r3, [r2, #12]
    1e4e:	9b02      	ldr	r3, [sp, #8]
    1e50:	465a      	mov	r2, fp
    1e52:	4313      	orrs	r3, r2
    1e54:	9a03      	ldr	r2, [sp, #12]
    1e56:	4313      	orrs	r3, r2
    1e58:	433b      	orrs	r3, r7
    1e5a:	4652      	mov	r2, sl
    1e5c:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e5e:	9a04      	ldr	r2, [sp, #16]
    1e60:	0212      	lsls	r2, r2, #8
    1e62:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e64:	9a05      	ldr	r2, [sp, #20]
    1e66:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    1e68:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1e6a:	232f      	movs	r3, #47	; 0x2f
    1e6c:	5cf3      	ldrb	r3, [r6, r3]
    1e6e:	2b00      	cmp	r3, #0
    1e70:	d101      	bne.n	1e76 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1e72:	3304      	adds	r3, #4
    1e74:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e76:	2324      	movs	r3, #36	; 0x24
    1e78:	5cf3      	ldrb	r3, [r6, r3]
    1e7a:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e7c:	7e72      	ldrb	r2, [r6, #25]
    1e7e:	0293      	lsls	r3, r2, #10
    1e80:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e82:	2226      	movs	r2, #38	; 0x26
    1e84:	5cb2      	ldrb	r2, [r6, r2]
    1e86:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1e88:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e8a:	222c      	movs	r2, #44	; 0x2c
    1e8c:	5cb2      	ldrb	r2, [r6, r2]
    1e8e:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1e90:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1e92:	222d      	movs	r2, #45	; 0x2d
    1e94:	5cb2      	ldrb	r2, [r6, r2]
    1e96:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1e98:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1e9a:	7af1      	ldrb	r1, [r6, #11]
    1e9c:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1e9e:	8933      	ldrh	r3, [r6, #8]
    1ea0:	2bff      	cmp	r3, #255	; 0xff
    1ea2:	d004      	beq.n	1eae <usart_init+0x1f2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1ea4:	2280      	movs	r2, #128	; 0x80
    1ea6:	0452      	lsls	r2, r2, #17
    1ea8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1eaa:	4319      	orrs	r1, r3
    1eac:	e005      	b.n	1eba <usart_init+0x1fe>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1eae:	7ef3      	ldrb	r3, [r6, #27]
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d002      	beq.n	1eba <usart_init+0x1fe>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1eb4:	2380      	movs	r3, #128	; 0x80
    1eb6:	04db      	lsls	r3, r3, #19
    1eb8:	431f      	orrs	r7, r3
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1eba:	4643      	mov	r3, r8
    1ebc:	689a      	ldr	r2, [r3, #8]
						| config->lin_header_delay
    1ebe:	8c30      	ldrh	r0, [r6, #32]
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1ec0:	2307      	movs	r3, #7
    1ec2:	4013      	ands	r3, r2
						| config->lin_header_delay
    1ec4:	4303      	orrs	r3, r0
						| config->lin_break_length;
    1ec6:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    1ec8:	4313      	orrs	r3, r2
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1eca:	4642      	mov	r2, r8
    1ecc:	6093      	str	r3, [r2, #8]
						| config->lin_header_delay
						| config->lin_break_length;

	if (config->lin_node != LIN_INVALID_MODE) {
    1ece:	69f3      	ldr	r3, [r6, #28]
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	d002      	beq.n	1eda <usart_init+0x21e>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1ed4:	4a56      	ldr	r2, [pc, #344]	; (2030 <STACK_SIZE+0x30>)
    1ed6:	4017      	ands	r7, r2
		ctrla |= config->lin_node;
    1ed8:	431f      	orrs	r7, r3
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1eda:	2334      	movs	r3, #52	; 0x34
    1edc:	5cf3      	ldrb	r3, [r6, r3]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d103      	bne.n	1eea <usart_init+0x22e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1ee2:	4b54      	ldr	r3, [pc, #336]	; (2034 <STACK_SIZE+0x34>)
    1ee4:	789b      	ldrb	r3, [r3, #2]
    1ee6:	079b      	lsls	r3, r3, #30
    1ee8:	d501      	bpl.n	1eee <usart_init+0x232>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1eea:	2380      	movs	r3, #128	; 0x80
    1eec:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1eee:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1ef0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d1fc      	bne.n	1ef0 <usart_init+0x234>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1ef6:	4643      	mov	r3, r8
    1ef8:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1efa:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1efc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1efe:	2b00      	cmp	r3, #0
    1f00:	d1fc      	bne.n	1efc <usart_init+0x240>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1f02:	4643      	mov	r3, r8
    1f04:	601f      	str	r7, [r3, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1f06:	681a      	ldr	r2, [r3, #0]
    1f08:	23f0      	movs	r3, #240	; 0xf0
    1f0a:	051b      	lsls	r3, r3, #20
    1f0c:	4013      	ands	r3, r2
    1f0e:	22e0      	movs	r2, #224	; 0xe0
    1f10:	04d2      	lsls	r2, r2, #19
    1f12:	4293      	cmp	r3, r2
    1f14:	d042      	beq.n	1f9c <usart_init+0x2e0>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1f16:	4643      	mov	r3, r8
    1f18:	689b      	ldr	r3, [r3, #8]
    1f1a:	2207      	movs	r2, #7
    1f1c:	4393      	bics	r3, r2
    1f1e:	4642      	mov	r2, r8
    1f20:	6093      	str	r3, [r2, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1f22:	6892      	ldr	r2, [r2, #8]
    1f24:	2325      	movs	r3, #37	; 0x25
    1f26:	5cf3      	ldrb	r3, [r6, r3]
    1f28:	2107      	movs	r1, #7
    1f2a:	400b      	ands	r3, r1
    1f2c:	4313      	orrs	r3, r2
    1f2e:	4642      	mov	r2, r8
    1f30:	6093      	str	r3, [r2, #8]
    1f32:	e033      	b.n	1f9c <usart_init+0x2e0>
    1f34:	b2f9      	uxtb	r1, r7
    1f36:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f38:	aa0a      	add	r2, sp, #40	; 0x28
    1f3a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1f3c:	2800      	cmp	r0, #0
    1f3e:	d102      	bne.n	1f46 <usart_init+0x28a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1f40:	1c20      	adds	r0, r4, #0
    1f42:	4b3d      	ldr	r3, [pc, #244]	; (2038 <STACK_SIZE+0x38>)
    1f44:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1f46:	1c43      	adds	r3, r0, #1
    1f48:	d005      	beq.n	1f56 <usart_init+0x29a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1f4a:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1f4c:	0c00      	lsrs	r0, r0, #16
    1f4e:	b2c0      	uxtb	r0, r0
    1f50:	1c31      	adds	r1, r6, #0
    1f52:	4b3a      	ldr	r3, [pc, #232]	; (203c <STACK_SIZE+0x3c>)
    1f54:	4798      	blx	r3
    1f56:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1f58:	2f04      	cmp	r7, #4
    1f5a:	d1eb      	bne.n	1f34 <usart_init+0x278>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1f5c:	2300      	movs	r3, #0
    1f5e:	60eb      	str	r3, [r5, #12]
    1f60:	612b      	str	r3, [r5, #16]
    1f62:	616b      	str	r3, [r5, #20]
    1f64:	61ab      	str	r3, [r5, #24]
    1f66:	61eb      	str	r3, [r5, #28]
    1f68:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1f6a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1f6c:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1f6e:	2200      	movs	r2, #0
    1f70:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1f72:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1f74:	3330      	adds	r3, #48	; 0x30
    1f76:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1f78:	3301      	adds	r3, #1
    1f7a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1f7c:	3301      	adds	r3, #1
    1f7e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1f80:	3301      	adds	r3, #1
    1f82:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1f84:	6828      	ldr	r0, [r5, #0]
    1f86:	4b22      	ldr	r3, [pc, #136]	; (2010 <STACK_SIZE+0x10>)
    1f88:	4798      	blx	r3
    1f8a:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1f8c:	492c      	ldr	r1, [pc, #176]	; (2040 <STACK_SIZE+0x40>)
    1f8e:	4b2d      	ldr	r3, [pc, #180]	; (2044 <STACK_SIZE+0x44>)
    1f90:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1f92:	00a4      	lsls	r4, r4, #2
    1f94:	4b2c      	ldr	r3, [pc, #176]	; (2048 <STACK_SIZE+0x48>)
    1f96:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1f98:	2300      	movs	r3, #0
    1f9a:	e031      	b.n	2000 <STACK_SIZE>
    1f9c:	ab0e      	add	r3, sp, #56	; 0x38
    1f9e:	2280      	movs	r2, #128	; 0x80
    1fa0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1fa2:	2200      	movs	r2, #0
    1fa4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1fa6:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1fa8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    1faa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1fac:	930a      	str	r3, [sp, #40]	; 0x28
    1fae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1fb0:	930b      	str	r3, [sp, #44]	; 0x2c
    1fb2:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1fb4:	930c      	str	r3, [sp, #48]	; 0x30
    1fb6:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1fb8:	9302      	str	r3, [sp, #8]
    1fba:	930d      	str	r3, [sp, #52]	; 0x34
    1fbc:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1fbe:	ae0e      	add	r6, sp, #56	; 0x38
    1fc0:	e7b8      	b.n	1f34 <usart_init+0x278>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1fc2:	2310      	movs	r3, #16
    1fc4:	4699      	mov	r9, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1fc6:	2300      	movs	r3, #0
    1fc8:	9307      	str	r3, [sp, #28]
    1fca:	e003      	b.n	1fd4 <usart_init+0x318>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1fcc:	2303      	movs	r3, #3
    1fce:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1fd0:	2300      	movs	r3, #0
    1fd2:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1fd4:	6833      	ldr	r3, [r6, #0]
    1fd6:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1fd8:	68f3      	ldr	r3, [r6, #12]
    1fda:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1fdc:	6973      	ldr	r3, [r6, #20]
    1fde:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1fe0:	7e33      	ldrb	r3, [r6, #24]
    1fe2:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1fe4:	232e      	movs	r3, #46	; 0x2e
    1fe6:	5cf3      	ldrb	r3, [r6, r3]
    1fe8:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1fea:	6872      	ldr	r2, [r6, #4]
    1fec:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1fee:	2a00      	cmp	r2, #0
    1ff0:	d100      	bne.n	1ff4 <usart_init+0x338>
    1ff2:	e6f5      	b.n	1de0 <usart_init+0x124>
    1ff4:	2380      	movs	r3, #128	; 0x80
    1ff6:	055b      	lsls	r3, r3, #21
    1ff8:	429a      	cmp	r2, r3
    1ffa:	d100      	bne.n	1ffe <usart_init+0x342>
    1ffc:	e6da      	b.n	1db4 <usart_init+0xf8>
    1ffe:	e714      	b.n	1e2a <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2000:	1c18      	adds	r0, r3, #0
    2002:	b011      	add	sp, #68	; 0x44
    2004:	bc3c      	pop	{r2, r3, r4, r5}
    2006:	4690      	mov	r8, r2
    2008:	4699      	mov	r9, r3
    200a:	46a2      	mov	sl, r4
    200c:	46ab      	mov	fp, r5
    200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2010:	00001bb5 	.word	0x00001bb5
    2014:	40000800 	.word	0x40000800
    2018:	000028d1 	.word	0x000028d1
    201c:	00002869 	.word	0x00002869
    2020:	000019dd 	.word	0x000019dd
    2024:	000028f5 	.word	0x000028f5
    2028:	000017ed 	.word	0x000017ed
    202c:	00001815 	.word	0x00001815
    2030:	f0ffffff 	.word	0xf0ffffff
    2034:	41002000 	.word	0x41002000
    2038:	00001a29 	.word	0x00001a29
    203c:	000029cd 	.word	0x000029cd
    2040:	000020e9 	.word	0x000020e9
    2044:	00001bf5 	.word	0x00001bf5
    2048:	20000b3c 	.word	0x20000b3c

0000204c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    204c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    204e:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2050:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2052:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2054:	2c00      	cmp	r4, #0
    2056:	d00d      	beq.n	2074 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2058:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
    205a:	b280      	uxth	r0, r0
		return STATUS_BUSY;
    205c:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    205e:	2800      	cmp	r0, #0
    2060:	d108      	bne.n	2074 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2062:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2064:	2a00      	cmp	r2, #0
    2066:	d1fc      	bne.n	2062 <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    2068:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    206a:	2102      	movs	r1, #2
    206c:	7e1a      	ldrb	r2, [r3, #24]
    206e:	420a      	tst	r2, r1
    2070:	d0fc      	beq.n	206c <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2072:	2200      	movs	r2, #0
}
    2074:	1c10      	adds	r0, r2, #0
    2076:	bd10      	pop	{r4, pc}

00002078 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2078:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    207a:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    207c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    207e:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2080:	2a00      	cmp	r2, #0
    2082:	d02f      	beq.n	20e4 <usart_read_wait+0x6c>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2084:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2086:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2088:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    208a:	2a00      	cmp	r2, #0
    208c:	d12a      	bne.n	20e4 <usart_read_wait+0x6c>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    208e:	7e22      	ldrb	r2, [r4, #24]
    2090:	0752      	lsls	r2, r2, #29
    2092:	d527      	bpl.n	20e4 <usart_read_wait+0x6c>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2094:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2096:	2b00      	cmp	r3, #0
    2098:	d1fc      	bne.n	2094 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    209a:	8b63      	ldrh	r3, [r4, #26]
    209c:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    209e:	065a      	lsls	r2, r3, #25
    20a0:	d01d      	beq.n	20de <usart_read_wait+0x66>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    20a2:	079a      	lsls	r2, r3, #30
    20a4:	d503      	bpl.n	20ae <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    20a6:	2302      	movs	r3, #2
    20a8:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    20aa:	3318      	adds	r3, #24
    20ac:	e01a      	b.n	20e4 <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    20ae:	075a      	lsls	r2, r3, #29
    20b0:	d503      	bpl.n	20ba <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    20b2:	2304      	movs	r3, #4
    20b4:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    20b6:	331a      	adds	r3, #26
    20b8:	e014      	b.n	20e4 <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    20ba:	07da      	lsls	r2, r3, #31
    20bc:	d503      	bpl.n	20c6 <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    20be:	2301      	movs	r3, #1
    20c0:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    20c2:	3312      	adds	r3, #18
    20c4:	e00e      	b.n	20e4 <usart_read_wait+0x6c>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    20c6:	06da      	lsls	r2, r3, #27
    20c8:	d503      	bpl.n	20d2 <usart_read_wait+0x5a>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    20ca:	2310      	movs	r3, #16
    20cc:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    20ce:	3332      	adds	r3, #50	; 0x32
    20d0:	e008      	b.n	20e4 <usart_read_wait+0x6c>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    20d2:	069b      	lsls	r3, r3, #26
    20d4:	d503      	bpl.n	20de <usart_read_wait+0x66>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    20d6:	2320      	movs	r3, #32
    20d8:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    20da:	3321      	adds	r3, #33	; 0x21
    20dc:	e002      	b.n	20e4 <usart_read_wait+0x6c>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    20de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    20e0:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    20e2:	2300      	movs	r3, #0
}
    20e4:	1c18      	adds	r0, r3, #0
    20e6:	bd10      	pop	{r4, pc}

000020e8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    20e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    20ea:	0080      	lsls	r0, r0, #2
    20ec:	4b61      	ldr	r3, [pc, #388]	; (2274 <_usart_interrupt_handler+0x18c>)
    20ee:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    20f0:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    20f2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    20f4:	2b00      	cmp	r3, #0
    20f6:	d1fc      	bne.n	20f2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    20f8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    20fa:	7da6      	ldrb	r6, [r4, #22]
    20fc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    20fe:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    2100:	5ceb      	ldrb	r3, [r5, r3]
    2102:	2230      	movs	r2, #48	; 0x30
    2104:	5caf      	ldrb	r7, [r5, r2]
    2106:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2108:	07f3      	lsls	r3, r6, #31
    210a:	d522      	bpl.n	2152 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    210c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    210e:	b29b      	uxth	r3, r3
    2110:	2b00      	cmp	r3, #0
    2112:	d01c      	beq.n	214e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2114:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2116:	7813      	ldrb	r3, [r2, #0]
    2118:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    211a:	1c51      	adds	r1, r2, #1
    211c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    211e:	7969      	ldrb	r1, [r5, #5]
    2120:	2901      	cmp	r1, #1
    2122:	d001      	beq.n	2128 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2124:	b29b      	uxth	r3, r3
    2126:	e004      	b.n	2132 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2128:	7851      	ldrb	r1, [r2, #1]
    212a:	0209      	lsls	r1, r1, #8
    212c:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    212e:	3202      	adds	r2, #2
    2130:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2132:	05db      	lsls	r3, r3, #23
    2134:	0ddb      	lsrs	r3, r3, #23
    2136:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2138:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    213a:	3b01      	subs	r3, #1
    213c:	b29b      	uxth	r3, r3
    213e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2140:	2b00      	cmp	r3, #0
    2142:	d106      	bne.n	2152 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2144:	3301      	adds	r3, #1
    2146:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2148:	3301      	adds	r3, #1
    214a:	75a3      	strb	r3, [r4, #22]
    214c:	e001      	b.n	2152 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    214e:	2301      	movs	r3, #1
    2150:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2152:	07b3      	lsls	r3, r6, #30
    2154:	d509      	bpl.n	216a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2156:	2302      	movs	r3, #2
    2158:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    215a:	2200      	movs	r2, #0
    215c:	3331      	adds	r3, #49	; 0x31
    215e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2160:	07fb      	lsls	r3, r7, #31
    2162:	d502      	bpl.n	216a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2164:	1c28      	adds	r0, r5, #0
    2166:	68eb      	ldr	r3, [r5, #12]
    2168:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    216a:	0773      	lsls	r3, r6, #29
    216c:	d563      	bpl.n	2236 <_usart_interrupt_handler+0x14e>

		if (module->remaining_rx_buffer_length) {
    216e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2170:	b29b      	uxth	r3, r3
    2172:	2b00      	cmp	r3, #0
    2174:	d05d      	beq.n	2232 <_usart_interrupt_handler+0x14a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2176:	8b63      	ldrh	r3, [r4, #26]
    2178:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    217a:	071a      	lsls	r2, r3, #28
    217c:	d402      	bmi.n	2184 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    217e:	227f      	movs	r2, #127	; 0x7f
    2180:	4013      	ands	r3, r2
    2182:	e001      	b.n	2188 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2184:	2277      	movs	r2, #119	; 0x77
    2186:	4013      	ands	r3, r2
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    2188:	065a      	lsls	r2, r3, #25
    218a:	d501      	bpl.n	2190 <_usart_interrupt_handler+0xa8>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    218c:	2240      	movs	r2, #64	; 0x40
    218e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2190:	2b00      	cmp	r3, #0
    2192:	d02c      	beq.n	21ee <_usart_interrupt_handler+0x106>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2194:	079a      	lsls	r2, r3, #30
    2196:	d505      	bpl.n	21a4 <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2198:	221a      	movs	r2, #26
    219a:	2332      	movs	r3, #50	; 0x32
    219c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    219e:	3b30      	subs	r3, #48	; 0x30
    21a0:	8363      	strh	r3, [r4, #26]
    21a2:	e01e      	b.n	21e2 <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    21a4:	075a      	lsls	r2, r3, #29
    21a6:	d505      	bpl.n	21b4 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    21a8:	221e      	movs	r2, #30
    21aa:	2332      	movs	r3, #50	; 0x32
    21ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    21ae:	3b2e      	subs	r3, #46	; 0x2e
    21b0:	8363      	strh	r3, [r4, #26]
    21b2:	e016      	b.n	21e2 <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    21b4:	07da      	lsls	r2, r3, #31
    21b6:	d505      	bpl.n	21c4 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    21b8:	2213      	movs	r2, #19
    21ba:	2332      	movs	r3, #50	; 0x32
    21bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    21be:	3b31      	subs	r3, #49	; 0x31
    21c0:	8363      	strh	r3, [r4, #26]
    21c2:	e00e      	b.n	21e2 <_usart_interrupt_handler+0xfa>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    21c4:	06da      	lsls	r2, r3, #27
    21c6:	d505      	bpl.n	21d4 <_usart_interrupt_handler+0xec>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    21c8:	2242      	movs	r2, #66	; 0x42
    21ca:	2332      	movs	r3, #50	; 0x32
    21cc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    21ce:	3b22      	subs	r3, #34	; 0x22
    21d0:	8363      	strh	r3, [r4, #26]
    21d2:	e006      	b.n	21e2 <_usart_interrupt_handler+0xfa>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    21d4:	069b      	lsls	r3, r3, #26
    21d6:	d504      	bpl.n	21e2 <_usart_interrupt_handler+0xfa>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    21d8:	2241      	movs	r2, #65	; 0x41
    21da:	2332      	movs	r3, #50	; 0x32
    21dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    21de:	3b12      	subs	r3, #18
    21e0:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    21e2:	077b      	lsls	r3, r7, #29
    21e4:	d527      	bpl.n	2236 <_usart_interrupt_handler+0x14e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    21e6:	1c28      	adds	r0, r5, #0
    21e8:	696b      	ldr	r3, [r5, #20]
    21ea:	4798      	blx	r3
    21ec:	e023      	b.n	2236 <_usart_interrupt_handler+0x14e>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    21ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    21f0:	05db      	lsls	r3, r3, #23
    21f2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    21f4:	b2da      	uxtb	r2, r3
    21f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    21f8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    21fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    21fc:	1c51      	adds	r1, r2, #1
    21fe:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2200:	7969      	ldrb	r1, [r5, #5]
    2202:	2901      	cmp	r1, #1
    2204:	d104      	bne.n	2210 <_usart_interrupt_handler+0x128>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2206:	0a1b      	lsrs	r3, r3, #8
    2208:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    220a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    220c:	3301      	adds	r3, #1
    220e:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2210:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2212:	3b01      	subs	r3, #1
    2214:	b29b      	uxth	r3, r3
    2216:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2218:	2b00      	cmp	r3, #0
    221a:	d10c      	bne.n	2236 <_usart_interrupt_handler+0x14e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    221c:	3304      	adds	r3, #4
    221e:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2220:	2200      	movs	r2, #0
    2222:	332e      	adds	r3, #46	; 0x2e
    2224:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2226:	07bb      	lsls	r3, r7, #30
    2228:	d505      	bpl.n	2236 <_usart_interrupt_handler+0x14e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    222a:	1c28      	adds	r0, r5, #0
    222c:	692b      	ldr	r3, [r5, #16]
    222e:	4798      	blx	r3
    2230:	e001      	b.n	2236 <_usart_interrupt_handler+0x14e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2232:	2304      	movs	r3, #4
    2234:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2236:	06f3      	lsls	r3, r6, #27
    2238:	d507      	bpl.n	224a <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    223a:	2310      	movs	r3, #16
    223c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    223e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2240:	06fb      	lsls	r3, r7, #27
    2242:	d502      	bpl.n	224a <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2244:	1c28      	adds	r0, r5, #0
    2246:	69eb      	ldr	r3, [r5, #28]
    2248:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    224a:	06b3      	lsls	r3, r6, #26
    224c:	d507      	bpl.n	225e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    224e:	2320      	movs	r3, #32
    2250:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2252:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2254:	073b      	lsls	r3, r7, #28
    2256:	d502      	bpl.n	225e <_usart_interrupt_handler+0x176>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2258:	1c28      	adds	r0, r5, #0
    225a:	69ab      	ldr	r3, [r5, #24]
    225c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    225e:	0733      	lsls	r3, r6, #28
    2260:	d507      	bpl.n	2272 <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2262:	2308      	movs	r3, #8
    2264:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2266:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2268:	06bb      	lsls	r3, r7, #26
    226a:	d502      	bpl.n	2272 <_usart_interrupt_handler+0x18a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    226c:	6a2b      	ldr	r3, [r5, #32]
    226e:	1c28      	adds	r0, r5, #0
    2270:	4798      	blx	r3
		}
	}
#endif
}
    2272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2274:	20000b3c 	.word	0x20000b3c

00002278 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2278:	b508      	push	{r3, lr}
	switch (clock_source) {
    227a:	2807      	cmp	r0, #7
    227c:	d803      	bhi.n	2286 <system_clock_source_get_hz+0xe>
    227e:	0080      	lsls	r0, r0, #2
    2280:	4b0f      	ldr	r3, [pc, #60]	; (22c0 <system_clock_source_get_hz+0x48>)
    2282:	581b      	ldr	r3, [r3, r0]
    2284:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    2286:	2000      	movs	r0, #0
    2288:	e018      	b.n	22bc <system_clock_source_get_hz+0x44>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    228a:	4b0e      	ldr	r3, [pc, #56]	; (22c4 <system_clock_source_get_hz+0x4c>)
    228c:	6858      	ldr	r0, [r3, #4]
    228e:	e015      	b.n	22bc <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    2290:	4b0d      	ldr	r3, [pc, #52]	; (22c8 <system_clock_source_get_hz+0x50>)
    2292:	7d5b      	ldrb	r3, [r3, #21]
    2294:	210f      	movs	r1, #15
    2296:	4019      	ands	r1, r3
    2298:	3101      	adds	r1, #1
    229a:	480c      	ldr	r0, [pc, #48]	; (22cc <system_clock_source_get_hz+0x54>)
    229c:	4b0c      	ldr	r3, [pc, #48]	; (22d0 <system_clock_source_get_hz+0x58>)
    229e:	4798      	blx	r3
    22a0:	e00c      	b.n	22bc <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    22a2:	4b08      	ldr	r3, [pc, #32]	; (22c4 <system_clock_source_get_hz+0x4c>)
    22a4:	6898      	ldr	r0, [r3, #8]
    22a6:	e009      	b.n	22bc <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    22a8:	4b07      	ldr	r3, [pc, #28]	; (22c8 <system_clock_source_get_hz+0x50>)
    22aa:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    22ac:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    22ae:	079b      	lsls	r3, r3, #30
    22b0:	d504      	bpl.n	22bc <system_clock_source_get_hz+0x44>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    22b2:	4b04      	ldr	r3, [pc, #16]	; (22c4 <system_clock_source_get_hz+0x4c>)
    22b4:	6818      	ldr	r0, [r3, #0]
    22b6:	e001      	b.n	22bc <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    22b8:	2080      	movs	r0, #128	; 0x80
    22ba:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    22bc:	bd08      	pop	{r3, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	00005104 	.word	0x00005104
    22c4:	20000ac4 	.word	0x20000ac4
    22c8:	40001000 	.word	0x40001000
    22cc:	02dc6c00 	.word	0x02dc6c00
    22d0:	00002b9d 	.word	0x00002b9d

000022d4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    22d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d6:	4657      	mov	r7, sl
    22d8:	464e      	mov	r6, r9
    22da:	4645      	mov	r5, r8
    22dc:	b4e0      	push	{r5, r6, r7}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    22de:	4e1c      	ldr	r6, [pc, #112]	; (2350 <system_clock_source_osc32k_set_config+0x7c>)
    22e0:	69b3      	ldr	r3, [r6, #24]
    22e2:	469c      	mov	ip, r3


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    22e4:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    22e6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    22e8:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    22ea:	78c3      	ldrb	r3, [r0, #3]
    22ec:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    22ee:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    22f0:	7883      	ldrb	r3, [r0, #2]
    22f2:	2001      	movs	r0, #1
    22f4:	4003      	ands	r3, r0
    22f6:	009b      	lsls	r3, r3, #2
    22f8:	469a      	mov	sl, r3
    22fa:	2204      	movs	r2, #4
    22fc:	4690      	mov	r8, r2
    22fe:	4662      	mov	r2, ip
    2300:	4643      	mov	r3, r8
    2302:	439a      	bics	r2, r3
    2304:	1c13      	adds	r3, r2, #0
    2306:	4652      	mov	r2, sl
    2308:	431a      	orrs	r2, r3
    230a:	1c13      	adds	r3, r2, #0
    230c:	4001      	ands	r1, r0
    230e:	00c9      	lsls	r1, r1, #3
    2310:	2208      	movs	r2, #8
    2312:	4393      	bics	r3, r2
    2314:	430b      	orrs	r3, r1
    2316:	464a      	mov	r2, r9
    2318:	4002      	ands	r2, r0
    231a:	0192      	lsls	r2, r2, #6
    231c:	2140      	movs	r1, #64	; 0x40
    231e:	438b      	bics	r3, r1
    2320:	4313      	orrs	r3, r2
    2322:	4007      	ands	r7, r0
    2324:	01ff      	lsls	r7, r7, #7
    2326:	2280      	movs	r2, #128	; 0x80
    2328:	4393      	bics	r3, r2
    232a:	433b      	orrs	r3, r7
    232c:	3a79      	subs	r2, #121	; 0x79
    232e:	4015      	ands	r5, r2
    2330:	022d      	lsls	r5, r5, #8
    2332:	4f08      	ldr	r7, [pc, #32]	; (2354 <system_clock_source_osc32k_set_config+0x80>)
    2334:	403b      	ands	r3, r7
    2336:	432b      	orrs	r3, r5
    2338:	4004      	ands	r4, r0
    233a:	0320      	lsls	r0, r4, #12
    233c:	4c06      	ldr	r4, [pc, #24]	; (2358 <system_clock_source_osc32k_set_config+0x84>)
    233e:	401c      	ands	r4, r3
    2340:	4304      	orrs	r4, r0
    2342:	61b4      	str	r4, [r6, #24]
}
    2344:	bc1c      	pop	{r2, r3, r4}
    2346:	4690      	mov	r8, r2
    2348:	4699      	mov	r9, r3
    234a:	46a2      	mov	sl, r4
    234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	40001400 	.word	0x40001400
    2354:	fffff8ff 	.word	0xfffff8ff
    2358:	ffffefff 	.word	0xffffefff

0000235c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    235c:	b5f0      	push	{r4, r5, r6, r7, lr}
    235e:	465f      	mov	r7, fp
    2360:	4656      	mov	r6, sl
    2362:	464d      	mov	r5, r9
    2364:	4644      	mov	r4, r8
    2366:	b4f0      	push	{r4, r5, r6, r7}
    2368:	b083      	sub	sp, #12
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    236a:	4f30      	ldr	r7, [pc, #192]	; (242c <system_clock_source_xosc32k_set_config+0xd0>)
    236c:	8abb      	ldrh	r3, [r7, #20]
    236e:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    2370:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2372:	7803      	ldrb	r3, [r0, #0]
    2374:	425a      	negs	r2, r3
    2376:	415a      	adcs	r2, r3
    2378:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    237a:	7883      	ldrb	r3, [r0, #2]
    237c:	469b      	mov	fp, r3
	temp.bit.EN32K = config->enable_32khz_output;
    237e:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    2380:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2382:	7a02      	ldrb	r2, [r0, #8]
    2384:	9200      	str	r2, [sp, #0]
	temp.bit.WRTLOCK  = config->write_once;
    2386:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2388:	4a29      	ldr	r2, [pc, #164]	; (2430 <system_clock_source_xosc32k_set_config+0xd4>)
    238a:	6841      	ldr	r1, [r0, #4]
    238c:	6091      	str	r1, [r2, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    238e:	7ac2      	ldrb	r2, [r0, #11]
    2390:	0092      	lsls	r2, r2, #2
    2392:	4692      	mov	sl, r2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    2394:	7b82      	ldrb	r2, [r0, #14]
    2396:	0052      	lsls	r2, r2, #1
    2398:	4691      	mov	r9, r2
    239a:	4652      	mov	r2, sl
    239c:	4649      	mov	r1, r9
    239e:	430a      	orrs	r2, r1
    23a0:	4691      	mov	r9, r2

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;

	OSC32KCTRL->CFDCTRL.reg =
    23a2:	7b42      	ldrb	r2, [r0, #13]
    23a4:	4692      	mov	sl, r2
    23a6:	464a      	mov	r2, r9
    23a8:	4651      	mov	r1, sl
    23aa:	430a      	orrs	r2, r1
    23ac:	4669      	mov	r1, sp
    23ae:	71ca      	strb	r2, [r1, #7]
    23b0:	79ca      	ldrb	r2, [r1, #7]
    23b2:	75ba      	strb	r2, [r7, #22]
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);

	OSC32KCTRL->EVCTRL.reg =
    23b4:	7b00      	ldrb	r0, [r0, #12]
    23b6:	75f8      	strb	r0, [r7, #23]
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);

	OSC32KCTRL->XOSC32K = temp;
    23b8:	2001      	movs	r0, #1
    23ba:	4642      	mov	r2, r8
    23bc:	0092      	lsls	r2, r2, #2
    23be:	4690      	mov	r8, r2
    23c0:	2204      	movs	r2, #4
    23c2:	4691      	mov	r9, r2
    23c4:	4662      	mov	r2, ip
    23c6:	4649      	mov	r1, r9
    23c8:	438a      	bics	r2, r1
    23ca:	4694      	mov	ip, r2
    23cc:	4642      	mov	r2, r8
    23ce:	4661      	mov	r1, ip
    23d0:	430a      	orrs	r2, r1
    23d2:	4694      	mov	ip, r2
    23d4:	4003      	ands	r3, r0
    23d6:	00db      	lsls	r3, r3, #3
    23d8:	2208      	movs	r2, #8
    23da:	4690      	mov	r8, r2
    23dc:	4662      	mov	r2, ip
    23de:	4641      	mov	r1, r8
    23e0:	438a      	bics	r2, r1
    23e2:	4313      	orrs	r3, r2
    23e4:	4659      	mov	r1, fp
    23e6:	4001      	ands	r1, r0
    23e8:	0109      	lsls	r1, r1, #4
    23ea:	2210      	movs	r2, #16
    23ec:	4393      	bics	r3, r2
    23ee:	430b      	orrs	r3, r1
    23f0:	9a00      	ldr	r2, [sp, #0]
    23f2:	4002      	ands	r2, r0
    23f4:	0192      	lsls	r2, r2, #6
    23f6:	2140      	movs	r1, #64	; 0x40
    23f8:	438b      	bics	r3, r1
    23fa:	4313      	orrs	r3, r2
    23fc:	4006      	ands	r6, r0
    23fe:	01f6      	lsls	r6, r6, #7
    2400:	2280      	movs	r2, #128	; 0x80
    2402:	4393      	bics	r3, r2
    2404:	4333      	orrs	r3, r6
    2406:	3a79      	subs	r2, #121	; 0x79
    2408:	4015      	ands	r5, r2
    240a:	022d      	lsls	r5, r5, #8
    240c:	4e09      	ldr	r6, [pc, #36]	; (2434 <system_clock_source_xosc32k_set_config+0xd8>)
    240e:	4033      	ands	r3, r6
    2410:	432b      	orrs	r3, r5
    2412:	4004      	ands	r4, r0
    2414:	0320      	lsls	r0, r4, #12
    2416:	4c08      	ldr	r4, [pc, #32]	; (2438 <system_clock_source_xosc32k_set_config+0xdc>)
    2418:	401c      	ands	r4, r3
    241a:	4304      	orrs	r4, r0
    241c:	82bc      	strh	r4, [r7, #20]
}
    241e:	b003      	add	sp, #12
    2420:	bc3c      	pop	{r2, r3, r4, r5}
    2422:	4690      	mov	r8, r2
    2424:	4699      	mov	r9, r3
    2426:	46a2      	mov	sl, r4
    2428:	46ab      	mov	fp, r5
    242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    242c:	40001400 	.word	0x40001400
    2430:	20000ac4 	.word	0x20000ac4
    2434:	fffff8ff 	.word	0xfffff8ff
    2438:	ffffefff 	.word	0xffffefff

0000243c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    243e:	1c04      	adds	r4, r0, #0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    2440:	68c1      	ldr	r1, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    2442:	7d03      	ldrb	r3, [r0, #20]
    2444:	2b01      	cmp	r3, #1
    2446:	d105      	bne.n	2454 <system_clock_source_dpll_set_config+0x18>
		refclk = refclk / config->reference_divider;
    2448:	8a03      	ldrh	r3, [r0, #16]
    244a:	1c08      	adds	r0, r1, #0
    244c:	1c19      	adds	r1, r3, #0
    244e:	4b28      	ldr	r3, [pc, #160]	; (24f0 <system_clock_source_dpll_set_config+0xb4>)
    2450:	4798      	blx	r3
    2452:	1c01      	adds	r1, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    2454:	68a3      	ldr	r3, [r4, #8]
    2456:	0118      	lsls	r0, r3, #4
    2458:	4b25      	ldr	r3, [pc, #148]	; (24f0 <system_clock_source_dpll_set_config+0xb4>)
    245a:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    245c:	260f      	movs	r6, #15
    245e:	4006      	ands	r6, r0
	tmpldr = (tmpldr >> 4) - 1;
    2460:	0900      	lsrs	r0, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
    2462:	7863      	ldrb	r3, [r4, #1]
    2464:	019a      	lsls	r2, r3, #6
    2466:	7823      	ldrb	r3, [r4, #0]
    2468:	01db      	lsls	r3, r3, #7
    246a:	4313      	orrs	r3, r2
    246c:	b2db      	uxtb	r3, r3
    246e:	4a21      	ldr	r2, [pc, #132]	; (24f4 <system_clock_source_dpll_set_config+0xb8>)
    2470:	7713      	strb	r3, [r2, #28]
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2472:	0431      	lsls	r1, r6, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    2474:	1e43      	subs	r3, r0, #1
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    2476:	051b      	lsls	r3, r3, #20
    2478:	0d1b      	lsrs	r3, r3, #20
	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    247a:	430b      	orrs	r3, r1

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
    247c:	6213      	str	r3, [r2, #32]
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    247e:	1c15      	adds	r5, r2, #0
    2480:	212c      	movs	r1, #44	; 0x2c
    2482:	2204      	movs	r2, #4
    2484:	5c6b      	ldrb	r3, [r5, r1]
    2486:	4213      	tst	r3, r2
    2488:	d1fc      	bne.n	2484 <system_clock_source_dpll_set_config+0x48>
	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    248a:	78e1      	ldrb	r1, [r4, #3]
    248c:	00c9      	lsls	r1, r1, #3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    248e:	78a3      	ldrb	r3, [r4, #2]
    2490:	031b      	lsls	r3, r3, #12
    2492:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2494:	7923      	ldrb	r3, [r4, #4]
    2496:	009b      	lsls	r3, r3, #2
    2498:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    249a:	7ca3      	ldrb	r3, [r4, #18]
    249c:	2703      	movs	r7, #3
    249e:	403b      	ands	r3, r7
    24a0:	4319      	orrs	r1, r3

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    24a2:	8a25      	ldrh	r5, [r4, #16]
    24a4:	042d      	lsls	r5, r5, #16
    24a6:	4a14      	ldr	r2, [pc, #80]	; (24f8 <system_clock_source_dpll_set_config+0xbc>)
    24a8:	1c2b      	adds	r3, r5, #0
    24aa:	4013      	ands	r3, r2
    24ac:	4319      	orrs	r1, r3
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    24ae:	7ce3      	ldrb	r3, [r4, #19]
    24b0:	021b      	lsls	r3, r3, #8
    24b2:	22e0      	movs	r2, #224	; 0xe0
    24b4:	00d2      	lsls	r2, r2, #3
    24b6:	4013      	ands	r3, r2
    24b8:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    24ba:	7d22      	ldrb	r2, [r4, #20]
    24bc:	0112      	lsls	r2, r2, #4
    24be:	2330      	movs	r3, #48	; 0x30
    24c0:	4013      	ands	r3, r2
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    24c2:	430b      	orrs	r3, r1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
    24c4:	4a0b      	ldr	r2, [pc, #44]	; (24f4 <system_clock_source_dpll_set_config+0xb8>)
    24c6:	6253      	str	r3, [r2, #36]	; 0x24
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    24c8:	7d63      	ldrb	r3, [r4, #21]
    24ca:	401f      	ands	r7, r3
    24cc:	2328      	movs	r3, #40	; 0x28
    24ce:	54d7      	strb	r7, [r2, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    24d0:	1c15      	adds	r5, r2, #0
    24d2:	212c      	movs	r1, #44	; 0x2c
    24d4:	2208      	movs	r2, #8
    24d6:	5c6b      	ldrb	r3, [r5, r1]
    24d8:	4213      	tst	r3, r2
    24da:	d1fc      	bne.n	24d6 <system_clock_source_dpll_set_config+0x9a>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    24dc:	0100      	lsls	r0, r0, #4
    24de:	1836      	adds	r6, r6, r0
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
    24e0:	68e3      	ldr	r3, [r4, #12]
    24e2:	435e      	muls	r6, r3
			 (((tmpldr + 1) << 4) + tmpldrfrac)
			) >> (4 + config->prescaler);
    24e4:	7d63      	ldrb	r3, [r4, #21]
    24e6:	3304      	adds	r3, #4
    24e8:	40de      	lsrs	r6, r3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
    24ea:	4b04      	ldr	r3, [pc, #16]	; (24fc <system_clock_source_dpll_set_config+0xc0>)
    24ec:	601e      	str	r6, [r3, #0]
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
			) >> (4 + config->prescaler);
}
    24ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24f0:	00002b9d 	.word	0x00002b9d
    24f4:	40001000 	.word	0x40001000
    24f8:	07ff0000 	.word	0x07ff0000
    24fc:	20000ac4 	.word	0x20000ac4

00002500 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2500:	2807      	cmp	r0, #7
    2502:	d803      	bhi.n	250c <system_clock_source_enable+0xc>
    2504:	0080      	lsls	r0, r0, #2
    2506:	4b18      	ldr	r3, [pc, #96]	; (2568 <system_clock_source_enable+0x68>)
    2508:	581b      	ldr	r3, [r3, r0]
    250a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    250c:	2017      	movs	r0, #23
    250e:	e029      	b.n	2564 <system_clock_source_enable+0x64>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC48M:
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    2510:	4a16      	ldr	r2, [pc, #88]	; (256c <system_clock_source_enable+0x6c>)
    2512:	7d11      	ldrb	r1, [r2, #20]
    2514:	2302      	movs	r3, #2
    2516:	430b      	orrs	r3, r1
    2518:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    251a:	2000      	movs	r0, #0
    251c:	e022      	b.n	2564 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    251e:	4a14      	ldr	r2, [pc, #80]	; (2570 <system_clock_source_enable+0x70>)
    2520:	6991      	ldr	r1, [r2, #24]
    2522:	2302      	movs	r3, #2
    2524:	430b      	orrs	r3, r1
    2526:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2528:	2000      	movs	r0, #0
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    252a:	e01b      	b.n	2564 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    252c:	4a0f      	ldr	r2, [pc, #60]	; (256c <system_clock_source_enable+0x6c>)
    252e:	8a11      	ldrh	r1, [r2, #16]
    2530:	2302      	movs	r3, #2
    2532:	430b      	orrs	r3, r1
    2534:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2536:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    2538:	e014      	b.n	2564 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    253a:	4a0d      	ldr	r2, [pc, #52]	; (2570 <system_clock_source_enable+0x70>)
    253c:	8a91      	ldrh	r1, [r2, #20]
    253e:	2302      	movs	r3, #2
    2540:	430b      	orrs	r3, r1
    2542:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2544:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    2546:	e00d      	b.n	2564 <system_clock_source_enable+0x64>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2548:	4a08      	ldr	r2, [pc, #32]	; (256c <system_clock_source_enable+0x6c>)
    254a:	7f11      	ldrb	r1, [r2, #28]
    254c:	2302      	movs	r3, #2
    254e:	430b      	orrs	r3, r1
    2550:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2552:	1c10      	adds	r0, r2, #0
    2554:	212c      	movs	r1, #44	; 0x2c
    2556:	2202      	movs	r2, #2
    2558:	5c43      	ldrb	r3, [r0, r1]
    255a:	4213      	tst	r3, r2
    255c:	d1fc      	bne.n	2558 <system_clock_source_enable+0x58>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    255e:	2000      	movs	r0, #0
    2560:	e000      	b.n	2564 <system_clock_source_enable+0x64>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2562:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    2564:	4770      	bx	lr
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	00005124 	.word	0x00005124
    256c:	40001000 	.word	0x40001000
    2570:	40001400 	.word	0x40001400

00002574 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    2574:	b5f0      	push	{r4, r5, r6, r7, lr}
    2576:	4647      	mov	r7, r8
    2578:	b480      	push	{r7}
    257a:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    257c:	2203      	movs	r2, #3
    257e:	4b4d      	ldr	r3, [pc, #308]	; (26b4 <system_clock_init+0x140>)
    2580:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2582:	494d      	ldr	r1, [pc, #308]	; (26b8 <system_clock_init+0x144>)
    2584:	684b      	ldr	r3, [r1, #4]
    2586:	321b      	adds	r2, #27
    2588:	4393      	bics	r3, r2
    258a:	3a18      	subs	r2, #24
    258c:	4313      	orrs	r3, r2
    258e:	604b      	str	r3, [r1, #4]
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2590:	a80c      	add	r0, sp, #48	; 0x30
    2592:	2300      	movs	r3, #0
    2594:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    2596:	2280      	movs	r2, #128	; 0x80
    2598:	0212      	lsls	r2, r2, #8
    259a:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    259c:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    259e:	2201      	movs	r2, #1
    25a0:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    25a2:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    25a4:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    25a6:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    25a8:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    25aa:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    25ac:	2104      	movs	r1, #4
    25ae:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    25b0:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    25b2:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    25b4:	4b41      	ldr	r3, [pc, #260]	; (26bc <system_clock_init+0x148>)
    25b6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    25b8:	2005      	movs	r0, #5
    25ba:	4b41      	ldr	r3, [pc, #260]	; (26c0 <system_clock_init+0x14c>)
    25bc:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    25be:	4941      	ldr	r1, [pc, #260]	; (26c4 <system_clock_init+0x150>)
    25c0:	2201      	movs	r2, #1
    25c2:	68cb      	ldr	r3, [r1, #12]
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    25c4:	421a      	tst	r2, r3
    25c6:	d0fc      	beq.n	25c2 <system_clock_init+0x4e>
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    25c8:	a80a      	add	r0, sp, #40	; 0x28
    25ca:	2301      	movs	r3, #1
    25cc:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    25ce:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    25d0:	2200      	movs	r2, #0
    25d2:	70c2      	strb	r2, [r0, #3]
	config->on_demand           = true;
    25d4:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    25d6:	3306      	adds	r3, #6
    25d8:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    25da:	7142      	strb	r2, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    25dc:	4b3a      	ldr	r3, [pc, #232]	; (26c8 <system_clock_init+0x154>)
    25de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    25e0:	2004      	movs	r0, #4
    25e2:	4b37      	ldr	r3, [pc, #220]	; (26c0 <system_clock_init+0x14c>)
    25e4:	4798      	blx	r3
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    25e6:	4b39      	ldr	r3, [pc, #228]	; (26cc <system_clock_init+0x158>)
    25e8:	7d19      	ldrb	r1, [r3, #20]
    25ea:	2280      	movs	r2, #128	; 0x80
    25ec:	430a      	orrs	r2, r1
    25ee:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    25f0:	2202      	movs	r2, #2
    25f2:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    25f4:	1c1a      	adds	r2, r3, #0
    25f6:	6993      	ldr	r3, [r2, #24]
    25f8:	2b00      	cmp	r3, #0
    25fa:	d1fc      	bne.n	25f6 <system_clock_init+0x82>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    25fc:	4b34      	ldr	r3, [pc, #208]	; (26d0 <system_clock_init+0x15c>)
    25fe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2600:	ac01      	add	r4, sp, #4
    2602:	2601      	movs	r6, #1
    2604:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2606:	2500      	movs	r5, #0
    2608:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    260a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    260c:	2305      	movs	r3, #5
    260e:	7023      	strb	r3, [r4, #0]
    2610:	7226      	strb	r6, [r4, #8]
    2612:	2001      	movs	r0, #1
    2614:	1c21      	adds	r1, r4, #0
    2616:	4b2f      	ldr	r3, [pc, #188]	; (26d4 <system_clock_init+0x160>)
    2618:	4698      	mov	r8, r3
    261a:	4798      	blx	r3
    261c:	2001      	movs	r0, #1
    261e:	4f2e      	ldr	r7, [pc, #184]	; (26d8 <system_clock_init+0x164>)
    2620:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    2622:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2624:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2626:	7265      	strb	r5, [r4, #9]
    2628:	2304      	movs	r3, #4
    262a:	7023      	strb	r3, [r4, #0]
    262c:	331c      	adds	r3, #28
    262e:	6063      	str	r3, [r4, #4]
    2630:	2002      	movs	r0, #2
    2632:	1c21      	adds	r1, r4, #0
    2634:	47c0      	blx	r8
    2636:	2002      	movs	r0, #2
    2638:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    263a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    263c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    263e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2640:	7265      	strb	r5, [r4, #9]
    2642:	2307      	movs	r3, #7
    2644:	7023      	strb	r3, [r4, #0]
    2646:	2008      	movs	r0, #8
    2648:	1c21      	adds	r1, r4, #0
    264a:	47c0      	blx	r8
    264c:	2008      	movs	r0, #8
    264e:	47b8      	blx	r7
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
	config->lock_bypass         = false;
    2650:	a804      	add	r0, sp, #16
    2652:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    2654:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    2656:	7105      	strb	r5, [r0, #4]

	config->output_frequency    = 48000000;
    2658:	4b20      	ldr	r3, [pc, #128]	; (26dc <system_clock_init+0x168>)
    265a:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
    265c:	8206      	strh	r6, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK;
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    265e:	7545      	strb	r5, [r0, #21]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    2660:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    2662:	7485      	strb	r5, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    2664:	7005      	strb	r5, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    2666:	2301      	movs	r3, #1
    2668:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    266a:	7505      	strb	r5, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    266c:	4b1c      	ldr	r3, [pc, #112]	; (26e0 <system_clock_init+0x16c>)
    266e:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    2670:	4b1c      	ldr	r3, [pc, #112]	; (26e4 <system_clock_init+0x170>)
    2672:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    2674:	2007      	movs	r0, #7
    2676:	4b12      	ldr	r3, [pc, #72]	; (26c0 <system_clock_init+0x14c>)
    2678:	4798      	blx	r3
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    267a:	4814      	ldr	r0, [pc, #80]	; (26cc <system_clock_init+0x158>)
    267c:	2130      	movs	r1, #48	; 0x30
    267e:	2203      	movs	r2, #3
    2680:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2682:	4013      	ands	r3, r2
    2684:	2b03      	cmp	r3, #3
    2686:	d1fb      	bne.n	2680 <system_clock_init+0x10c>
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2688:	3b02      	subs	r3, #2
    268a:	4a17      	ldr	r2, [pc, #92]	; (26e8 <system_clock_init+0x174>)
    268c:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    268e:	a901      	add	r1, sp, #4
    2690:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2692:	2200      	movs	r2, #0
    2694:	704a      	strb	r2, [r1, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
    2696:	2006      	movs	r0, #6
    2698:	7008      	strb	r0, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    269a:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    269c:	720b      	strb	r3, [r1, #8]
    269e:	2000      	movs	r0, #0
    26a0:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <system_clock_init+0x160>)
    26a2:	4798      	blx	r3
    26a4:	2000      	movs	r0, #0
    26a6:	4b0c      	ldr	r3, [pc, #48]	; (26d8 <system_clock_init+0x164>)
    26a8:	4798      	blx	r3
#endif

}
    26aa:	b010      	add	sp, #64	; 0x40
    26ac:	bc04      	pop	{r2}
    26ae:	4690      	mov	r8, r2
    26b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	40001800 	.word	0x40001800
    26b8:	41004000 	.word	0x41004000
    26bc:	0000235d 	.word	0x0000235d
    26c0:	00002501 	.word	0x00002501
    26c4:	40001400 	.word	0x40001400
    26c8:	000022d5 	.word	0x000022d5
    26cc:	40001000 	.word	0x40001000
    26d0:	000026ed 	.word	0x000026ed
    26d4:	00002711 	.word	0x00002711
    26d8:	000027bd 	.word	0x000027bd
    26dc:	02dc6c00 	.word	0x02dc6c00
    26e0:	00007fff 	.word	0x00007fff
    26e4:	0000243d 	.word	0x0000243d
    26e8:	40000800 	.word	0x40000800

000026ec <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    26ec:	4a06      	ldr	r2, [pc, #24]	; (2708 <system_gclk_init+0x1c>)
    26ee:	6951      	ldr	r1, [r2, #20]
    26f0:	2380      	movs	r3, #128	; 0x80
    26f2:	430b      	orrs	r3, r1
    26f4:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    26f6:	2201      	movs	r2, #1
    26f8:	4b04      	ldr	r3, [pc, #16]	; (270c <system_gclk_init+0x20>)
    26fa:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    26fc:	1c19      	adds	r1, r3, #0
    26fe:	780b      	ldrb	r3, [r1, #0]
    2700:	4213      	tst	r3, r2
    2702:	d1fc      	bne.n	26fe <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2704:	4770      	bx	lr
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	40000800 	.word	0x40000800
    270c:	40001c00 	.word	0x40001c00

00002710 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2710:	b570      	push	{r4, r5, r6, lr}
    2712:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2714:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2716:	784b      	ldrb	r3, [r1, #1]
    2718:	2b00      	cmp	r3, #0
    271a:	d002      	beq.n	2722 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    271c:	2380      	movs	r3, #128	; 0x80
    271e:	00db      	lsls	r3, r3, #3
    2720:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2722:	7a4b      	ldrb	r3, [r1, #9]
    2724:	2b00      	cmp	r3, #0
    2726:	d002      	beq.n	272e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2728:	2380      	movs	r3, #128	; 0x80
    272a:	011b      	lsls	r3, r3, #4
    272c:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    272e:	684a      	ldr	r2, [r1, #4]
    2730:	2a01      	cmp	r2, #1
    2732:	d917      	bls.n	2764 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2734:	1e53      	subs	r3, r2, #1
    2736:	421a      	tst	r2, r3
    2738:	d10f      	bne.n	275a <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    273a:	2a02      	cmp	r2, #2
    273c:	d906      	bls.n	274c <system_gclk_gen_set_config+0x3c>
    273e:	2302      	movs	r3, #2
    2740:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    2742:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    2744:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2746:	429a      	cmp	r2, r3
    2748:	d8fb      	bhi.n	2742 <system_gclk_gen_set_config+0x32>
    274a:	e000      	b.n	274e <system_gclk_gen_set_config+0x3e>
    274c:	2000      	movs	r0, #0
    274e:	2380      	movs	r3, #128	; 0x80
    2750:	015b      	lsls	r3, r3, #5
    2752:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2754:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2756:	4305      	orrs	r5, r0
    2758:	e004      	b.n	2764 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    275a:	0412      	lsls	r2, r2, #16
    275c:	2380      	movs	r3, #128	; 0x80
    275e:	009b      	lsls	r3, r3, #2
    2760:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2762:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2764:	7a0b      	ldrb	r3, [r1, #8]
    2766:	2b00      	cmp	r3, #0
    2768:	d002      	beq.n	2770 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    276a:	2380      	movs	r3, #128	; 0x80
    276c:	019b      	lsls	r3, r3, #6
    276e:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2770:	2604      	movs	r6, #4
    2772:	40a6      	lsls	r6, r4
    2774:	490d      	ldr	r1, [pc, #52]	; (27ac <system_gclk_gen_set_config+0x9c>)
    2776:	4a0e      	ldr	r2, [pc, #56]	; (27b0 <system_gclk_gen_set_config+0xa0>)
    2778:	684b      	ldr	r3, [r1, #4]
    277a:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    277c:	421e      	tst	r6, r3
    277e:	d1fb      	bne.n	2778 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2780:	4b0c      	ldr	r3, [pc, #48]	; (27b4 <system_gclk_gen_set_config+0xa4>)
    2782:	4798      	blx	r3
    2784:	00a4      	lsls	r4, r4, #2
    2786:	4b09      	ldr	r3, [pc, #36]	; (27ac <system_gclk_gen_set_config+0x9c>)
    2788:	469c      	mov	ip, r3
    278a:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    278c:	6a20      	ldr	r0, [r4, #32]
    278e:	2380      	movs	r3, #128	; 0x80
    2790:	005b      	lsls	r3, r3, #1
    2792:	4018      	ands	r0, r3
    2794:	4328      	orrs	r0, r5
    2796:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2798:	4661      	mov	r1, ip
    279a:	4a05      	ldr	r2, [pc, #20]	; (27b0 <system_gclk_gen_set_config+0xa0>)
    279c:	684b      	ldr	r3, [r1, #4]
    279e:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    27a0:	421e      	tst	r6, r3
    27a2:	d1fb      	bne.n	279c <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    27a4:	4b04      	ldr	r3, [pc, #16]	; (27b8 <system_gclk_gen_set_config+0xa8>)
    27a6:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    27a8:	bd70      	pop	{r4, r5, r6, pc}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	40001c00 	.word	0x40001c00
    27b0:	000007fc 	.word	0x000007fc
    27b4:	00001201 	.word	0x00001201
    27b8:	00001241 	.word	0x00001241

000027bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    27bc:	b510      	push	{r4, lr}
    27be:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    27c0:	2204      	movs	r2, #4
    27c2:	4082      	lsls	r2, r0
    27c4:	4809      	ldr	r0, [pc, #36]	; (27ec <system_gclk_gen_enable+0x30>)
    27c6:	490a      	ldr	r1, [pc, #40]	; (27f0 <system_gclk_gen_enable+0x34>)
    27c8:	6843      	ldr	r3, [r0, #4]
    27ca:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    27cc:	421a      	tst	r2, r3
    27ce:	d1fb      	bne.n	27c8 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    27d0:	4b08      	ldr	r3, [pc, #32]	; (27f4 <system_gclk_gen_enable+0x38>)
    27d2:	4798      	blx	r3
    27d4:	00a4      	lsls	r4, r4, #2
    27d6:	4b05      	ldr	r3, [pc, #20]	; (27ec <system_gclk_gen_enable+0x30>)
    27d8:	469c      	mov	ip, r3
    27da:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    27dc:	6a23      	ldr	r3, [r4, #32]
    27de:	2280      	movs	r2, #128	; 0x80
    27e0:	0052      	lsls	r2, r2, #1
    27e2:	4313      	orrs	r3, r2
    27e4:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    27e6:	4b04      	ldr	r3, [pc, #16]	; (27f8 <system_gclk_gen_enable+0x3c>)
    27e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27ea:	bd10      	pop	{r4, pc}
    27ec:	40001c00 	.word	0x40001c00
    27f0:	000007fc 	.word	0x000007fc
    27f4:	00001201 	.word	0x00001201
    27f8:	00001241 	.word	0x00001241

000027fc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    27fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27fe:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2800:	2204      	movs	r2, #4
    2802:	4082      	lsls	r2, r0
    2804:	4812      	ldr	r0, [pc, #72]	; (2850 <system_gclk_gen_get_hz+0x54>)
    2806:	4913      	ldr	r1, [pc, #76]	; (2854 <system_gclk_gen_get_hz+0x58>)
    2808:	6843      	ldr	r3, [r0, #4]
    280a:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    280c:	421a      	tst	r2, r3
    280e:	d1fb      	bne.n	2808 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2810:	4b11      	ldr	r3, [pc, #68]	; (2858 <system_gclk_gen_get_hz+0x5c>)
    2812:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2814:	4f0e      	ldr	r7, [pc, #56]	; (2850 <system_gclk_gen_get_hz+0x54>)
    2816:	3408      	adds	r4, #8
    2818:	00a4      	lsls	r4, r4, #2
    281a:	59e3      	ldr	r3, [r4, r7]
    281c:	2007      	movs	r0, #7
    281e:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2820:	4b0e      	ldr	r3, [pc, #56]	; (285c <system_gclk_gen_get_hz+0x60>)
    2822:	4798      	blx	r3
    2824:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    2826:	59e5      	ldr	r5, [r4, r7]
    2828:	04ed      	lsls	r5, r5, #19
    282a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    282c:	59e4      	ldr	r4, [r4, r7]
    282e:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2830:	4b0b      	ldr	r3, [pc, #44]	; (2860 <system_gclk_gen_get_hz+0x64>)
    2832:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2834:	2d00      	cmp	r5, #0
    2836:	d107      	bne.n	2848 <system_gclk_gen_get_hz+0x4c>
    2838:	2c01      	cmp	r4, #1
    283a:	d907      	bls.n	284c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    283c:	1c30      	adds	r0, r6, #0
    283e:	1c21      	adds	r1, r4, #0
    2840:	4b08      	ldr	r3, [pc, #32]	; (2864 <system_gclk_gen_get_hz+0x68>)
    2842:	4798      	blx	r3
    2844:	1c06      	adds	r6, r0, #0
    2846:	e001      	b.n	284c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2848:	3401      	adds	r4, #1
    284a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    284c:	1c30      	adds	r0, r6, #0
    284e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2850:	40001c00 	.word	0x40001c00
    2854:	000007fc 	.word	0x000007fc
    2858:	00001201 	.word	0x00001201
    285c:	00002279 	.word	0x00002279
    2860:	00001241 	.word	0x00001241
    2864:	00002b9d 	.word	0x00002b9d

00002868 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2868:	b510      	push	{r4, lr}
    286a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    286c:	4b08      	ldr	r3, [pc, #32]	; (2890 <system_gclk_chan_enable+0x28>)
    286e:	4798      	blx	r3
    2870:	00a4      	lsls	r4, r4, #2
    2872:	4b08      	ldr	r3, [pc, #32]	; (2894 <system_gclk_chan_enable+0x2c>)
    2874:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    2876:	2280      	movs	r2, #128	; 0x80
    2878:	5881      	ldr	r1, [r0, r2]
    287a:	2340      	movs	r3, #64	; 0x40
    287c:	430b      	orrs	r3, r1
    287e:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    2880:	2180      	movs	r1, #128	; 0x80
    2882:	3a40      	subs	r2, #64	; 0x40
    2884:	5843      	ldr	r3, [r0, r1]
    2886:	421a      	tst	r2, r3
    2888:	d0fc      	beq.n	2884 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    288a:	4b03      	ldr	r3, [pc, #12]	; (2898 <system_gclk_chan_enable+0x30>)
    288c:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    288e:	bd10      	pop	{r4, pc}
    2890:	00001201 	.word	0x00001201
    2894:	40001c00 	.word	0x40001c00
    2898:	00001241 	.word	0x00001241

0000289c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    289c:	b510      	push	{r4, lr}
    289e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    28a0:	4b08      	ldr	r3, [pc, #32]	; (28c4 <system_gclk_chan_disable+0x28>)
    28a2:	4798      	blx	r3
    28a4:	00a4      	lsls	r4, r4, #2
    28a6:	4b08      	ldr	r3, [pc, #32]	; (28c8 <system_gclk_chan_disable+0x2c>)
    28a8:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    28aa:	2280      	movs	r2, #128	; 0x80
    28ac:	5883      	ldr	r3, [r0, r2]
    28ae:	2140      	movs	r1, #64	; 0x40
    28b0:	438b      	bics	r3, r1
    28b2:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    28b4:	3140      	adds	r1, #64	; 0x40
    28b6:	3a40      	subs	r2, #64	; 0x40
    28b8:	5843      	ldr	r3, [r0, r1]
    28ba:	421a      	tst	r2, r3
    28bc:	d1fc      	bne.n	28b8 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    28be:	4b03      	ldr	r3, [pc, #12]	; (28cc <system_gclk_chan_disable+0x30>)
    28c0:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    28c2:	bd10      	pop	{r4, pc}
    28c4:	00001201 	.word	0x00001201
    28c8:	40001c00 	.word	0x40001c00
    28cc:	00001241 	.word	0x00001241

000028d0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    28d0:	b538      	push	{r3, r4, r5, lr}
    28d2:	1c04      	adds	r4, r0, #0
    28d4:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    28d6:	4b05      	ldr	r3, [pc, #20]	; (28ec <system_gclk_chan_set_config+0x1c>)
    28d8:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    28da:	782b      	ldrb	r3, [r5, #0]
    28dc:	220f      	movs	r2, #15
    28de:	4013      	ands	r3, r2
    28e0:	3420      	adds	r4, #32
    28e2:	00a4      	lsls	r4, r4, #2
    28e4:	4a02      	ldr	r2, [pc, #8]	; (28f0 <system_gclk_chan_set_config+0x20>)
    28e6:	50a3      	str	r3, [r4, r2]


}
    28e8:	bd38      	pop	{r3, r4, r5, pc}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	0000289d 	.word	0x0000289d
    28f0:	40001c00 	.word	0x40001c00

000028f4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    28f4:	b510      	push	{r4, lr}
    28f6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    28f8:	4b06      	ldr	r3, [pc, #24]	; (2914 <system_gclk_chan_get_hz+0x20>)
    28fa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    28fc:	3420      	adds	r4, #32
    28fe:	00a4      	lsls	r4, r4, #2
    2900:	4b05      	ldr	r3, [pc, #20]	; (2918 <system_gclk_chan_get_hz+0x24>)
    2902:	58e3      	ldr	r3, [r4, r3]
    2904:	240f      	movs	r4, #15
    2906:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2908:	4b04      	ldr	r3, [pc, #16]	; (291c <system_gclk_chan_get_hz+0x28>)
    290a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    290c:	1c20      	adds	r0, r4, #0
    290e:	4b04      	ldr	r3, [pc, #16]	; (2920 <system_gclk_chan_get_hz+0x2c>)
    2910:	4798      	blx	r3
}
    2912:	bd10      	pop	{r4, pc}
    2914:	00001201 	.word	0x00001201
    2918:	40001c00 	.word	0x40001c00
    291c:	00001241 	.word	0x00001241
    2920:	000027fd 	.word	0x000027fd

00002924 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2924:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2926:	78d3      	ldrb	r3, [r2, #3]
    2928:	2b00      	cmp	r3, #0
    292a:	d11e      	bne.n	296a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    292c:	7814      	ldrb	r4, [r2, #0]
    292e:	2c80      	cmp	r4, #128	; 0x80
    2930:	d004      	beq.n	293c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2932:	0624      	lsls	r4, r4, #24
    2934:	2380      	movs	r3, #128	; 0x80
    2936:	025b      	lsls	r3, r3, #9
    2938:	431c      	orrs	r4, r3
    293a:	e000      	b.n	293e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    293c:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    293e:	7853      	ldrb	r3, [r2, #1]
    2940:	2502      	movs	r5, #2
    2942:	43ab      	bics	r3, r5
    2944:	d10a      	bne.n	295c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2946:	7893      	ldrb	r3, [r2, #2]
    2948:	2b00      	cmp	r3, #0
    294a:	d103      	bne.n	2954 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    294c:	2380      	movs	r3, #128	; 0x80
    294e:	029b      	lsls	r3, r3, #10
    2950:	431c      	orrs	r4, r3
    2952:	e002      	b.n	295a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2954:	23c0      	movs	r3, #192	; 0xc0
    2956:	02db      	lsls	r3, r3, #11
    2958:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    295a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    295c:	7853      	ldrb	r3, [r2, #1]
    295e:	3b01      	subs	r3, #1
    2960:	2b01      	cmp	r3, #1
    2962:	d812      	bhi.n	298a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2964:	4b18      	ldr	r3, [pc, #96]	; (29c8 <_system_pinmux_config+0xa4>)
    2966:	401c      	ands	r4, r3
    2968:	e00f      	b.n	298a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    296a:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    296c:	040b      	lsls	r3, r1, #16
    296e:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2970:	24a0      	movs	r4, #160	; 0xa0
    2972:	05e4      	lsls	r4, r4, #23
    2974:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2976:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2978:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    297a:	24d0      	movs	r4, #208	; 0xd0
    297c:	0624      	lsls	r4, r4, #24
    297e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2980:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2982:	78d3      	ldrb	r3, [r2, #3]
    2984:	2b00      	cmp	r3, #0
    2986:	d018      	beq.n	29ba <_system_pinmux_config+0x96>
    2988:	e01c      	b.n	29c4 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    298a:	040b      	lsls	r3, r1, #16
    298c:	0c1b      	lsrs	r3, r3, #16
    298e:	25a0      	movs	r5, #160	; 0xa0
    2990:	05ed      	lsls	r5, r5, #23
    2992:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2994:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2996:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2998:	0c0b      	lsrs	r3, r1, #16
    299a:	25d0      	movs	r5, #208	; 0xd0
    299c:	062d      	lsls	r5, r5, #24
    299e:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    29a0:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29a2:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    29a4:	78d3      	ldrb	r3, [r2, #3]
    29a6:	2b00      	cmp	r3, #0
    29a8:	d10c      	bne.n	29c4 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    29aa:	0363      	lsls	r3, r4, #13
    29ac:	d505      	bpl.n	29ba <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    29ae:	7893      	ldrb	r3, [r2, #2]
    29b0:	2b01      	cmp	r3, #1
    29b2:	d101      	bne.n	29b8 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    29b4:	6181      	str	r1, [r0, #24]
    29b6:	e000      	b.n	29ba <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    29b8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29ba:	7853      	ldrb	r3, [r2, #1]
    29bc:	3b01      	subs	r3, #1
    29be:	2b01      	cmp	r3, #1
    29c0:	d800      	bhi.n	29c4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    29c2:	6081      	str	r1, [r0, #8]
		}
	}
}
    29c4:	bd30      	pop	{r4, r5, pc}
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	fffbffff 	.word	0xfffbffff

000029cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    29cc:	b508      	push	{r3, lr}
    29ce:	1c03      	adds	r3, r0, #0
    29d0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    29d2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    29d4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    29d6:	2900      	cmp	r1, #0
    29d8:	d105      	bne.n	29e6 <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
    29da:	0958      	lsrs	r0, r3, #5
    29dc:	01c0      	lsls	r0, r0, #7
    29de:	2182      	movs	r1, #130	; 0x82
    29e0:	05c9      	lsls	r1, r1, #23
    29e2:	468c      	mov	ip, r1
    29e4:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    29e6:	211f      	movs	r1, #31
    29e8:	400b      	ands	r3, r1
    29ea:	391e      	subs	r1, #30
    29ec:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    29ee:	4b01      	ldr	r3, [pc, #4]	; (29f4 <system_pinmux_pin_set_config+0x28>)
    29f0:	4798      	blx	r3
}
    29f2:	bd08      	pop	{r3, pc}
    29f4:	00002925 	.word	0x00002925

000029f8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    29f8:	4770      	bx	lr
    29fa:	46c0      	nop			; (mov r8, r8)

000029fc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    29fc:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    29fe:	4b05      	ldr	r3, [pc, #20]	; (2a14 <system_init+0x18>)
    2a00:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2a02:	4b05      	ldr	r3, [pc, #20]	; (2a18 <system_init+0x1c>)
    2a04:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2a06:	4b05      	ldr	r3, [pc, #20]	; (2a1c <system_init+0x20>)
    2a08:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2a0a:	4b05      	ldr	r3, [pc, #20]	; (2a20 <system_init+0x24>)
    2a0c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2a0e:	4b05      	ldr	r3, [pc, #20]	; (2a24 <system_init+0x28>)
    2a10:	4798      	blx	r3
}
    2a12:	bd08      	pop	{r3, pc}
    2a14:	00002575 	.word	0x00002575
    2a18:	00001271 	.word	0x00001271
    2a1c:	000010d1 	.word	0x000010d1
    2a20:	000029f9 	.word	0x000029f9
    2a24:	000029f9 	.word	0x000029f9

00002a28 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    2a28:	e7fe      	b.n	2a28 <Dummy_Handler>
    2a2a:	46c0      	nop			; (mov r8, r8)

00002a2c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2a2c:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2a2e:	4b1b      	ldr	r3, [pc, #108]	; (2a9c <Reset_Handler+0x70>)
    2a30:	4a1b      	ldr	r2, [pc, #108]	; (2aa0 <Reset_Handler+0x74>)
    2a32:	429a      	cmp	r2, r3
    2a34:	d003      	beq.n	2a3e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    2a36:	4b1b      	ldr	r3, [pc, #108]	; (2aa4 <Reset_Handler+0x78>)
    2a38:	4a18      	ldr	r2, [pc, #96]	; (2a9c <Reset_Handler+0x70>)
    2a3a:	429a      	cmp	r2, r3
    2a3c:	d304      	bcc.n	2a48 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2a3e:	4b1a      	ldr	r3, [pc, #104]	; (2aa8 <Reset_Handler+0x7c>)
    2a40:	4a1a      	ldr	r2, [pc, #104]	; (2aac <Reset_Handler+0x80>)
    2a42:	429a      	cmp	r2, r3
    2a44:	d310      	bcc.n	2a68 <Reset_Handler+0x3c>
    2a46:	e01e      	b.n	2a86 <Reset_Handler+0x5a>
    2a48:	4a19      	ldr	r2, [pc, #100]	; (2ab0 <Reset_Handler+0x84>)
    2a4a:	4b16      	ldr	r3, [pc, #88]	; (2aa4 <Reset_Handler+0x78>)
    2a4c:	3303      	adds	r3, #3
    2a4e:	1a9b      	subs	r3, r3, r2
    2a50:	089b      	lsrs	r3, r3, #2
    2a52:	3301      	adds	r3, #1
    2a54:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2a56:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2a58:	4810      	ldr	r0, [pc, #64]	; (2a9c <Reset_Handler+0x70>)
    2a5a:	4911      	ldr	r1, [pc, #68]	; (2aa0 <Reset_Handler+0x74>)
    2a5c:	588c      	ldr	r4, [r1, r2]
    2a5e:	5084      	str	r4, [r0, r2]
    2a60:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2a62:	429a      	cmp	r2, r3
    2a64:	d1fa      	bne.n	2a5c <Reset_Handler+0x30>
    2a66:	e7ea      	b.n	2a3e <Reset_Handler+0x12>
    2a68:	4a12      	ldr	r2, [pc, #72]	; (2ab4 <Reset_Handler+0x88>)
    2a6a:	4b0f      	ldr	r3, [pc, #60]	; (2aa8 <Reset_Handler+0x7c>)
    2a6c:	3303      	adds	r3, #3
    2a6e:	1a9b      	subs	r3, r3, r2
    2a70:	089b      	lsrs	r3, r3, #2
    2a72:	3301      	adds	r3, #1
    2a74:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2a76:	2200      	movs	r2, #0
                *pDest++ = 0;
    2a78:	480c      	ldr	r0, [pc, #48]	; (2aac <Reset_Handler+0x80>)
    2a7a:	2100      	movs	r1, #0
    2a7c:	1814      	adds	r4, r2, r0
    2a7e:	6021      	str	r1, [r4, #0]
    2a80:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2a82:	429a      	cmp	r2, r3
    2a84:	d1fa      	bne.n	2a7c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2a86:	4a0c      	ldr	r2, [pc, #48]	; (2ab8 <Reset_Handler+0x8c>)
    2a88:	21ff      	movs	r1, #255	; 0xff
    2a8a:	4b0c      	ldr	r3, [pc, #48]	; (2abc <Reset_Handler+0x90>)
    2a8c:	438b      	bics	r3, r1
    2a8e:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    2a90:	4b0b      	ldr	r3, [pc, #44]	; (2ac0 <Reset_Handler+0x94>)
    2a92:	4798      	blx	r3

        /* Branch to main function */
        main();
    2a94:	4b0b      	ldr	r3, [pc, #44]	; (2ac4 <Reset_Handler+0x98>)
    2a96:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2a98:	e7fe      	b.n	2a98 <Reset_Handler+0x6c>
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	20000000 	.word	0x20000000
    2aa0:	00005328 	.word	0x00005328
    2aa4:	20000080 	.word	0x20000080
    2aa8:	20000b64 	.word	0x20000b64
    2aac:	20000080 	.word	0x20000080
    2ab0:	20000004 	.word	0x20000004
    2ab4:	20000084 	.word	0x20000084
    2ab8:	e000ed00 	.word	0xe000ed00
    2abc:	00000000 	.word	0x00000000
    2ac0:	00002d15 	.word	0x00002d15
    2ac4:	00000b05 	.word	0x00000b05

00002ac8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aca:	4647      	mov	r7, r8
    2acc:	b480      	push	{r7}
    2ace:	1c0c      	adds	r4, r1, #0
    2ad0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2ad2:	2800      	cmp	r0, #0
    2ad4:	d110      	bne.n	2af8 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    2ad6:	2a00      	cmp	r2, #0
    2ad8:	dd0a      	ble.n	2af0 <_read+0x28>
    2ada:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2adc:	4e09      	ldr	r6, [pc, #36]	; (2b04 <_read+0x3c>)
    2ade:	4d0a      	ldr	r5, [pc, #40]	; (2b08 <_read+0x40>)
    2ae0:	6830      	ldr	r0, [r6, #0]
    2ae2:	1c21      	adds	r1, r4, #0
    2ae4:	682b      	ldr	r3, [r5, #0]
    2ae6:	4798      	blx	r3
		ptr++;
    2ae8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    2aea:	42bc      	cmp	r4, r7
    2aec:	d1f8      	bne.n	2ae0 <_read+0x18>
    2aee:	e001      	b.n	2af4 <_read+0x2c>
    2af0:	2300      	movs	r3, #0
    2af2:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    2af4:	4640      	mov	r0, r8
    2af6:	e001      	b.n	2afc <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    2af8:	2001      	movs	r0, #1
    2afa:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    2afc:	bc04      	pop	{r2}
    2afe:	4690      	mov	r8, r2
    2b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	20000b5c 	.word	0x20000b5c
    2b08:	20000b54 	.word	0x20000b54

00002b0c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b0e:	4647      	mov	r7, r8
    2b10:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2b12:	3801      	subs	r0, #1
    2b14:	2802      	cmp	r0, #2
    2b16:	d815      	bhi.n	2b44 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    2b18:	2a00      	cmp	r2, #0
    2b1a:	d010      	beq.n	2b3e <_write+0x32>
    2b1c:	1c15      	adds	r5, r2, #0
    2b1e:	1c0e      	adds	r6, r1, #0
    2b20:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2b22:	4b0c      	ldr	r3, [pc, #48]	; (2b54 <_write+0x48>)
    2b24:	4698      	mov	r8, r3
    2b26:	4f0c      	ldr	r7, [pc, #48]	; (2b58 <_write+0x4c>)
    2b28:	4643      	mov	r3, r8
    2b2a:	6818      	ldr	r0, [r3, #0]
    2b2c:	5d31      	ldrb	r1, [r6, r4]
    2b2e:	683b      	ldr	r3, [r7, #0]
    2b30:	4798      	blx	r3
    2b32:	2800      	cmp	r0, #0
    2b34:	db09      	blt.n	2b4a <_write+0x3e>
			return -1;
		}
		++nChars;
    2b36:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    2b38:	42a5      	cmp	r5, r4
    2b3a:	d1f5      	bne.n	2b28 <_write+0x1c>
    2b3c:	e000      	b.n	2b40 <_write+0x34>
    2b3e:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    2b40:	1c20      	adds	r0, r4, #0
    2b42:	e004      	b.n	2b4e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    2b44:	2001      	movs	r0, #1
    2b46:	4240      	negs	r0, r0
    2b48:	e001      	b.n	2b4e <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    2b4a:	2001      	movs	r0, #1
    2b4c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    2b4e:	bc04      	pop	{r2}
    2b50:	4690      	mov	r8, r2
    2b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b54:	20000b5c 	.word	0x20000b5c
    2b58:	20000b58 	.word	0x20000b58

00002b5c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2b5c:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2b5e:	4a06      	ldr	r2, [pc, #24]	; (2b78 <_sbrk+0x1c>)
    2b60:	6812      	ldr	r2, [r2, #0]
    2b62:	2a00      	cmp	r2, #0
    2b64:	d102      	bne.n	2b6c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    2b66:	4905      	ldr	r1, [pc, #20]	; (2b7c <_sbrk+0x20>)
    2b68:	4a03      	ldr	r2, [pc, #12]	; (2b78 <_sbrk+0x1c>)
    2b6a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2b6c:	4a02      	ldr	r2, [pc, #8]	; (2b78 <_sbrk+0x1c>)
    2b6e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2b70:	18c3      	adds	r3, r0, r3
    2b72:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2b74:	4770      	bx	lr
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	20000ad0 	.word	0x20000ad0
    2b7c:	20002b68 	.word	0x20002b68

00002b80 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2b80:	2001      	movs	r0, #1
    2b82:	4240      	negs	r0, r0
    2b84:	4770      	bx	lr
    2b86:	46c0      	nop			; (mov r8, r8)

00002b88 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2b88:	2380      	movs	r3, #128	; 0x80
    2b8a:	019b      	lsls	r3, r3, #6
    2b8c:	604b      	str	r3, [r1, #4]

	return 0;
}
    2b8e:	2000      	movs	r0, #0
    2b90:	4770      	bx	lr
    2b92:	46c0      	nop			; (mov r8, r8)

00002b94 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2b94:	2001      	movs	r0, #1
    2b96:	4770      	bx	lr

00002b98 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2b98:	2000      	movs	r0, #0
    2b9a:	4770      	bx	lr

00002b9c <__aeabi_uidiv>:
    2b9c:	2200      	movs	r2, #0
    2b9e:	0843      	lsrs	r3, r0, #1
    2ba0:	428b      	cmp	r3, r1
    2ba2:	d374      	bcc.n	2c8e <__aeabi_uidiv+0xf2>
    2ba4:	0903      	lsrs	r3, r0, #4
    2ba6:	428b      	cmp	r3, r1
    2ba8:	d35f      	bcc.n	2c6a <__aeabi_uidiv+0xce>
    2baa:	0a03      	lsrs	r3, r0, #8
    2bac:	428b      	cmp	r3, r1
    2bae:	d344      	bcc.n	2c3a <__aeabi_uidiv+0x9e>
    2bb0:	0b03      	lsrs	r3, r0, #12
    2bb2:	428b      	cmp	r3, r1
    2bb4:	d328      	bcc.n	2c08 <__aeabi_uidiv+0x6c>
    2bb6:	0c03      	lsrs	r3, r0, #16
    2bb8:	428b      	cmp	r3, r1
    2bba:	d30d      	bcc.n	2bd8 <__aeabi_uidiv+0x3c>
    2bbc:	22ff      	movs	r2, #255	; 0xff
    2bbe:	0209      	lsls	r1, r1, #8
    2bc0:	ba12      	rev	r2, r2
    2bc2:	0c03      	lsrs	r3, r0, #16
    2bc4:	428b      	cmp	r3, r1
    2bc6:	d302      	bcc.n	2bce <__aeabi_uidiv+0x32>
    2bc8:	1212      	asrs	r2, r2, #8
    2bca:	0209      	lsls	r1, r1, #8
    2bcc:	d065      	beq.n	2c9a <__aeabi_uidiv+0xfe>
    2bce:	0b03      	lsrs	r3, r0, #12
    2bd0:	428b      	cmp	r3, r1
    2bd2:	d319      	bcc.n	2c08 <__aeabi_uidiv+0x6c>
    2bd4:	e000      	b.n	2bd8 <__aeabi_uidiv+0x3c>
    2bd6:	0a09      	lsrs	r1, r1, #8
    2bd8:	0bc3      	lsrs	r3, r0, #15
    2bda:	428b      	cmp	r3, r1
    2bdc:	d301      	bcc.n	2be2 <__aeabi_uidiv+0x46>
    2bde:	03cb      	lsls	r3, r1, #15
    2be0:	1ac0      	subs	r0, r0, r3
    2be2:	4152      	adcs	r2, r2
    2be4:	0b83      	lsrs	r3, r0, #14
    2be6:	428b      	cmp	r3, r1
    2be8:	d301      	bcc.n	2bee <__aeabi_uidiv+0x52>
    2bea:	038b      	lsls	r3, r1, #14
    2bec:	1ac0      	subs	r0, r0, r3
    2bee:	4152      	adcs	r2, r2
    2bf0:	0b43      	lsrs	r3, r0, #13
    2bf2:	428b      	cmp	r3, r1
    2bf4:	d301      	bcc.n	2bfa <__aeabi_uidiv+0x5e>
    2bf6:	034b      	lsls	r3, r1, #13
    2bf8:	1ac0      	subs	r0, r0, r3
    2bfa:	4152      	adcs	r2, r2
    2bfc:	0b03      	lsrs	r3, r0, #12
    2bfe:	428b      	cmp	r3, r1
    2c00:	d301      	bcc.n	2c06 <__aeabi_uidiv+0x6a>
    2c02:	030b      	lsls	r3, r1, #12
    2c04:	1ac0      	subs	r0, r0, r3
    2c06:	4152      	adcs	r2, r2
    2c08:	0ac3      	lsrs	r3, r0, #11
    2c0a:	428b      	cmp	r3, r1
    2c0c:	d301      	bcc.n	2c12 <__aeabi_uidiv+0x76>
    2c0e:	02cb      	lsls	r3, r1, #11
    2c10:	1ac0      	subs	r0, r0, r3
    2c12:	4152      	adcs	r2, r2
    2c14:	0a83      	lsrs	r3, r0, #10
    2c16:	428b      	cmp	r3, r1
    2c18:	d301      	bcc.n	2c1e <__aeabi_uidiv+0x82>
    2c1a:	028b      	lsls	r3, r1, #10
    2c1c:	1ac0      	subs	r0, r0, r3
    2c1e:	4152      	adcs	r2, r2
    2c20:	0a43      	lsrs	r3, r0, #9
    2c22:	428b      	cmp	r3, r1
    2c24:	d301      	bcc.n	2c2a <__aeabi_uidiv+0x8e>
    2c26:	024b      	lsls	r3, r1, #9
    2c28:	1ac0      	subs	r0, r0, r3
    2c2a:	4152      	adcs	r2, r2
    2c2c:	0a03      	lsrs	r3, r0, #8
    2c2e:	428b      	cmp	r3, r1
    2c30:	d301      	bcc.n	2c36 <__aeabi_uidiv+0x9a>
    2c32:	020b      	lsls	r3, r1, #8
    2c34:	1ac0      	subs	r0, r0, r3
    2c36:	4152      	adcs	r2, r2
    2c38:	d2cd      	bcs.n	2bd6 <__aeabi_uidiv+0x3a>
    2c3a:	09c3      	lsrs	r3, r0, #7
    2c3c:	428b      	cmp	r3, r1
    2c3e:	d301      	bcc.n	2c44 <__aeabi_uidiv+0xa8>
    2c40:	01cb      	lsls	r3, r1, #7
    2c42:	1ac0      	subs	r0, r0, r3
    2c44:	4152      	adcs	r2, r2
    2c46:	0983      	lsrs	r3, r0, #6
    2c48:	428b      	cmp	r3, r1
    2c4a:	d301      	bcc.n	2c50 <__aeabi_uidiv+0xb4>
    2c4c:	018b      	lsls	r3, r1, #6
    2c4e:	1ac0      	subs	r0, r0, r3
    2c50:	4152      	adcs	r2, r2
    2c52:	0943      	lsrs	r3, r0, #5
    2c54:	428b      	cmp	r3, r1
    2c56:	d301      	bcc.n	2c5c <__aeabi_uidiv+0xc0>
    2c58:	014b      	lsls	r3, r1, #5
    2c5a:	1ac0      	subs	r0, r0, r3
    2c5c:	4152      	adcs	r2, r2
    2c5e:	0903      	lsrs	r3, r0, #4
    2c60:	428b      	cmp	r3, r1
    2c62:	d301      	bcc.n	2c68 <__aeabi_uidiv+0xcc>
    2c64:	010b      	lsls	r3, r1, #4
    2c66:	1ac0      	subs	r0, r0, r3
    2c68:	4152      	adcs	r2, r2
    2c6a:	08c3      	lsrs	r3, r0, #3
    2c6c:	428b      	cmp	r3, r1
    2c6e:	d301      	bcc.n	2c74 <__aeabi_uidiv+0xd8>
    2c70:	00cb      	lsls	r3, r1, #3
    2c72:	1ac0      	subs	r0, r0, r3
    2c74:	4152      	adcs	r2, r2
    2c76:	0883      	lsrs	r3, r0, #2
    2c78:	428b      	cmp	r3, r1
    2c7a:	d301      	bcc.n	2c80 <__aeabi_uidiv+0xe4>
    2c7c:	008b      	lsls	r3, r1, #2
    2c7e:	1ac0      	subs	r0, r0, r3
    2c80:	4152      	adcs	r2, r2
    2c82:	0843      	lsrs	r3, r0, #1
    2c84:	428b      	cmp	r3, r1
    2c86:	d301      	bcc.n	2c8c <__aeabi_uidiv+0xf0>
    2c88:	004b      	lsls	r3, r1, #1
    2c8a:	1ac0      	subs	r0, r0, r3
    2c8c:	4152      	adcs	r2, r2
    2c8e:	1a41      	subs	r1, r0, r1
    2c90:	d200      	bcs.n	2c94 <__aeabi_uidiv+0xf8>
    2c92:	4601      	mov	r1, r0
    2c94:	4152      	adcs	r2, r2
    2c96:	4610      	mov	r0, r2
    2c98:	4770      	bx	lr
    2c9a:	e7ff      	b.n	2c9c <__aeabi_uidiv+0x100>
    2c9c:	b501      	push	{r0, lr}
    2c9e:	2000      	movs	r0, #0
    2ca0:	f000 f80c 	bl	2cbc <__aeabi_idiv0>
    2ca4:	bd02      	pop	{r1, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)

00002ca8 <__aeabi_uidivmod>:
    2ca8:	2900      	cmp	r1, #0
    2caa:	d0f7      	beq.n	2c9c <__aeabi_uidiv+0x100>
    2cac:	b503      	push	{r0, r1, lr}
    2cae:	f7ff ff75 	bl	2b9c <__aeabi_uidiv>
    2cb2:	bc0e      	pop	{r1, r2, r3}
    2cb4:	4342      	muls	r2, r0
    2cb6:	1a89      	subs	r1, r1, r2
    2cb8:	4718      	bx	r3
    2cba:	46c0      	nop			; (mov r8, r8)

00002cbc <__aeabi_idiv0>:
    2cbc:	4770      	bx	lr
    2cbe:	46c0      	nop			; (mov r8, r8)

00002cc0 <__aeabi_lmul>:
    2cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cc2:	464f      	mov	r7, r9
    2cc4:	4646      	mov	r6, r8
    2cc6:	0405      	lsls	r5, r0, #16
    2cc8:	0c2d      	lsrs	r5, r5, #16
    2cca:	1c2c      	adds	r4, r5, #0
    2ccc:	b4c0      	push	{r6, r7}
    2cce:	0417      	lsls	r7, r2, #16
    2cd0:	0c16      	lsrs	r6, r2, #16
    2cd2:	0c3f      	lsrs	r7, r7, #16
    2cd4:	4699      	mov	r9, r3
    2cd6:	0c03      	lsrs	r3, r0, #16
    2cd8:	437c      	muls	r4, r7
    2cda:	4375      	muls	r5, r6
    2cdc:	435f      	muls	r7, r3
    2cde:	4373      	muls	r3, r6
    2ce0:	197d      	adds	r5, r7, r5
    2ce2:	0c26      	lsrs	r6, r4, #16
    2ce4:	19ad      	adds	r5, r5, r6
    2ce6:	469c      	mov	ip, r3
    2ce8:	42af      	cmp	r7, r5
    2cea:	d903      	bls.n	2cf4 <__aeabi_lmul+0x34>
    2cec:	2380      	movs	r3, #128	; 0x80
    2cee:	025b      	lsls	r3, r3, #9
    2cf0:	4698      	mov	r8, r3
    2cf2:	44c4      	add	ip, r8
    2cf4:	464b      	mov	r3, r9
    2cf6:	4351      	muls	r1, r2
    2cf8:	4343      	muls	r3, r0
    2cfa:	0424      	lsls	r4, r4, #16
    2cfc:	0c2e      	lsrs	r6, r5, #16
    2cfe:	0c24      	lsrs	r4, r4, #16
    2d00:	042d      	lsls	r5, r5, #16
    2d02:	4466      	add	r6, ip
    2d04:	192c      	adds	r4, r5, r4
    2d06:	1859      	adds	r1, r3, r1
    2d08:	1989      	adds	r1, r1, r6
    2d0a:	1c20      	adds	r0, r4, #0
    2d0c:	bc0c      	pop	{r2, r3}
    2d0e:	4690      	mov	r8, r2
    2d10:	4699      	mov	r9, r3
    2d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d14 <__libc_init_array>:
    2d14:	4b0e      	ldr	r3, [pc, #56]	; (2d50 <__libc_init_array+0x3c>)
    2d16:	b570      	push	{r4, r5, r6, lr}
    2d18:	2500      	movs	r5, #0
    2d1a:	1c1e      	adds	r6, r3, #0
    2d1c:	4c0d      	ldr	r4, [pc, #52]	; (2d54 <__libc_init_array+0x40>)
    2d1e:	1ae4      	subs	r4, r4, r3
    2d20:	10a4      	asrs	r4, r4, #2
    2d22:	42a5      	cmp	r5, r4
    2d24:	d004      	beq.n	2d30 <__libc_init_array+0x1c>
    2d26:	00ab      	lsls	r3, r5, #2
    2d28:	58f3      	ldr	r3, [r6, r3]
    2d2a:	4798      	blx	r3
    2d2c:	3501      	adds	r5, #1
    2d2e:	e7f8      	b.n	2d22 <__libc_init_array+0xe>
    2d30:	f002 faea 	bl	5308 <_init>
    2d34:	4b08      	ldr	r3, [pc, #32]	; (2d58 <__libc_init_array+0x44>)
    2d36:	2500      	movs	r5, #0
    2d38:	1c1e      	adds	r6, r3, #0
    2d3a:	4c08      	ldr	r4, [pc, #32]	; (2d5c <__libc_init_array+0x48>)
    2d3c:	1ae4      	subs	r4, r4, r3
    2d3e:	10a4      	asrs	r4, r4, #2
    2d40:	42a5      	cmp	r5, r4
    2d42:	d004      	beq.n	2d4e <__libc_init_array+0x3a>
    2d44:	00ab      	lsls	r3, r5, #2
    2d46:	58f3      	ldr	r3, [r6, r3]
    2d48:	4798      	blx	r3
    2d4a:	3501      	adds	r5, #1
    2d4c:	e7f8      	b.n	2d40 <__libc_init_array+0x2c>
    2d4e:	bd70      	pop	{r4, r5, r6, pc}
    2d50:	00005314 	.word	0x00005314
    2d54:	00005314 	.word	0x00005314
    2d58:	00005314 	.word	0x00005314
    2d5c:	00005318 	.word	0x00005318

00002d60 <memcpy>:
    2d60:	2300      	movs	r3, #0
    2d62:	b510      	push	{r4, lr}
    2d64:	4293      	cmp	r3, r2
    2d66:	d003      	beq.n	2d70 <memcpy+0x10>
    2d68:	5ccc      	ldrb	r4, [r1, r3]
    2d6a:	54c4      	strb	r4, [r0, r3]
    2d6c:	3301      	adds	r3, #1
    2d6e:	e7f9      	b.n	2d64 <memcpy+0x4>
    2d70:	bd10      	pop	{r4, pc}

00002d72 <memset>:
    2d72:	1c03      	adds	r3, r0, #0
    2d74:	1882      	adds	r2, r0, r2
    2d76:	4293      	cmp	r3, r2
    2d78:	d002      	beq.n	2d80 <memset+0xe>
    2d7a:	7019      	strb	r1, [r3, #0]
    2d7c:	3301      	adds	r3, #1
    2d7e:	e7fa      	b.n	2d76 <memset+0x4>
    2d80:	4770      	bx	lr
	...

00002d84 <iprintf>:
    2d84:	b40f      	push	{r0, r1, r2, r3}
    2d86:	4b0b      	ldr	r3, [pc, #44]	; (2db4 <iprintf+0x30>)
    2d88:	b513      	push	{r0, r1, r4, lr}
    2d8a:	681c      	ldr	r4, [r3, #0]
    2d8c:	2c00      	cmp	r4, #0
    2d8e:	d005      	beq.n	2d9c <iprintf+0x18>
    2d90:	69a3      	ldr	r3, [r4, #24]
    2d92:	2b00      	cmp	r3, #0
    2d94:	d102      	bne.n	2d9c <iprintf+0x18>
    2d96:	1c20      	adds	r0, r4, #0
    2d98:	f000 fafc 	bl	3394 <__sinit>
    2d9c:	ab05      	add	r3, sp, #20
    2d9e:	1c20      	adds	r0, r4, #0
    2da0:	68a1      	ldr	r1, [r4, #8]
    2da2:	9a04      	ldr	r2, [sp, #16]
    2da4:	9301      	str	r3, [sp, #4]
    2da6:	f000 fccb 	bl	3740 <_vfiprintf_r>
    2daa:	bc16      	pop	{r1, r2, r4}
    2dac:	bc08      	pop	{r3}
    2dae:	b004      	add	sp, #16
    2db0:	4718      	bx	r3
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	20000078 	.word	0x20000078

00002db8 <_puts_r>:
    2db8:	b570      	push	{r4, r5, r6, lr}
    2dba:	1c05      	adds	r5, r0, #0
    2dbc:	1c0e      	adds	r6, r1, #0
    2dbe:	2800      	cmp	r0, #0
    2dc0:	d004      	beq.n	2dcc <_puts_r+0x14>
    2dc2:	6983      	ldr	r3, [r0, #24]
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d101      	bne.n	2dcc <_puts_r+0x14>
    2dc8:	f000 fae4 	bl	3394 <__sinit>
    2dcc:	68ac      	ldr	r4, [r5, #8]
    2dce:	89a3      	ldrh	r3, [r4, #12]
    2dd0:	071b      	lsls	r3, r3, #28
    2dd2:	d502      	bpl.n	2dda <_puts_r+0x22>
    2dd4:	6923      	ldr	r3, [r4, #16]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d119      	bne.n	2e0e <_puts_r+0x56>
    2dda:	1c28      	adds	r0, r5, #0
    2ddc:	1c21      	adds	r1, r4, #0
    2dde:	f000 f959 	bl	3094 <__swsetup_r>
    2de2:	2800      	cmp	r0, #0
    2de4:	d013      	beq.n	2e0e <_puts_r+0x56>
    2de6:	2001      	movs	r0, #1
    2de8:	4240      	negs	r0, r0
    2dea:	e045      	b.n	2e78 <_puts_r+0xc0>
    2dec:	7831      	ldrb	r1, [r6, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	da1b      	bge.n	2e2a <_puts_r+0x72>
    2df2:	69a2      	ldr	r2, [r4, #24]
    2df4:	4293      	cmp	r3, r2
    2df6:	da11      	bge.n	2e1c <_puts_r+0x64>
    2df8:	1c22      	adds	r2, r4, #0
    2dfa:	1c28      	adds	r0, r5, #0
    2dfc:	f000 f8f2 	bl	2fe4 <__swbuf_r>
    2e00:	3001      	adds	r0, #1
    2e02:	4242      	negs	r2, r0
    2e04:	4142      	adcs	r2, r0
    2e06:	b2d0      	uxtb	r0, r2
    2e08:	2800      	cmp	r0, #0
    2e0a:	d1ec      	bne.n	2de6 <_puts_r+0x2e>
    2e0c:	3601      	adds	r6, #1
    2e0e:	68a3      	ldr	r3, [r4, #8]
    2e10:	7832      	ldrb	r2, [r6, #0]
    2e12:	3b01      	subs	r3, #1
    2e14:	60a3      	str	r3, [r4, #8]
    2e16:	2a00      	cmp	r2, #0
    2e18:	d1e8      	bne.n	2dec <_puts_r+0x34>
    2e1a:	e00c      	b.n	2e36 <_puts_r+0x7e>
    2e1c:	6823      	ldr	r3, [r4, #0]
    2e1e:	7019      	strb	r1, [r3, #0]
    2e20:	6823      	ldr	r3, [r4, #0]
    2e22:	7819      	ldrb	r1, [r3, #0]
    2e24:	290a      	cmp	r1, #10
    2e26:	d103      	bne.n	2e30 <_puts_r+0x78>
    2e28:	e7e6      	b.n	2df8 <_puts_r+0x40>
    2e2a:	6823      	ldr	r3, [r4, #0]
    2e2c:	7019      	strb	r1, [r3, #0]
    2e2e:	6823      	ldr	r3, [r4, #0]
    2e30:	3301      	adds	r3, #1
    2e32:	6023      	str	r3, [r4, #0]
    2e34:	e7ea      	b.n	2e0c <_puts_r+0x54>
    2e36:	2b00      	cmp	r3, #0
    2e38:	da17      	bge.n	2e6a <_puts_r+0xb2>
    2e3a:	69a2      	ldr	r2, [r4, #24]
    2e3c:	4293      	cmp	r3, r2
    2e3e:	db08      	blt.n	2e52 <_puts_r+0x9a>
    2e40:	230a      	movs	r3, #10
    2e42:	6822      	ldr	r2, [r4, #0]
    2e44:	7013      	strb	r3, [r2, #0]
    2e46:	6823      	ldr	r3, [r4, #0]
    2e48:	7819      	ldrb	r1, [r3, #0]
    2e4a:	290a      	cmp	r1, #10
    2e4c:	d111      	bne.n	2e72 <_puts_r+0xba>
    2e4e:	1c28      	adds	r0, r5, #0
    2e50:	e001      	b.n	2e56 <_puts_r+0x9e>
    2e52:	1c28      	adds	r0, r5, #0
    2e54:	210a      	movs	r1, #10
    2e56:	1c22      	adds	r2, r4, #0
    2e58:	f000 f8c4 	bl	2fe4 <__swbuf_r>
    2e5c:	3001      	adds	r0, #1
    2e5e:	4242      	negs	r2, r0
    2e60:	4142      	adcs	r2, r0
    2e62:	b2d0      	uxtb	r0, r2
    2e64:	2800      	cmp	r0, #0
    2e66:	d006      	beq.n	2e76 <_puts_r+0xbe>
    2e68:	e7bd      	b.n	2de6 <_puts_r+0x2e>
    2e6a:	230a      	movs	r3, #10
    2e6c:	6822      	ldr	r2, [r4, #0]
    2e6e:	7013      	strb	r3, [r2, #0]
    2e70:	6823      	ldr	r3, [r4, #0]
    2e72:	3301      	adds	r3, #1
    2e74:	6023      	str	r3, [r4, #0]
    2e76:	200a      	movs	r0, #10
    2e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00002e7c <puts>:
    2e7c:	b508      	push	{r3, lr}
    2e7e:	4b03      	ldr	r3, [pc, #12]	; (2e8c <puts+0x10>)
    2e80:	1c01      	adds	r1, r0, #0
    2e82:	6818      	ldr	r0, [r3, #0]
    2e84:	f7ff ff98 	bl	2db8 <_puts_r>
    2e88:	bd08      	pop	{r3, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20000078 	.word	0x20000078

00002e90 <iscanf>:
    2e90:	b40f      	push	{r0, r1, r2, r3}
    2e92:	4b0b      	ldr	r3, [pc, #44]	; (2ec0 <iscanf+0x30>)
    2e94:	b513      	push	{r0, r1, r4, lr}
    2e96:	681c      	ldr	r4, [r3, #0]
    2e98:	2c00      	cmp	r4, #0
    2e9a:	d005      	beq.n	2ea8 <iscanf+0x18>
    2e9c:	69a3      	ldr	r3, [r4, #24]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d102      	bne.n	2ea8 <iscanf+0x18>
    2ea2:	1c20      	adds	r0, r4, #0
    2ea4:	f000 fa76 	bl	3394 <__sinit>
    2ea8:	ab05      	add	r3, sp, #20
    2eaa:	1c20      	adds	r0, r4, #0
    2eac:	6861      	ldr	r1, [r4, #4]
    2eae:	9a04      	ldr	r2, [sp, #16]
    2eb0:	9301      	str	r3, [sp, #4]
    2eb2:	f001 f853 	bl	3f5c <_vfiscanf_r>
    2eb6:	bc16      	pop	{r1, r2, r4}
    2eb8:	bc08      	pop	{r3}
    2eba:	b004      	add	sp, #16
    2ebc:	4718      	bx	r3
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	20000078 	.word	0x20000078

00002ec4 <setbuf>:
    2ec4:	b508      	push	{r3, lr}
    2ec6:	424a      	negs	r2, r1
    2ec8:	414a      	adcs	r2, r1
    2eca:	2380      	movs	r3, #128	; 0x80
    2ecc:	0052      	lsls	r2, r2, #1
    2ece:	00db      	lsls	r3, r3, #3
    2ed0:	f000 f802 	bl	2ed8 <setvbuf>
    2ed4:	bd08      	pop	{r3, pc}
	...

00002ed8 <setvbuf>:
    2ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2eda:	1c1e      	adds	r6, r3, #0
    2edc:	4b3c      	ldr	r3, [pc, #240]	; (2fd0 <setvbuf+0xf8>)
    2ede:	1c04      	adds	r4, r0, #0
    2ee0:	681d      	ldr	r5, [r3, #0]
    2ee2:	1c0f      	adds	r7, r1, #0
    2ee4:	9201      	str	r2, [sp, #4]
    2ee6:	2d00      	cmp	r5, #0
    2ee8:	d005      	beq.n	2ef6 <setvbuf+0x1e>
    2eea:	69ab      	ldr	r3, [r5, #24]
    2eec:	2b00      	cmp	r3, #0
    2eee:	d102      	bne.n	2ef6 <setvbuf+0x1e>
    2ef0:	1c28      	adds	r0, r5, #0
    2ef2:	f000 fa4f 	bl	3394 <__sinit>
    2ef6:	4b37      	ldr	r3, [pc, #220]	; (2fd4 <setvbuf+0xfc>)
    2ef8:	429c      	cmp	r4, r3
    2efa:	d101      	bne.n	2f00 <setvbuf+0x28>
    2efc:	686c      	ldr	r4, [r5, #4]
    2efe:	e008      	b.n	2f12 <setvbuf+0x3a>
    2f00:	4b35      	ldr	r3, [pc, #212]	; (2fd8 <setvbuf+0x100>)
    2f02:	429c      	cmp	r4, r3
    2f04:	d101      	bne.n	2f0a <setvbuf+0x32>
    2f06:	68ac      	ldr	r4, [r5, #8]
    2f08:	e003      	b.n	2f12 <setvbuf+0x3a>
    2f0a:	4b34      	ldr	r3, [pc, #208]	; (2fdc <setvbuf+0x104>)
    2f0c:	429c      	cmp	r4, r3
    2f0e:	d100      	bne.n	2f12 <setvbuf+0x3a>
    2f10:	68ec      	ldr	r4, [r5, #12]
    2f12:	9b01      	ldr	r3, [sp, #4]
    2f14:	2b02      	cmp	r3, #2
    2f16:	d858      	bhi.n	2fca <setvbuf+0xf2>
    2f18:	2e00      	cmp	r6, #0
    2f1a:	db56      	blt.n	2fca <setvbuf+0xf2>
    2f1c:	1c28      	adds	r0, r5, #0
    2f1e:	1c21      	adds	r1, r4, #0
    2f20:	f000 f9b6 	bl	3290 <_fflush_r>
    2f24:	2300      	movs	r3, #0
    2f26:	6063      	str	r3, [r4, #4]
    2f28:	61a3      	str	r3, [r4, #24]
    2f2a:	89a3      	ldrh	r3, [r4, #12]
    2f2c:	061b      	lsls	r3, r3, #24
    2f2e:	d503      	bpl.n	2f38 <setvbuf+0x60>
    2f30:	1c28      	adds	r0, r5, #0
    2f32:	6921      	ldr	r1, [r4, #16]
    2f34:	f000 fb3e 	bl	35b4 <_free_r>
    2f38:	2283      	movs	r2, #131	; 0x83
    2f3a:	89a3      	ldrh	r3, [r4, #12]
    2f3c:	4393      	bics	r3, r2
    2f3e:	81a3      	strh	r3, [r4, #12]
    2f40:	9b01      	ldr	r3, [sp, #4]
    2f42:	2b02      	cmp	r3, #2
    2f44:	d013      	beq.n	2f6e <setvbuf+0x96>
    2f46:	2f00      	cmp	r7, #0
    2f48:	d125      	bne.n	2f96 <setvbuf+0xbe>
    2f4a:	2e00      	cmp	r6, #0
    2f4c:	d101      	bne.n	2f52 <setvbuf+0x7a>
    2f4e:	2680      	movs	r6, #128	; 0x80
    2f50:	00f6      	lsls	r6, r6, #3
    2f52:	1c30      	adds	r0, r6, #0
    2f54:	f000 fb24 	bl	35a0 <malloc>
    2f58:	1e07      	subs	r7, r0, #0
    2f5a:	d118      	bne.n	2f8e <setvbuf+0xb6>
    2f5c:	2080      	movs	r0, #128	; 0x80
    2f5e:	00c0      	lsls	r0, r0, #3
    2f60:	f000 fb1e 	bl	35a0 <malloc>
    2f64:	1e07      	subs	r7, r0, #0
    2f66:	d110      	bne.n	2f8a <setvbuf+0xb2>
    2f68:	2001      	movs	r0, #1
    2f6a:	4240      	negs	r0, r0
    2f6c:	e000      	b.n	2f70 <setvbuf+0x98>
    2f6e:	2000      	movs	r0, #0
    2f70:	2202      	movs	r2, #2
    2f72:	89a3      	ldrh	r3, [r4, #12]
    2f74:	4313      	orrs	r3, r2
    2f76:	81a3      	strh	r3, [r4, #12]
    2f78:	2300      	movs	r3, #0
    2f7a:	60a3      	str	r3, [r4, #8]
    2f7c:	1c23      	adds	r3, r4, #0
    2f7e:	3347      	adds	r3, #71	; 0x47
    2f80:	6023      	str	r3, [r4, #0]
    2f82:	6123      	str	r3, [r4, #16]
    2f84:	2301      	movs	r3, #1
    2f86:	6163      	str	r3, [r4, #20]
    2f88:	e021      	b.n	2fce <setvbuf+0xf6>
    2f8a:	2680      	movs	r6, #128	; 0x80
    2f8c:	00f6      	lsls	r6, r6, #3
    2f8e:	2280      	movs	r2, #128	; 0x80
    2f90:	89a3      	ldrh	r3, [r4, #12]
    2f92:	4313      	orrs	r3, r2
    2f94:	81a3      	strh	r3, [r4, #12]
    2f96:	9b01      	ldr	r3, [sp, #4]
    2f98:	2b01      	cmp	r3, #1
    2f9a:	d105      	bne.n	2fa8 <setvbuf+0xd0>
    2f9c:	89a3      	ldrh	r3, [r4, #12]
    2f9e:	9a01      	ldr	r2, [sp, #4]
    2fa0:	431a      	orrs	r2, r3
    2fa2:	4273      	negs	r3, r6
    2fa4:	81a2      	strh	r2, [r4, #12]
    2fa6:	61a3      	str	r3, [r4, #24]
    2fa8:	4b0d      	ldr	r3, [pc, #52]	; (2fe0 <setvbuf+0x108>)
    2faa:	2000      	movs	r0, #0
    2fac:	62ab      	str	r3, [r5, #40]	; 0x28
    2fae:	89a2      	ldrh	r2, [r4, #12]
    2fb0:	6027      	str	r7, [r4, #0]
    2fb2:	6127      	str	r7, [r4, #16]
    2fb4:	6166      	str	r6, [r4, #20]
    2fb6:	0713      	lsls	r3, r2, #28
    2fb8:	d509      	bpl.n	2fce <setvbuf+0xf6>
    2fba:	2303      	movs	r3, #3
    2fbc:	401a      	ands	r2, r3
    2fbe:	4253      	negs	r3, r2
    2fc0:	4153      	adcs	r3, r2
    2fc2:	425b      	negs	r3, r3
    2fc4:	401e      	ands	r6, r3
    2fc6:	60a6      	str	r6, [r4, #8]
    2fc8:	e001      	b.n	2fce <setvbuf+0xf6>
    2fca:	2001      	movs	r0, #1
    2fcc:	4240      	negs	r0, r0
    2fce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2fd0:	20000078 	.word	0x20000078
    2fd4:	0000514c 	.word	0x0000514c
    2fd8:	0000516c 	.word	0x0000516c
    2fdc:	0000518c 	.word	0x0000518c
    2fe0:	00003311 	.word	0x00003311

00002fe4 <__swbuf_r>:
    2fe4:	b570      	push	{r4, r5, r6, lr}
    2fe6:	1c05      	adds	r5, r0, #0
    2fe8:	1c0e      	adds	r6, r1, #0
    2fea:	1c14      	adds	r4, r2, #0
    2fec:	2800      	cmp	r0, #0
    2fee:	d004      	beq.n	2ffa <__swbuf_r+0x16>
    2ff0:	6983      	ldr	r3, [r0, #24]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d101      	bne.n	2ffa <__swbuf_r+0x16>
    2ff6:	f000 f9cd 	bl	3394 <__sinit>
    2ffa:	4b23      	ldr	r3, [pc, #140]	; (3088 <__swbuf_r+0xa4>)
    2ffc:	429c      	cmp	r4, r3
    2ffe:	d101      	bne.n	3004 <__swbuf_r+0x20>
    3000:	686c      	ldr	r4, [r5, #4]
    3002:	e008      	b.n	3016 <__swbuf_r+0x32>
    3004:	4b21      	ldr	r3, [pc, #132]	; (308c <__swbuf_r+0xa8>)
    3006:	429c      	cmp	r4, r3
    3008:	d101      	bne.n	300e <__swbuf_r+0x2a>
    300a:	68ac      	ldr	r4, [r5, #8]
    300c:	e003      	b.n	3016 <__swbuf_r+0x32>
    300e:	4b20      	ldr	r3, [pc, #128]	; (3090 <__swbuf_r+0xac>)
    3010:	429c      	cmp	r4, r3
    3012:	d100      	bne.n	3016 <__swbuf_r+0x32>
    3014:	68ec      	ldr	r4, [r5, #12]
    3016:	69a3      	ldr	r3, [r4, #24]
    3018:	60a3      	str	r3, [r4, #8]
    301a:	89a3      	ldrh	r3, [r4, #12]
    301c:	071b      	lsls	r3, r3, #28
    301e:	d50a      	bpl.n	3036 <__swbuf_r+0x52>
    3020:	6923      	ldr	r3, [r4, #16]
    3022:	2b00      	cmp	r3, #0
    3024:	d007      	beq.n	3036 <__swbuf_r+0x52>
    3026:	6823      	ldr	r3, [r4, #0]
    3028:	6922      	ldr	r2, [r4, #16]
    302a:	b2f6      	uxtb	r6, r6
    302c:	1a98      	subs	r0, r3, r2
    302e:	6963      	ldr	r3, [r4, #20]
    3030:	4298      	cmp	r0, r3
    3032:	db0f      	blt.n	3054 <__swbuf_r+0x70>
    3034:	e008      	b.n	3048 <__swbuf_r+0x64>
    3036:	1c28      	adds	r0, r5, #0
    3038:	1c21      	adds	r1, r4, #0
    303a:	f000 f82b 	bl	3094 <__swsetup_r>
    303e:	2800      	cmp	r0, #0
    3040:	d0f1      	beq.n	3026 <__swbuf_r+0x42>
    3042:	2001      	movs	r0, #1
    3044:	4240      	negs	r0, r0
    3046:	e01d      	b.n	3084 <__swbuf_r+0xa0>
    3048:	1c28      	adds	r0, r5, #0
    304a:	1c21      	adds	r1, r4, #0
    304c:	f000 f920 	bl	3290 <_fflush_r>
    3050:	2800      	cmp	r0, #0
    3052:	d1f6      	bne.n	3042 <__swbuf_r+0x5e>
    3054:	68a3      	ldr	r3, [r4, #8]
    3056:	3001      	adds	r0, #1
    3058:	3b01      	subs	r3, #1
    305a:	60a3      	str	r3, [r4, #8]
    305c:	6823      	ldr	r3, [r4, #0]
    305e:	1c5a      	adds	r2, r3, #1
    3060:	6022      	str	r2, [r4, #0]
    3062:	701e      	strb	r6, [r3, #0]
    3064:	6963      	ldr	r3, [r4, #20]
    3066:	4298      	cmp	r0, r3
    3068:	d005      	beq.n	3076 <__swbuf_r+0x92>
    306a:	89a3      	ldrh	r3, [r4, #12]
    306c:	1c30      	adds	r0, r6, #0
    306e:	07db      	lsls	r3, r3, #31
    3070:	d508      	bpl.n	3084 <__swbuf_r+0xa0>
    3072:	2e0a      	cmp	r6, #10
    3074:	d106      	bne.n	3084 <__swbuf_r+0xa0>
    3076:	1c28      	adds	r0, r5, #0
    3078:	1c21      	adds	r1, r4, #0
    307a:	f000 f909 	bl	3290 <_fflush_r>
    307e:	2800      	cmp	r0, #0
    3080:	d1df      	bne.n	3042 <__swbuf_r+0x5e>
    3082:	1c30      	adds	r0, r6, #0
    3084:	bd70      	pop	{r4, r5, r6, pc}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	0000514c 	.word	0x0000514c
    308c:	0000516c 	.word	0x0000516c
    3090:	0000518c 	.word	0x0000518c

00003094 <__swsetup_r>:
    3094:	4b35      	ldr	r3, [pc, #212]	; (316c <__swsetup_r+0xd8>)
    3096:	b570      	push	{r4, r5, r6, lr}
    3098:	681d      	ldr	r5, [r3, #0]
    309a:	1c06      	adds	r6, r0, #0
    309c:	1c0c      	adds	r4, r1, #0
    309e:	2d00      	cmp	r5, #0
    30a0:	d005      	beq.n	30ae <__swsetup_r+0x1a>
    30a2:	69ab      	ldr	r3, [r5, #24]
    30a4:	2b00      	cmp	r3, #0
    30a6:	d102      	bne.n	30ae <__swsetup_r+0x1a>
    30a8:	1c28      	adds	r0, r5, #0
    30aa:	f000 f973 	bl	3394 <__sinit>
    30ae:	4b30      	ldr	r3, [pc, #192]	; (3170 <__swsetup_r+0xdc>)
    30b0:	429c      	cmp	r4, r3
    30b2:	d101      	bne.n	30b8 <__swsetup_r+0x24>
    30b4:	686c      	ldr	r4, [r5, #4]
    30b6:	e008      	b.n	30ca <__swsetup_r+0x36>
    30b8:	4b2e      	ldr	r3, [pc, #184]	; (3174 <__swsetup_r+0xe0>)
    30ba:	429c      	cmp	r4, r3
    30bc:	d101      	bne.n	30c2 <__swsetup_r+0x2e>
    30be:	68ac      	ldr	r4, [r5, #8]
    30c0:	e003      	b.n	30ca <__swsetup_r+0x36>
    30c2:	4b2d      	ldr	r3, [pc, #180]	; (3178 <__swsetup_r+0xe4>)
    30c4:	429c      	cmp	r4, r3
    30c6:	d100      	bne.n	30ca <__swsetup_r+0x36>
    30c8:	68ec      	ldr	r4, [r5, #12]
    30ca:	89a3      	ldrh	r3, [r4, #12]
    30cc:	b29a      	uxth	r2, r3
    30ce:	0711      	lsls	r1, r2, #28
    30d0:	d423      	bmi.n	311a <__swsetup_r+0x86>
    30d2:	06d1      	lsls	r1, r2, #27
    30d4:	d407      	bmi.n	30e6 <__swsetup_r+0x52>
    30d6:	2209      	movs	r2, #9
    30d8:	2001      	movs	r0, #1
    30da:	6032      	str	r2, [r6, #0]
    30dc:	3237      	adds	r2, #55	; 0x37
    30de:	4313      	orrs	r3, r2
    30e0:	81a3      	strh	r3, [r4, #12]
    30e2:	4240      	negs	r0, r0
    30e4:	e040      	b.n	3168 <__swsetup_r+0xd4>
    30e6:	0753      	lsls	r3, r2, #29
    30e8:	d513      	bpl.n	3112 <__swsetup_r+0x7e>
    30ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    30ec:	2900      	cmp	r1, #0
    30ee:	d008      	beq.n	3102 <__swsetup_r+0x6e>
    30f0:	1c23      	adds	r3, r4, #0
    30f2:	3344      	adds	r3, #68	; 0x44
    30f4:	4299      	cmp	r1, r3
    30f6:	d002      	beq.n	30fe <__swsetup_r+0x6a>
    30f8:	1c30      	adds	r0, r6, #0
    30fa:	f000 fa5b 	bl	35b4 <_free_r>
    30fe:	2300      	movs	r3, #0
    3100:	6363      	str	r3, [r4, #52]	; 0x34
    3102:	2224      	movs	r2, #36	; 0x24
    3104:	89a3      	ldrh	r3, [r4, #12]
    3106:	4393      	bics	r3, r2
    3108:	81a3      	strh	r3, [r4, #12]
    310a:	2300      	movs	r3, #0
    310c:	6063      	str	r3, [r4, #4]
    310e:	6923      	ldr	r3, [r4, #16]
    3110:	6023      	str	r3, [r4, #0]
    3112:	2208      	movs	r2, #8
    3114:	89a3      	ldrh	r3, [r4, #12]
    3116:	4313      	orrs	r3, r2
    3118:	81a3      	strh	r3, [r4, #12]
    311a:	6923      	ldr	r3, [r4, #16]
    311c:	2b00      	cmp	r3, #0
    311e:	d10b      	bne.n	3138 <__swsetup_r+0xa4>
    3120:	23a0      	movs	r3, #160	; 0xa0
    3122:	89a2      	ldrh	r2, [r4, #12]
    3124:	009b      	lsls	r3, r3, #2
    3126:	4013      	ands	r3, r2
    3128:	2280      	movs	r2, #128	; 0x80
    312a:	0092      	lsls	r2, r2, #2
    312c:	4293      	cmp	r3, r2
    312e:	d003      	beq.n	3138 <__swsetup_r+0xa4>
    3130:	1c30      	adds	r0, r6, #0
    3132:	1c21      	adds	r1, r4, #0
    3134:	f000 f9dc 	bl	34f0 <__smakebuf_r>
    3138:	2301      	movs	r3, #1
    313a:	89a2      	ldrh	r2, [r4, #12]
    313c:	4013      	ands	r3, r2
    313e:	d005      	beq.n	314c <__swsetup_r+0xb8>
    3140:	2300      	movs	r3, #0
    3142:	60a3      	str	r3, [r4, #8]
    3144:	6963      	ldr	r3, [r4, #20]
    3146:	425b      	negs	r3, r3
    3148:	61a3      	str	r3, [r4, #24]
    314a:	e003      	b.n	3154 <__swsetup_r+0xc0>
    314c:	0791      	lsls	r1, r2, #30
    314e:	d400      	bmi.n	3152 <__swsetup_r+0xbe>
    3150:	6963      	ldr	r3, [r4, #20]
    3152:	60a3      	str	r3, [r4, #8]
    3154:	2000      	movs	r0, #0
    3156:	6923      	ldr	r3, [r4, #16]
    3158:	4283      	cmp	r3, r0
    315a:	d105      	bne.n	3168 <__swsetup_r+0xd4>
    315c:	0613      	lsls	r3, r2, #24
    315e:	d503      	bpl.n	3168 <__swsetup_r+0xd4>
    3160:	2340      	movs	r3, #64	; 0x40
    3162:	431a      	orrs	r2, r3
    3164:	81a2      	strh	r2, [r4, #12]
    3166:	3801      	subs	r0, #1
    3168:	bd70      	pop	{r4, r5, r6, pc}
    316a:	46c0      	nop			; (mov r8, r8)
    316c:	20000078 	.word	0x20000078
    3170:	0000514c 	.word	0x0000514c
    3174:	0000516c 	.word	0x0000516c
    3178:	0000518c 	.word	0x0000518c

0000317c <__sflush_r>:
    317c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    317e:	898a      	ldrh	r2, [r1, #12]
    3180:	1c05      	adds	r5, r0, #0
    3182:	1c0c      	adds	r4, r1, #0
    3184:	0713      	lsls	r3, r2, #28
    3186:	d45e      	bmi.n	3246 <__sflush_r+0xca>
    3188:	684b      	ldr	r3, [r1, #4]
    318a:	2b00      	cmp	r3, #0
    318c:	dc02      	bgt.n	3194 <__sflush_r+0x18>
    318e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3190:	2b00      	cmp	r3, #0
    3192:	dd1a      	ble.n	31ca <__sflush_r+0x4e>
    3194:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3196:	2f00      	cmp	r7, #0
    3198:	d017      	beq.n	31ca <__sflush_r+0x4e>
    319a:	2300      	movs	r3, #0
    319c:	682e      	ldr	r6, [r5, #0]
    319e:	602b      	str	r3, [r5, #0]
    31a0:	2380      	movs	r3, #128	; 0x80
    31a2:	015b      	lsls	r3, r3, #5
    31a4:	401a      	ands	r2, r3
    31a6:	d001      	beq.n	31ac <__sflush_r+0x30>
    31a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    31aa:	e015      	b.n	31d8 <__sflush_r+0x5c>
    31ac:	1c28      	adds	r0, r5, #0
    31ae:	6a21      	ldr	r1, [r4, #32]
    31b0:	2301      	movs	r3, #1
    31b2:	47b8      	blx	r7
    31b4:	1c02      	adds	r2, r0, #0
    31b6:	1c43      	adds	r3, r0, #1
    31b8:	d10e      	bne.n	31d8 <__sflush_r+0x5c>
    31ba:	682b      	ldr	r3, [r5, #0]
    31bc:	2b00      	cmp	r3, #0
    31be:	d00b      	beq.n	31d8 <__sflush_r+0x5c>
    31c0:	2b1d      	cmp	r3, #29
    31c2:	d001      	beq.n	31c8 <__sflush_r+0x4c>
    31c4:	2b16      	cmp	r3, #22
    31c6:	d102      	bne.n	31ce <__sflush_r+0x52>
    31c8:	602e      	str	r6, [r5, #0]
    31ca:	2000      	movs	r0, #0
    31cc:	e05e      	b.n	328c <__sflush_r+0x110>
    31ce:	2140      	movs	r1, #64	; 0x40
    31d0:	89a3      	ldrh	r3, [r4, #12]
    31d2:	430b      	orrs	r3, r1
    31d4:	81a3      	strh	r3, [r4, #12]
    31d6:	e059      	b.n	328c <__sflush_r+0x110>
    31d8:	89a3      	ldrh	r3, [r4, #12]
    31da:	075b      	lsls	r3, r3, #29
    31dc:	d506      	bpl.n	31ec <__sflush_r+0x70>
    31de:	6863      	ldr	r3, [r4, #4]
    31e0:	1ad2      	subs	r2, r2, r3
    31e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    31e4:	2b00      	cmp	r3, #0
    31e6:	d001      	beq.n	31ec <__sflush_r+0x70>
    31e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    31ea:	1ad2      	subs	r2, r2, r3
    31ec:	2300      	movs	r3, #0
    31ee:	1c28      	adds	r0, r5, #0
    31f0:	6a21      	ldr	r1, [r4, #32]
    31f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    31f4:	47b8      	blx	r7
    31f6:	89a3      	ldrh	r3, [r4, #12]
    31f8:	1c42      	adds	r2, r0, #1
    31fa:	d106      	bne.n	320a <__sflush_r+0x8e>
    31fc:	682a      	ldr	r2, [r5, #0]
    31fe:	2a00      	cmp	r2, #0
    3200:	d003      	beq.n	320a <__sflush_r+0x8e>
    3202:	2a1d      	cmp	r2, #29
    3204:	d001      	beq.n	320a <__sflush_r+0x8e>
    3206:	2a16      	cmp	r2, #22
    3208:	d119      	bne.n	323e <__sflush_r+0xc2>
    320a:	2200      	movs	r2, #0
    320c:	6062      	str	r2, [r4, #4]
    320e:	6922      	ldr	r2, [r4, #16]
    3210:	6022      	str	r2, [r4, #0]
    3212:	04db      	lsls	r3, r3, #19
    3214:	d505      	bpl.n	3222 <__sflush_r+0xa6>
    3216:	1c43      	adds	r3, r0, #1
    3218:	d102      	bne.n	3220 <__sflush_r+0xa4>
    321a:	682b      	ldr	r3, [r5, #0]
    321c:	2b00      	cmp	r3, #0
    321e:	d100      	bne.n	3222 <__sflush_r+0xa6>
    3220:	6560      	str	r0, [r4, #84]	; 0x54
    3222:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3224:	602e      	str	r6, [r5, #0]
    3226:	2900      	cmp	r1, #0
    3228:	d0cf      	beq.n	31ca <__sflush_r+0x4e>
    322a:	1c23      	adds	r3, r4, #0
    322c:	3344      	adds	r3, #68	; 0x44
    322e:	4299      	cmp	r1, r3
    3230:	d002      	beq.n	3238 <__sflush_r+0xbc>
    3232:	1c28      	adds	r0, r5, #0
    3234:	f000 f9be 	bl	35b4 <_free_r>
    3238:	2000      	movs	r0, #0
    323a:	6360      	str	r0, [r4, #52]	; 0x34
    323c:	e026      	b.n	328c <__sflush_r+0x110>
    323e:	2240      	movs	r2, #64	; 0x40
    3240:	4313      	orrs	r3, r2
    3242:	81a3      	strh	r3, [r4, #12]
    3244:	e022      	b.n	328c <__sflush_r+0x110>
    3246:	690f      	ldr	r7, [r1, #16]
    3248:	2f00      	cmp	r7, #0
    324a:	d0be      	beq.n	31ca <__sflush_r+0x4e>
    324c:	680b      	ldr	r3, [r1, #0]
    324e:	600f      	str	r7, [r1, #0]
    3250:	1bdb      	subs	r3, r3, r7
    3252:	9301      	str	r3, [sp, #4]
    3254:	2300      	movs	r3, #0
    3256:	0792      	lsls	r2, r2, #30
    3258:	d100      	bne.n	325c <__sflush_r+0xe0>
    325a:	694b      	ldr	r3, [r1, #20]
    325c:	60a3      	str	r3, [r4, #8]
    325e:	9b01      	ldr	r3, [sp, #4]
    3260:	2b00      	cmp	r3, #0
    3262:	ddb2      	ble.n	31ca <__sflush_r+0x4e>
    3264:	1c28      	adds	r0, r5, #0
    3266:	6a21      	ldr	r1, [r4, #32]
    3268:	1c3a      	adds	r2, r7, #0
    326a:	9b01      	ldr	r3, [sp, #4]
    326c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    326e:	47b0      	blx	r6
    3270:	2800      	cmp	r0, #0
    3272:	dc06      	bgt.n	3282 <__sflush_r+0x106>
    3274:	2240      	movs	r2, #64	; 0x40
    3276:	2001      	movs	r0, #1
    3278:	89a3      	ldrh	r3, [r4, #12]
    327a:	4240      	negs	r0, r0
    327c:	4313      	orrs	r3, r2
    327e:	81a3      	strh	r3, [r4, #12]
    3280:	e004      	b.n	328c <__sflush_r+0x110>
    3282:	9b01      	ldr	r3, [sp, #4]
    3284:	183f      	adds	r7, r7, r0
    3286:	1a1b      	subs	r3, r3, r0
    3288:	9301      	str	r3, [sp, #4]
    328a:	e7e8      	b.n	325e <__sflush_r+0xe2>
    328c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003290 <_fflush_r>:
    3290:	b538      	push	{r3, r4, r5, lr}
    3292:	690b      	ldr	r3, [r1, #16]
    3294:	1c05      	adds	r5, r0, #0
    3296:	1c0c      	adds	r4, r1, #0
    3298:	2b00      	cmp	r3, #0
    329a:	d101      	bne.n	32a0 <_fflush_r+0x10>
    329c:	2000      	movs	r0, #0
    329e:	e01c      	b.n	32da <_fflush_r+0x4a>
    32a0:	2800      	cmp	r0, #0
    32a2:	d004      	beq.n	32ae <_fflush_r+0x1e>
    32a4:	6983      	ldr	r3, [r0, #24]
    32a6:	2b00      	cmp	r3, #0
    32a8:	d101      	bne.n	32ae <_fflush_r+0x1e>
    32aa:	f000 f873 	bl	3394 <__sinit>
    32ae:	4b0b      	ldr	r3, [pc, #44]	; (32dc <_fflush_r+0x4c>)
    32b0:	429c      	cmp	r4, r3
    32b2:	d101      	bne.n	32b8 <_fflush_r+0x28>
    32b4:	686c      	ldr	r4, [r5, #4]
    32b6:	e008      	b.n	32ca <_fflush_r+0x3a>
    32b8:	4b09      	ldr	r3, [pc, #36]	; (32e0 <_fflush_r+0x50>)
    32ba:	429c      	cmp	r4, r3
    32bc:	d101      	bne.n	32c2 <_fflush_r+0x32>
    32be:	68ac      	ldr	r4, [r5, #8]
    32c0:	e003      	b.n	32ca <_fflush_r+0x3a>
    32c2:	4b08      	ldr	r3, [pc, #32]	; (32e4 <_fflush_r+0x54>)
    32c4:	429c      	cmp	r4, r3
    32c6:	d100      	bne.n	32ca <_fflush_r+0x3a>
    32c8:	68ec      	ldr	r4, [r5, #12]
    32ca:	220c      	movs	r2, #12
    32cc:	5ea3      	ldrsh	r3, [r4, r2]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d0e4      	beq.n	329c <_fflush_r+0xc>
    32d2:	1c28      	adds	r0, r5, #0
    32d4:	1c21      	adds	r1, r4, #0
    32d6:	f7ff ff51 	bl	317c <__sflush_r>
    32da:	bd38      	pop	{r3, r4, r5, pc}
    32dc:	0000514c 	.word	0x0000514c
    32e0:	0000516c 	.word	0x0000516c
    32e4:	0000518c 	.word	0x0000518c

000032e8 <fflush>:
    32e8:	b508      	push	{r3, lr}
    32ea:	1e01      	subs	r1, r0, #0
    32ec:	d105      	bne.n	32fa <fflush+0x12>
    32ee:	4b05      	ldr	r3, [pc, #20]	; (3304 <fflush+0x1c>)
    32f0:	4905      	ldr	r1, [pc, #20]	; (3308 <fflush+0x20>)
    32f2:	6818      	ldr	r0, [r3, #0]
    32f4:	f000 f8da 	bl	34ac <_fwalk_reent>
    32f8:	e003      	b.n	3302 <fflush+0x1a>
    32fa:	4b04      	ldr	r3, [pc, #16]	; (330c <fflush+0x24>)
    32fc:	6818      	ldr	r0, [r3, #0]
    32fe:	f7ff ffc7 	bl	3290 <_fflush_r>
    3302:	bd08      	pop	{r3, pc}
    3304:	00005148 	.word	0x00005148
    3308:	00003291 	.word	0x00003291
    330c:	20000078 	.word	0x20000078

00003310 <_cleanup_r>:
    3310:	b508      	push	{r3, lr}
    3312:	4902      	ldr	r1, [pc, #8]	; (331c <_cleanup_r+0xc>)
    3314:	f000 f8ca 	bl	34ac <_fwalk_reent>
    3318:	bd08      	pop	{r3, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	00003291 	.word	0x00003291

00003320 <std.isra.0>:
    3320:	2300      	movs	r3, #0
    3322:	b510      	push	{r4, lr}
    3324:	1c04      	adds	r4, r0, #0
    3326:	6003      	str	r3, [r0, #0]
    3328:	6043      	str	r3, [r0, #4]
    332a:	6083      	str	r3, [r0, #8]
    332c:	8181      	strh	r1, [r0, #12]
    332e:	6643      	str	r3, [r0, #100]	; 0x64
    3330:	81c2      	strh	r2, [r0, #14]
    3332:	6103      	str	r3, [r0, #16]
    3334:	6143      	str	r3, [r0, #20]
    3336:	6183      	str	r3, [r0, #24]
    3338:	1c19      	adds	r1, r3, #0
    333a:	2208      	movs	r2, #8
    333c:	305c      	adds	r0, #92	; 0x5c
    333e:	f7ff fd18 	bl	2d72 <memset>
    3342:	4b05      	ldr	r3, [pc, #20]	; (3358 <std.isra.0+0x38>)
    3344:	6224      	str	r4, [r4, #32]
    3346:	6263      	str	r3, [r4, #36]	; 0x24
    3348:	4b04      	ldr	r3, [pc, #16]	; (335c <std.isra.0+0x3c>)
    334a:	62a3      	str	r3, [r4, #40]	; 0x28
    334c:	4b04      	ldr	r3, [pc, #16]	; (3360 <std.isra.0+0x40>)
    334e:	62e3      	str	r3, [r4, #44]	; 0x2c
    3350:	4b04      	ldr	r3, [pc, #16]	; (3364 <std.isra.0+0x44>)
    3352:	6323      	str	r3, [r4, #48]	; 0x30
    3354:	bd10      	pop	{r4, pc}
    3356:	46c0      	nop			; (mov r8, r8)
    3358:	00004421 	.word	0x00004421
    335c:	00004449 	.word	0x00004449
    3360:	00004481 	.word	0x00004481
    3364:	000044ad 	.word	0x000044ad

00003368 <__sfmoreglue>:
    3368:	b570      	push	{r4, r5, r6, lr}
    336a:	2568      	movs	r5, #104	; 0x68
    336c:	1e4b      	subs	r3, r1, #1
    336e:	435d      	muls	r5, r3
    3370:	1c0e      	adds	r6, r1, #0
    3372:	1c29      	adds	r1, r5, #0
    3374:	3174      	adds	r1, #116	; 0x74
    3376:	f000 f963 	bl	3640 <_malloc_r>
    337a:	1e04      	subs	r4, r0, #0
    337c:	d008      	beq.n	3390 <__sfmoreglue+0x28>
    337e:	2100      	movs	r1, #0
    3380:	1c2a      	adds	r2, r5, #0
    3382:	6001      	str	r1, [r0, #0]
    3384:	6046      	str	r6, [r0, #4]
    3386:	300c      	adds	r0, #12
    3388:	60a0      	str	r0, [r4, #8]
    338a:	3268      	adds	r2, #104	; 0x68
    338c:	f7ff fcf1 	bl	2d72 <memset>
    3390:	1c20      	adds	r0, r4, #0
    3392:	bd70      	pop	{r4, r5, r6, pc}

00003394 <__sinit>:
    3394:	6983      	ldr	r3, [r0, #24]
    3396:	b513      	push	{r0, r1, r4, lr}
    3398:	2b00      	cmp	r3, #0
    339a:	d128      	bne.n	33ee <__sinit+0x5a>
    339c:	6483      	str	r3, [r0, #72]	; 0x48
    339e:	64c3      	str	r3, [r0, #76]	; 0x4c
    33a0:	6503      	str	r3, [r0, #80]	; 0x50
    33a2:	4b13      	ldr	r3, [pc, #76]	; (33f0 <__sinit+0x5c>)
    33a4:	4a13      	ldr	r2, [pc, #76]	; (33f4 <__sinit+0x60>)
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	6282      	str	r2, [r0, #40]	; 0x28
    33aa:	9301      	str	r3, [sp, #4]
    33ac:	4298      	cmp	r0, r3
    33ae:	d101      	bne.n	33b4 <__sinit+0x20>
    33b0:	2301      	movs	r3, #1
    33b2:	6183      	str	r3, [r0, #24]
    33b4:	1c04      	adds	r4, r0, #0
    33b6:	f000 f81f 	bl	33f8 <__sfp>
    33ba:	6060      	str	r0, [r4, #4]
    33bc:	1c20      	adds	r0, r4, #0
    33be:	f000 f81b 	bl	33f8 <__sfp>
    33c2:	60a0      	str	r0, [r4, #8]
    33c4:	1c20      	adds	r0, r4, #0
    33c6:	f000 f817 	bl	33f8 <__sfp>
    33ca:	2104      	movs	r1, #4
    33cc:	60e0      	str	r0, [r4, #12]
    33ce:	2200      	movs	r2, #0
    33d0:	6860      	ldr	r0, [r4, #4]
    33d2:	f7ff ffa5 	bl	3320 <std.isra.0>
    33d6:	68a0      	ldr	r0, [r4, #8]
    33d8:	2109      	movs	r1, #9
    33da:	2201      	movs	r2, #1
    33dc:	f7ff ffa0 	bl	3320 <std.isra.0>
    33e0:	68e0      	ldr	r0, [r4, #12]
    33e2:	2112      	movs	r1, #18
    33e4:	2202      	movs	r2, #2
    33e6:	f7ff ff9b 	bl	3320 <std.isra.0>
    33ea:	2301      	movs	r3, #1
    33ec:	61a3      	str	r3, [r4, #24]
    33ee:	bd13      	pop	{r0, r1, r4, pc}
    33f0:	00005148 	.word	0x00005148
    33f4:	00003311 	.word	0x00003311

000033f8 <__sfp>:
    33f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33fa:	4b1d      	ldr	r3, [pc, #116]	; (3470 <__sfp+0x78>)
    33fc:	1c06      	adds	r6, r0, #0
    33fe:	681d      	ldr	r5, [r3, #0]
    3400:	69ab      	ldr	r3, [r5, #24]
    3402:	2b00      	cmp	r3, #0
    3404:	d102      	bne.n	340c <__sfp+0x14>
    3406:	1c28      	adds	r0, r5, #0
    3408:	f7ff ffc4 	bl	3394 <__sinit>
    340c:	3548      	adds	r5, #72	; 0x48
    340e:	68ac      	ldr	r4, [r5, #8]
    3410:	686b      	ldr	r3, [r5, #4]
    3412:	3b01      	subs	r3, #1
    3414:	d405      	bmi.n	3422 <__sfp+0x2a>
    3416:	220c      	movs	r2, #12
    3418:	5ea7      	ldrsh	r7, [r4, r2]
    341a:	2f00      	cmp	r7, #0
    341c:	d010      	beq.n	3440 <__sfp+0x48>
    341e:	3468      	adds	r4, #104	; 0x68
    3420:	e7f7      	b.n	3412 <__sfp+0x1a>
    3422:	682b      	ldr	r3, [r5, #0]
    3424:	2b00      	cmp	r3, #0
    3426:	d106      	bne.n	3436 <__sfp+0x3e>
    3428:	1c30      	adds	r0, r6, #0
    342a:	2104      	movs	r1, #4
    342c:	f7ff ff9c 	bl	3368 <__sfmoreglue>
    3430:	6028      	str	r0, [r5, #0]
    3432:	2800      	cmp	r0, #0
    3434:	d001      	beq.n	343a <__sfp+0x42>
    3436:	682d      	ldr	r5, [r5, #0]
    3438:	e7e9      	b.n	340e <__sfp+0x16>
    343a:	230c      	movs	r3, #12
    343c:	6033      	str	r3, [r6, #0]
    343e:	e016      	b.n	346e <__sfp+0x76>
    3440:	2301      	movs	r3, #1
    3442:	1c20      	adds	r0, r4, #0
    3444:	425b      	negs	r3, r3
    3446:	81e3      	strh	r3, [r4, #14]
    3448:	3302      	adds	r3, #2
    344a:	81a3      	strh	r3, [r4, #12]
    344c:	6667      	str	r7, [r4, #100]	; 0x64
    344e:	6027      	str	r7, [r4, #0]
    3450:	60a7      	str	r7, [r4, #8]
    3452:	6067      	str	r7, [r4, #4]
    3454:	6127      	str	r7, [r4, #16]
    3456:	6167      	str	r7, [r4, #20]
    3458:	61a7      	str	r7, [r4, #24]
    345a:	305c      	adds	r0, #92	; 0x5c
    345c:	1c39      	adds	r1, r7, #0
    345e:	2208      	movs	r2, #8
    3460:	f7ff fc87 	bl	2d72 <memset>
    3464:	1c20      	adds	r0, r4, #0
    3466:	6367      	str	r7, [r4, #52]	; 0x34
    3468:	63a7      	str	r7, [r4, #56]	; 0x38
    346a:	64a7      	str	r7, [r4, #72]	; 0x48
    346c:	64e7      	str	r7, [r4, #76]	; 0x4c
    346e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3470:	00005148 	.word	0x00005148

00003474 <_fwalk>:
    3474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3476:	3048      	adds	r0, #72	; 0x48
    3478:	1c04      	adds	r4, r0, #0
    347a:	2600      	movs	r6, #0
    347c:	9101      	str	r1, [sp, #4]
    347e:	2c00      	cmp	r4, #0
    3480:	d012      	beq.n	34a8 <_fwalk+0x34>
    3482:	68a5      	ldr	r5, [r4, #8]
    3484:	6867      	ldr	r7, [r4, #4]
    3486:	3f01      	subs	r7, #1
    3488:	d40c      	bmi.n	34a4 <_fwalk+0x30>
    348a:	89ab      	ldrh	r3, [r5, #12]
    348c:	2b01      	cmp	r3, #1
    348e:	d907      	bls.n	34a0 <_fwalk+0x2c>
    3490:	220e      	movs	r2, #14
    3492:	5eab      	ldrsh	r3, [r5, r2]
    3494:	3301      	adds	r3, #1
    3496:	d003      	beq.n	34a0 <_fwalk+0x2c>
    3498:	1c28      	adds	r0, r5, #0
    349a:	9b01      	ldr	r3, [sp, #4]
    349c:	4798      	blx	r3
    349e:	4306      	orrs	r6, r0
    34a0:	3568      	adds	r5, #104	; 0x68
    34a2:	e7f0      	b.n	3486 <_fwalk+0x12>
    34a4:	6824      	ldr	r4, [r4, #0]
    34a6:	e7ea      	b.n	347e <_fwalk+0xa>
    34a8:	1c30      	adds	r0, r6, #0
    34aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000034ac <_fwalk_reent>:
    34ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    34ae:	1c04      	adds	r4, r0, #0
    34b0:	1c07      	adds	r7, r0, #0
    34b2:	2600      	movs	r6, #0
    34b4:	9101      	str	r1, [sp, #4]
    34b6:	3448      	adds	r4, #72	; 0x48
    34b8:	2c00      	cmp	r4, #0
    34ba:	d016      	beq.n	34ea <_fwalk_reent+0x3e>
    34bc:	6863      	ldr	r3, [r4, #4]
    34be:	68a5      	ldr	r5, [r4, #8]
    34c0:	9300      	str	r3, [sp, #0]
    34c2:	9b00      	ldr	r3, [sp, #0]
    34c4:	3b01      	subs	r3, #1
    34c6:	9300      	str	r3, [sp, #0]
    34c8:	d40d      	bmi.n	34e6 <_fwalk_reent+0x3a>
    34ca:	89ab      	ldrh	r3, [r5, #12]
    34cc:	2b01      	cmp	r3, #1
    34ce:	d908      	bls.n	34e2 <_fwalk_reent+0x36>
    34d0:	220e      	movs	r2, #14
    34d2:	5eab      	ldrsh	r3, [r5, r2]
    34d4:	3301      	adds	r3, #1
    34d6:	d004      	beq.n	34e2 <_fwalk_reent+0x36>
    34d8:	1c38      	adds	r0, r7, #0
    34da:	1c29      	adds	r1, r5, #0
    34dc:	9b01      	ldr	r3, [sp, #4]
    34de:	4798      	blx	r3
    34e0:	4306      	orrs	r6, r0
    34e2:	3568      	adds	r5, #104	; 0x68
    34e4:	e7ed      	b.n	34c2 <_fwalk_reent+0x16>
    34e6:	6824      	ldr	r4, [r4, #0]
    34e8:	e7e6      	b.n	34b8 <_fwalk_reent+0xc>
    34ea:	1c30      	adds	r0, r6, #0
    34ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000034f0 <__smakebuf_r>:
    34f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34f2:	898b      	ldrh	r3, [r1, #12]
    34f4:	b091      	sub	sp, #68	; 0x44
    34f6:	079b      	lsls	r3, r3, #30
    34f8:	d506      	bpl.n	3508 <__smakebuf_r+0x18>
    34fa:	1c0b      	adds	r3, r1, #0
    34fc:	3347      	adds	r3, #71	; 0x47
    34fe:	600b      	str	r3, [r1, #0]
    3500:	610b      	str	r3, [r1, #16]
    3502:	2301      	movs	r3, #1
    3504:	614b      	str	r3, [r1, #20]
    3506:	e045      	b.n	3594 <__smakebuf_r+0xa4>
    3508:	1c0c      	adds	r4, r1, #0
    350a:	230e      	movs	r3, #14
    350c:	5ec9      	ldrsh	r1, [r1, r3]
    350e:	1c06      	adds	r6, r0, #0
    3510:	2900      	cmp	r1, #0
    3512:	da04      	bge.n	351e <__smakebuf_r+0x2e>
    3514:	2380      	movs	r3, #128	; 0x80
    3516:	89a5      	ldrh	r5, [r4, #12]
    3518:	401d      	ands	r5, r3
    351a:	d110      	bne.n	353e <__smakebuf_r+0x4e>
    351c:	e00c      	b.n	3538 <__smakebuf_r+0x48>
    351e:	aa01      	add	r2, sp, #4
    3520:	f001 f9b2 	bl	4888 <_fstat_r>
    3524:	2800      	cmp	r0, #0
    3526:	dbf5      	blt.n	3514 <__smakebuf_r+0x24>
    3528:	23f0      	movs	r3, #240	; 0xf0
    352a:	9d02      	ldr	r5, [sp, #8]
    352c:	021b      	lsls	r3, r3, #8
    352e:	401d      	ands	r5, r3
    3530:	4b19      	ldr	r3, [pc, #100]	; (3598 <__smakebuf_r+0xa8>)
    3532:	18ed      	adds	r5, r5, r3
    3534:	426b      	negs	r3, r5
    3536:	415d      	adcs	r5, r3
    3538:	2780      	movs	r7, #128	; 0x80
    353a:	00ff      	lsls	r7, r7, #3
    353c:	e001      	b.n	3542 <__smakebuf_r+0x52>
    353e:	2500      	movs	r5, #0
    3540:	2740      	movs	r7, #64	; 0x40
    3542:	1c30      	adds	r0, r6, #0
    3544:	1c39      	adds	r1, r7, #0
    3546:	f000 f87b 	bl	3640 <_malloc_r>
    354a:	2800      	cmp	r0, #0
    354c:	d10c      	bne.n	3568 <__smakebuf_r+0x78>
    354e:	89a3      	ldrh	r3, [r4, #12]
    3550:	059a      	lsls	r2, r3, #22
    3552:	d41f      	bmi.n	3594 <__smakebuf_r+0xa4>
    3554:	2202      	movs	r2, #2
    3556:	4313      	orrs	r3, r2
    3558:	81a3      	strh	r3, [r4, #12]
    355a:	1c23      	adds	r3, r4, #0
    355c:	3347      	adds	r3, #71	; 0x47
    355e:	6023      	str	r3, [r4, #0]
    3560:	6123      	str	r3, [r4, #16]
    3562:	2301      	movs	r3, #1
    3564:	6163      	str	r3, [r4, #20]
    3566:	e015      	b.n	3594 <__smakebuf_r+0xa4>
    3568:	2280      	movs	r2, #128	; 0x80
    356a:	4b0c      	ldr	r3, [pc, #48]	; (359c <__smakebuf_r+0xac>)
    356c:	62b3      	str	r3, [r6, #40]	; 0x28
    356e:	89a3      	ldrh	r3, [r4, #12]
    3570:	6020      	str	r0, [r4, #0]
    3572:	4313      	orrs	r3, r2
    3574:	81a3      	strh	r3, [r4, #12]
    3576:	6120      	str	r0, [r4, #16]
    3578:	6167      	str	r7, [r4, #20]
    357a:	2d00      	cmp	r5, #0
    357c:	d00a      	beq.n	3594 <__smakebuf_r+0xa4>
    357e:	230e      	movs	r3, #14
    3580:	5ee1      	ldrsh	r1, [r4, r3]
    3582:	1c30      	adds	r0, r6, #0
    3584:	f001 f992 	bl	48ac <_isatty_r>
    3588:	2800      	cmp	r0, #0
    358a:	d003      	beq.n	3594 <__smakebuf_r+0xa4>
    358c:	2201      	movs	r2, #1
    358e:	89a3      	ldrh	r3, [r4, #12]
    3590:	4313      	orrs	r3, r2
    3592:	81a3      	strh	r3, [r4, #12]
    3594:	b011      	add	sp, #68	; 0x44
    3596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3598:	ffffe000 	.word	0xffffe000
    359c:	00003311 	.word	0x00003311

000035a0 <malloc>:
    35a0:	b508      	push	{r3, lr}
    35a2:	4b03      	ldr	r3, [pc, #12]	; (35b0 <malloc+0x10>)
    35a4:	1c01      	adds	r1, r0, #0
    35a6:	6818      	ldr	r0, [r3, #0]
    35a8:	f000 f84a 	bl	3640 <_malloc_r>
    35ac:	bd08      	pop	{r3, pc}
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	20000078 	.word	0x20000078

000035b4 <_free_r>:
    35b4:	b530      	push	{r4, r5, lr}
    35b6:	2900      	cmp	r1, #0
    35b8:	d03e      	beq.n	3638 <_free_r+0x84>
    35ba:	3904      	subs	r1, #4
    35bc:	680b      	ldr	r3, [r1, #0]
    35be:	2b00      	cmp	r3, #0
    35c0:	da00      	bge.n	35c4 <_free_r+0x10>
    35c2:	18c9      	adds	r1, r1, r3
    35c4:	4a1d      	ldr	r2, [pc, #116]	; (363c <_free_r+0x88>)
    35c6:	6813      	ldr	r3, [r2, #0]
    35c8:	1c14      	adds	r4, r2, #0
    35ca:	2b00      	cmp	r3, #0
    35cc:	d102      	bne.n	35d4 <_free_r+0x20>
    35ce:	604b      	str	r3, [r1, #4]
    35d0:	6011      	str	r1, [r2, #0]
    35d2:	e031      	b.n	3638 <_free_r+0x84>
    35d4:	4299      	cmp	r1, r3
    35d6:	d20d      	bcs.n	35f4 <_free_r+0x40>
    35d8:	6808      	ldr	r0, [r1, #0]
    35da:	180a      	adds	r2, r1, r0
    35dc:	429a      	cmp	r2, r3
    35de:	d103      	bne.n	35e8 <_free_r+0x34>
    35e0:	6813      	ldr	r3, [r2, #0]
    35e2:	18c3      	adds	r3, r0, r3
    35e4:	600b      	str	r3, [r1, #0]
    35e6:	6853      	ldr	r3, [r2, #4]
    35e8:	604b      	str	r3, [r1, #4]
    35ea:	6021      	str	r1, [r4, #0]
    35ec:	e024      	b.n	3638 <_free_r+0x84>
    35ee:	428a      	cmp	r2, r1
    35f0:	d803      	bhi.n	35fa <_free_r+0x46>
    35f2:	1c13      	adds	r3, r2, #0
    35f4:	685a      	ldr	r2, [r3, #4]
    35f6:	2a00      	cmp	r2, #0
    35f8:	d1f9      	bne.n	35ee <_free_r+0x3a>
    35fa:	681d      	ldr	r5, [r3, #0]
    35fc:	195c      	adds	r4, r3, r5
    35fe:	428c      	cmp	r4, r1
    3600:	d10b      	bne.n	361a <_free_r+0x66>
    3602:	6809      	ldr	r1, [r1, #0]
    3604:	1869      	adds	r1, r5, r1
    3606:	1858      	adds	r0, r3, r1
    3608:	6019      	str	r1, [r3, #0]
    360a:	4290      	cmp	r0, r2
    360c:	d114      	bne.n	3638 <_free_r+0x84>
    360e:	6810      	ldr	r0, [r2, #0]
    3610:	6852      	ldr	r2, [r2, #4]
    3612:	1809      	adds	r1, r1, r0
    3614:	6019      	str	r1, [r3, #0]
    3616:	605a      	str	r2, [r3, #4]
    3618:	e00e      	b.n	3638 <_free_r+0x84>
    361a:	428c      	cmp	r4, r1
    361c:	d902      	bls.n	3624 <_free_r+0x70>
    361e:	230c      	movs	r3, #12
    3620:	6003      	str	r3, [r0, #0]
    3622:	e009      	b.n	3638 <_free_r+0x84>
    3624:	6808      	ldr	r0, [r1, #0]
    3626:	180c      	adds	r4, r1, r0
    3628:	4294      	cmp	r4, r2
    362a:	d103      	bne.n	3634 <_free_r+0x80>
    362c:	6814      	ldr	r4, [r2, #0]
    362e:	6852      	ldr	r2, [r2, #4]
    3630:	1900      	adds	r0, r0, r4
    3632:	6008      	str	r0, [r1, #0]
    3634:	604a      	str	r2, [r1, #4]
    3636:	6059      	str	r1, [r3, #4]
    3638:	bd30      	pop	{r4, r5, pc}
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	20000ad8 	.word	0x20000ad8

00003640 <_malloc_r>:
    3640:	2303      	movs	r3, #3
    3642:	b570      	push	{r4, r5, r6, lr}
    3644:	1ccc      	adds	r4, r1, #3
    3646:	439c      	bics	r4, r3
    3648:	3408      	adds	r4, #8
    364a:	1c05      	adds	r5, r0, #0
    364c:	2c0c      	cmp	r4, #12
    364e:	d201      	bcs.n	3654 <_malloc_r+0x14>
    3650:	240c      	movs	r4, #12
    3652:	e005      	b.n	3660 <_malloc_r+0x20>
    3654:	2c00      	cmp	r4, #0
    3656:	da03      	bge.n	3660 <_malloc_r+0x20>
    3658:	230c      	movs	r3, #12
    365a:	2000      	movs	r0, #0
    365c:	602b      	str	r3, [r5, #0]
    365e:	e042      	b.n	36e6 <_malloc_r+0xa6>
    3660:	428c      	cmp	r4, r1
    3662:	d3f9      	bcc.n	3658 <_malloc_r+0x18>
    3664:	4a20      	ldr	r2, [pc, #128]	; (36e8 <_malloc_r+0xa8>)
    3666:	6813      	ldr	r3, [r2, #0]
    3668:	1c10      	adds	r0, r2, #0
    366a:	1c19      	adds	r1, r3, #0
    366c:	2900      	cmp	r1, #0
    366e:	d013      	beq.n	3698 <_malloc_r+0x58>
    3670:	680a      	ldr	r2, [r1, #0]
    3672:	1b12      	subs	r2, r2, r4
    3674:	d40d      	bmi.n	3692 <_malloc_r+0x52>
    3676:	2a0b      	cmp	r2, #11
    3678:	d902      	bls.n	3680 <_malloc_r+0x40>
    367a:	600a      	str	r2, [r1, #0]
    367c:	188b      	adds	r3, r1, r2
    367e:	e01f      	b.n	36c0 <_malloc_r+0x80>
    3680:	428b      	cmp	r3, r1
    3682:	d102      	bne.n	368a <_malloc_r+0x4a>
    3684:	685a      	ldr	r2, [r3, #4]
    3686:	6002      	str	r2, [r0, #0]
    3688:	e01b      	b.n	36c2 <_malloc_r+0x82>
    368a:	684a      	ldr	r2, [r1, #4]
    368c:	605a      	str	r2, [r3, #4]
    368e:	1c0b      	adds	r3, r1, #0
    3690:	e017      	b.n	36c2 <_malloc_r+0x82>
    3692:	1c0b      	adds	r3, r1, #0
    3694:	6849      	ldr	r1, [r1, #4]
    3696:	e7e9      	b.n	366c <_malloc_r+0x2c>
    3698:	4e14      	ldr	r6, [pc, #80]	; (36ec <_malloc_r+0xac>)
    369a:	6833      	ldr	r3, [r6, #0]
    369c:	2b00      	cmp	r3, #0
    369e:	d103      	bne.n	36a8 <_malloc_r+0x68>
    36a0:	1c28      	adds	r0, r5, #0
    36a2:	f000 fe77 	bl	4394 <_sbrk_r>
    36a6:	6030      	str	r0, [r6, #0]
    36a8:	1c28      	adds	r0, r5, #0
    36aa:	1c21      	adds	r1, r4, #0
    36ac:	f000 fe72 	bl	4394 <_sbrk_r>
    36b0:	1c03      	adds	r3, r0, #0
    36b2:	1c42      	adds	r2, r0, #1
    36b4:	d0d0      	beq.n	3658 <_malloc_r+0x18>
    36b6:	2203      	movs	r2, #3
    36b8:	1cc6      	adds	r6, r0, #3
    36ba:	4396      	bics	r6, r2
    36bc:	4286      	cmp	r6, r0
    36be:	d10a      	bne.n	36d6 <_malloc_r+0x96>
    36c0:	601c      	str	r4, [r3, #0]
    36c2:	1c18      	adds	r0, r3, #0
    36c4:	2107      	movs	r1, #7
    36c6:	300b      	adds	r0, #11
    36c8:	1d1a      	adds	r2, r3, #4
    36ca:	4388      	bics	r0, r1
    36cc:	1a82      	subs	r2, r0, r2
    36ce:	d00a      	beq.n	36e6 <_malloc_r+0xa6>
    36d0:	4251      	negs	r1, r2
    36d2:	5099      	str	r1, [r3, r2]
    36d4:	e007      	b.n	36e6 <_malloc_r+0xa6>
    36d6:	1a31      	subs	r1, r6, r0
    36d8:	1c28      	adds	r0, r5, #0
    36da:	f000 fe5b 	bl	4394 <_sbrk_r>
    36de:	1c43      	adds	r3, r0, #1
    36e0:	d0ba      	beq.n	3658 <_malloc_r+0x18>
    36e2:	1c33      	adds	r3, r6, #0
    36e4:	e7ec      	b.n	36c0 <_malloc_r+0x80>
    36e6:	bd70      	pop	{r4, r5, r6, pc}
    36e8:	20000ad8 	.word	0x20000ad8
    36ec:	20000ad4 	.word	0x20000ad4

000036f0 <__sfputc_r>:
    36f0:	6893      	ldr	r3, [r2, #8]
    36f2:	b510      	push	{r4, lr}
    36f4:	3b01      	subs	r3, #1
    36f6:	6093      	str	r3, [r2, #8]
    36f8:	2b00      	cmp	r3, #0
    36fa:	da05      	bge.n	3708 <__sfputc_r+0x18>
    36fc:	6994      	ldr	r4, [r2, #24]
    36fe:	42a3      	cmp	r3, r4
    3700:	db08      	blt.n	3714 <__sfputc_r+0x24>
    3702:	b2cb      	uxtb	r3, r1
    3704:	2b0a      	cmp	r3, #10
    3706:	d005      	beq.n	3714 <__sfputc_r+0x24>
    3708:	6813      	ldr	r3, [r2, #0]
    370a:	1c58      	adds	r0, r3, #1
    370c:	6010      	str	r0, [r2, #0]
    370e:	7019      	strb	r1, [r3, #0]
    3710:	b2c8      	uxtb	r0, r1
    3712:	e001      	b.n	3718 <__sfputc_r+0x28>
    3714:	f7ff fc66 	bl	2fe4 <__swbuf_r>
    3718:	bd10      	pop	{r4, pc}

0000371a <__sfputs_r>:
    371a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    371c:	1c06      	adds	r6, r0, #0
    371e:	1c0f      	adds	r7, r1, #0
    3720:	1c14      	adds	r4, r2, #0
    3722:	18d5      	adds	r5, r2, r3
    3724:	42ac      	cmp	r4, r5
    3726:	d008      	beq.n	373a <__sfputs_r+0x20>
    3728:	7821      	ldrb	r1, [r4, #0]
    372a:	1c30      	adds	r0, r6, #0
    372c:	1c3a      	adds	r2, r7, #0
    372e:	f7ff ffdf 	bl	36f0 <__sfputc_r>
    3732:	3401      	adds	r4, #1
    3734:	1c43      	adds	r3, r0, #1
    3736:	d1f5      	bne.n	3724 <__sfputs_r+0xa>
    3738:	e000      	b.n	373c <__sfputs_r+0x22>
    373a:	2000      	movs	r0, #0
    373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003740 <_vfiprintf_r>:
    3740:	b5f0      	push	{r4, r5, r6, r7, lr}
    3742:	b09f      	sub	sp, #124	; 0x7c
    3744:	1c06      	adds	r6, r0, #0
    3746:	1c0f      	adds	r7, r1, #0
    3748:	9202      	str	r2, [sp, #8]
    374a:	9305      	str	r3, [sp, #20]
    374c:	2800      	cmp	r0, #0
    374e:	d004      	beq.n	375a <_vfiprintf_r+0x1a>
    3750:	6983      	ldr	r3, [r0, #24]
    3752:	2b00      	cmp	r3, #0
    3754:	d101      	bne.n	375a <_vfiprintf_r+0x1a>
    3756:	f7ff fe1d 	bl	3394 <__sinit>
    375a:	4b79      	ldr	r3, [pc, #484]	; (3940 <_vfiprintf_r+0x200>)
    375c:	429f      	cmp	r7, r3
    375e:	d101      	bne.n	3764 <_vfiprintf_r+0x24>
    3760:	6877      	ldr	r7, [r6, #4]
    3762:	e008      	b.n	3776 <_vfiprintf_r+0x36>
    3764:	4b77      	ldr	r3, [pc, #476]	; (3944 <_vfiprintf_r+0x204>)
    3766:	429f      	cmp	r7, r3
    3768:	d101      	bne.n	376e <_vfiprintf_r+0x2e>
    376a:	68b7      	ldr	r7, [r6, #8]
    376c:	e003      	b.n	3776 <_vfiprintf_r+0x36>
    376e:	4b76      	ldr	r3, [pc, #472]	; (3948 <_vfiprintf_r+0x208>)
    3770:	429f      	cmp	r7, r3
    3772:	d100      	bne.n	3776 <_vfiprintf_r+0x36>
    3774:	68f7      	ldr	r7, [r6, #12]
    3776:	89bb      	ldrh	r3, [r7, #12]
    3778:	071b      	lsls	r3, r3, #28
    377a:	d50a      	bpl.n	3792 <_vfiprintf_r+0x52>
    377c:	693b      	ldr	r3, [r7, #16]
    377e:	2b00      	cmp	r3, #0
    3780:	d007      	beq.n	3792 <_vfiprintf_r+0x52>
    3782:	2300      	movs	r3, #0
    3784:	ad06      	add	r5, sp, #24
    3786:	616b      	str	r3, [r5, #20]
    3788:	3320      	adds	r3, #32
    378a:	766b      	strb	r3, [r5, #25]
    378c:	3310      	adds	r3, #16
    378e:	76ab      	strb	r3, [r5, #26]
    3790:	e03d      	b.n	380e <_vfiprintf_r+0xce>
    3792:	1c30      	adds	r0, r6, #0
    3794:	1c39      	adds	r1, r7, #0
    3796:	f7ff fc7d 	bl	3094 <__swsetup_r>
    379a:	2800      	cmp	r0, #0
    379c:	d0f1      	beq.n	3782 <_vfiprintf_r+0x42>
    379e:	2001      	movs	r0, #1
    37a0:	4240      	negs	r0, r0
    37a2:	e0ca      	b.n	393a <_vfiprintf_r+0x1fa>
    37a4:	9a05      	ldr	r2, [sp, #20]
    37a6:	1d11      	adds	r1, r2, #4
    37a8:	6812      	ldr	r2, [r2, #0]
    37aa:	9105      	str	r1, [sp, #20]
    37ac:	2a00      	cmp	r2, #0
    37ae:	db7e      	blt.n	38ae <_vfiprintf_r+0x16e>
    37b0:	9209      	str	r2, [sp, #36]	; 0x24
    37b2:	3401      	adds	r4, #1
    37b4:	7823      	ldrb	r3, [r4, #0]
    37b6:	2b2e      	cmp	r3, #46	; 0x2e
    37b8:	d100      	bne.n	37bc <_vfiprintf_r+0x7c>
    37ba:	e089      	b.n	38d0 <_vfiprintf_r+0x190>
    37bc:	7821      	ldrb	r1, [r4, #0]
    37be:	4863      	ldr	r0, [pc, #396]	; (394c <_vfiprintf_r+0x20c>)
    37c0:	2203      	movs	r2, #3
    37c2:	f001 f899 	bl	48f8 <memchr>
    37c6:	2800      	cmp	r0, #0
    37c8:	d008      	beq.n	37dc <_vfiprintf_r+0x9c>
    37ca:	4b60      	ldr	r3, [pc, #384]	; (394c <_vfiprintf_r+0x20c>)
    37cc:	3401      	adds	r4, #1
    37ce:	1ac0      	subs	r0, r0, r3
    37d0:	2340      	movs	r3, #64	; 0x40
    37d2:	4083      	lsls	r3, r0
    37d4:	1c18      	adds	r0, r3, #0
    37d6:	682b      	ldr	r3, [r5, #0]
    37d8:	4318      	orrs	r0, r3
    37da:	6028      	str	r0, [r5, #0]
    37dc:	7821      	ldrb	r1, [r4, #0]
    37de:	1c63      	adds	r3, r4, #1
    37e0:	485b      	ldr	r0, [pc, #364]	; (3950 <_vfiprintf_r+0x210>)
    37e2:	2206      	movs	r2, #6
    37e4:	9302      	str	r3, [sp, #8]
    37e6:	7629      	strb	r1, [r5, #24]
    37e8:	f001 f886 	bl	48f8 <memchr>
    37ec:	2800      	cmp	r0, #0
    37ee:	d100      	bne.n	37f2 <_vfiprintf_r+0xb2>
    37f0:	e091      	b.n	3916 <_vfiprintf_r+0x1d6>
    37f2:	4b58      	ldr	r3, [pc, #352]	; (3954 <_vfiprintf_r+0x214>)
    37f4:	2b00      	cmp	r3, #0
    37f6:	d000      	beq.n	37fa <_vfiprintf_r+0xba>
    37f8:	e084      	b.n	3904 <_vfiprintf_r+0x1c4>
    37fa:	2207      	movs	r2, #7
    37fc:	9b05      	ldr	r3, [sp, #20]
    37fe:	3307      	adds	r3, #7
    3800:	4393      	bics	r3, r2
    3802:	3308      	adds	r3, #8
    3804:	9305      	str	r3, [sp, #20]
    3806:	696b      	ldr	r3, [r5, #20]
    3808:	9a03      	ldr	r2, [sp, #12]
    380a:	189b      	adds	r3, r3, r2
    380c:	616b      	str	r3, [r5, #20]
    380e:	9c02      	ldr	r4, [sp, #8]
    3810:	7823      	ldrb	r3, [r4, #0]
    3812:	2b00      	cmp	r3, #0
    3814:	d104      	bne.n	3820 <_vfiprintf_r+0xe0>
    3816:	9b02      	ldr	r3, [sp, #8]
    3818:	1ae3      	subs	r3, r4, r3
    381a:	9304      	str	r3, [sp, #16]
    381c:	d011      	beq.n	3842 <_vfiprintf_r+0x102>
    381e:	e003      	b.n	3828 <_vfiprintf_r+0xe8>
    3820:	2b25      	cmp	r3, #37	; 0x25
    3822:	d0f8      	beq.n	3816 <_vfiprintf_r+0xd6>
    3824:	3401      	adds	r4, #1
    3826:	e7f3      	b.n	3810 <_vfiprintf_r+0xd0>
    3828:	9b04      	ldr	r3, [sp, #16]
    382a:	1c30      	adds	r0, r6, #0
    382c:	1c39      	adds	r1, r7, #0
    382e:	9a02      	ldr	r2, [sp, #8]
    3830:	f7ff ff73 	bl	371a <__sfputs_r>
    3834:	1c43      	adds	r3, r0, #1
    3836:	d07b      	beq.n	3930 <_vfiprintf_r+0x1f0>
    3838:	696a      	ldr	r2, [r5, #20]
    383a:	9b04      	ldr	r3, [sp, #16]
    383c:	4694      	mov	ip, r2
    383e:	4463      	add	r3, ip
    3840:	616b      	str	r3, [r5, #20]
    3842:	7823      	ldrb	r3, [r4, #0]
    3844:	2b00      	cmp	r3, #0
    3846:	d073      	beq.n	3930 <_vfiprintf_r+0x1f0>
    3848:	2201      	movs	r2, #1
    384a:	2300      	movs	r3, #0
    384c:	4252      	negs	r2, r2
    384e:	606a      	str	r2, [r5, #4]
    3850:	a902      	add	r1, sp, #8
    3852:	3254      	adds	r2, #84	; 0x54
    3854:	1852      	adds	r2, r2, r1
    3856:	3401      	adds	r4, #1
    3858:	602b      	str	r3, [r5, #0]
    385a:	60eb      	str	r3, [r5, #12]
    385c:	60ab      	str	r3, [r5, #8]
    385e:	7013      	strb	r3, [r2, #0]
    3860:	65ab      	str	r3, [r5, #88]	; 0x58
    3862:	7821      	ldrb	r1, [r4, #0]
    3864:	483c      	ldr	r0, [pc, #240]	; (3958 <_vfiprintf_r+0x218>)
    3866:	2205      	movs	r2, #5
    3868:	f001 f846 	bl	48f8 <memchr>
    386c:	2800      	cmp	r0, #0
    386e:	d009      	beq.n	3884 <_vfiprintf_r+0x144>
    3870:	4b39      	ldr	r3, [pc, #228]	; (3958 <_vfiprintf_r+0x218>)
    3872:	3401      	adds	r4, #1
    3874:	1ac0      	subs	r0, r0, r3
    3876:	2301      	movs	r3, #1
    3878:	4083      	lsls	r3, r0
    387a:	1c18      	adds	r0, r3, #0
    387c:	682b      	ldr	r3, [r5, #0]
    387e:	4318      	orrs	r0, r3
    3880:	6028      	str	r0, [r5, #0]
    3882:	e7ee      	b.n	3862 <_vfiprintf_r+0x122>
    3884:	682b      	ldr	r3, [r5, #0]
    3886:	06da      	lsls	r2, r3, #27
    3888:	d504      	bpl.n	3894 <_vfiprintf_r+0x154>
    388a:	2253      	movs	r2, #83	; 0x53
    388c:	2120      	movs	r1, #32
    388e:	a802      	add	r0, sp, #8
    3890:	1812      	adds	r2, r2, r0
    3892:	7011      	strb	r1, [r2, #0]
    3894:	071a      	lsls	r2, r3, #28
    3896:	d504      	bpl.n	38a2 <_vfiprintf_r+0x162>
    3898:	2253      	movs	r2, #83	; 0x53
    389a:	212b      	movs	r1, #43	; 0x2b
    389c:	a802      	add	r0, sp, #8
    389e:	1812      	adds	r2, r2, r0
    38a0:	7011      	strb	r1, [r2, #0]
    38a2:	7822      	ldrb	r2, [r4, #0]
    38a4:	2a2a      	cmp	r2, #42	; 0x2a
    38a6:	d100      	bne.n	38aa <_vfiprintf_r+0x16a>
    38a8:	e77c      	b.n	37a4 <_vfiprintf_r+0x64>
    38aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    38ac:	e005      	b.n	38ba <_vfiprintf_r+0x17a>
    38ae:	4252      	negs	r2, r2
    38b0:	60ea      	str	r2, [r5, #12]
    38b2:	2202      	movs	r2, #2
    38b4:	4313      	orrs	r3, r2
    38b6:	602b      	str	r3, [r5, #0]
    38b8:	e77b      	b.n	37b2 <_vfiprintf_r+0x72>
    38ba:	7822      	ldrb	r2, [r4, #0]
    38bc:	3a30      	subs	r2, #48	; 0x30
    38be:	2a09      	cmp	r2, #9
    38c0:	d804      	bhi.n	38cc <_vfiprintf_r+0x18c>
    38c2:	210a      	movs	r1, #10
    38c4:	434b      	muls	r3, r1
    38c6:	3401      	adds	r4, #1
    38c8:	189b      	adds	r3, r3, r2
    38ca:	e7f6      	b.n	38ba <_vfiprintf_r+0x17a>
    38cc:	9309      	str	r3, [sp, #36]	; 0x24
    38ce:	e771      	b.n	37b4 <_vfiprintf_r+0x74>
    38d0:	7863      	ldrb	r3, [r4, #1]
    38d2:	2b2a      	cmp	r3, #42	; 0x2a
    38d4:	d109      	bne.n	38ea <_vfiprintf_r+0x1aa>
    38d6:	9b05      	ldr	r3, [sp, #20]
    38d8:	3402      	adds	r4, #2
    38da:	1d1a      	adds	r2, r3, #4
    38dc:	681b      	ldr	r3, [r3, #0]
    38de:	9205      	str	r2, [sp, #20]
    38e0:	2b00      	cmp	r3, #0
    38e2:	da0d      	bge.n	3900 <_vfiprintf_r+0x1c0>
    38e4:	2301      	movs	r3, #1
    38e6:	425b      	negs	r3, r3
    38e8:	e00a      	b.n	3900 <_vfiprintf_r+0x1c0>
    38ea:	2300      	movs	r3, #0
    38ec:	3401      	adds	r4, #1
    38ee:	7822      	ldrb	r2, [r4, #0]
    38f0:	3a30      	subs	r2, #48	; 0x30
    38f2:	2a09      	cmp	r2, #9
    38f4:	d804      	bhi.n	3900 <_vfiprintf_r+0x1c0>
    38f6:	210a      	movs	r1, #10
    38f8:	434b      	muls	r3, r1
    38fa:	3401      	adds	r4, #1
    38fc:	189b      	adds	r3, r3, r2
    38fe:	e7f6      	b.n	38ee <_vfiprintf_r+0x1ae>
    3900:	9307      	str	r3, [sp, #28]
    3902:	e75b      	b.n	37bc <_vfiprintf_r+0x7c>
    3904:	ab05      	add	r3, sp, #20
    3906:	9300      	str	r3, [sp, #0]
    3908:	1c30      	adds	r0, r6, #0
    390a:	1c29      	adds	r1, r5, #0
    390c:	1c3a      	adds	r2, r7, #0
    390e:	4b13      	ldr	r3, [pc, #76]	; (395c <_vfiprintf_r+0x21c>)
    3910:	e000      	b.n	3914 <_vfiprintf_r+0x1d4>
    3912:	bf00      	nop
    3914:	e007      	b.n	3926 <_vfiprintf_r+0x1e6>
    3916:	ab05      	add	r3, sp, #20
    3918:	9300      	str	r3, [sp, #0]
    391a:	1c30      	adds	r0, r6, #0
    391c:	1c29      	adds	r1, r5, #0
    391e:	1c3a      	adds	r2, r7, #0
    3920:	4b0e      	ldr	r3, [pc, #56]	; (395c <_vfiprintf_r+0x21c>)
    3922:	f000 f88b 	bl	3a3c <_printf_i>
    3926:	9003      	str	r0, [sp, #12]
    3928:	9b03      	ldr	r3, [sp, #12]
    392a:	3301      	adds	r3, #1
    392c:	d000      	beq.n	3930 <_vfiprintf_r+0x1f0>
    392e:	e76a      	b.n	3806 <_vfiprintf_r+0xc6>
    3930:	89bb      	ldrh	r3, [r7, #12]
    3932:	065b      	lsls	r3, r3, #25
    3934:	d500      	bpl.n	3938 <_vfiprintf_r+0x1f8>
    3936:	e732      	b.n	379e <_vfiprintf_r+0x5e>
    3938:	980b      	ldr	r0, [sp, #44]	; 0x2c
    393a:	b01f      	add	sp, #124	; 0x7c
    393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	0000514c 	.word	0x0000514c
    3944:	0000516c 	.word	0x0000516c
    3948:	0000518c 	.word	0x0000518c
    394c:	000051b2 	.word	0x000051b2
    3950:	000051b6 	.word	0x000051b6
    3954:	00000000 	.word	0x00000000
    3958:	000051ac 	.word	0x000051ac
    395c:	0000371b 	.word	0x0000371b

00003960 <_printf_common>:
    3960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3962:	1c17      	adds	r7, r2, #0
    3964:	9301      	str	r3, [sp, #4]
    3966:	690a      	ldr	r2, [r1, #16]
    3968:	688b      	ldr	r3, [r1, #8]
    396a:	9000      	str	r0, [sp, #0]
    396c:	1c0c      	adds	r4, r1, #0
    396e:	4293      	cmp	r3, r2
    3970:	da00      	bge.n	3974 <_printf_common+0x14>
    3972:	1c13      	adds	r3, r2, #0
    3974:	1c22      	adds	r2, r4, #0
    3976:	603b      	str	r3, [r7, #0]
    3978:	3243      	adds	r2, #67	; 0x43
    397a:	7812      	ldrb	r2, [r2, #0]
    397c:	2a00      	cmp	r2, #0
    397e:	d001      	beq.n	3984 <_printf_common+0x24>
    3980:	3301      	adds	r3, #1
    3982:	603b      	str	r3, [r7, #0]
    3984:	6823      	ldr	r3, [r4, #0]
    3986:	069b      	lsls	r3, r3, #26
    3988:	d502      	bpl.n	3990 <_printf_common+0x30>
    398a:	683b      	ldr	r3, [r7, #0]
    398c:	3302      	adds	r3, #2
    398e:	603b      	str	r3, [r7, #0]
    3990:	2506      	movs	r5, #6
    3992:	6823      	ldr	r3, [r4, #0]
    3994:	401d      	ands	r5, r3
    3996:	d01e      	beq.n	39d6 <_printf_common+0x76>
    3998:	1c23      	adds	r3, r4, #0
    399a:	3343      	adds	r3, #67	; 0x43
    399c:	781b      	ldrb	r3, [r3, #0]
    399e:	1e5a      	subs	r2, r3, #1
    39a0:	4193      	sbcs	r3, r2
    39a2:	6822      	ldr	r2, [r4, #0]
    39a4:	0692      	lsls	r2, r2, #26
    39a6:	d51c      	bpl.n	39e2 <_printf_common+0x82>
    39a8:	2030      	movs	r0, #48	; 0x30
    39aa:	18e1      	adds	r1, r4, r3
    39ac:	3140      	adds	r1, #64	; 0x40
    39ae:	70c8      	strb	r0, [r1, #3]
    39b0:	1c21      	adds	r1, r4, #0
    39b2:	1c5a      	adds	r2, r3, #1
    39b4:	3145      	adds	r1, #69	; 0x45
    39b6:	7809      	ldrb	r1, [r1, #0]
    39b8:	18a2      	adds	r2, r4, r2
    39ba:	3240      	adds	r2, #64	; 0x40
    39bc:	3302      	adds	r3, #2
    39be:	70d1      	strb	r1, [r2, #3]
    39c0:	e00f      	b.n	39e2 <_printf_common+0x82>
    39c2:	1c22      	adds	r2, r4, #0
    39c4:	2301      	movs	r3, #1
    39c6:	9800      	ldr	r0, [sp, #0]
    39c8:	9901      	ldr	r1, [sp, #4]
    39ca:	3219      	adds	r2, #25
    39cc:	9e08      	ldr	r6, [sp, #32]
    39ce:	47b0      	blx	r6
    39d0:	1c43      	adds	r3, r0, #1
    39d2:	d00e      	beq.n	39f2 <_printf_common+0x92>
    39d4:	3501      	adds	r5, #1
    39d6:	68e3      	ldr	r3, [r4, #12]
    39d8:	683a      	ldr	r2, [r7, #0]
    39da:	1a9b      	subs	r3, r3, r2
    39dc:	429d      	cmp	r5, r3
    39de:	dbf0      	blt.n	39c2 <_printf_common+0x62>
    39e0:	e7da      	b.n	3998 <_printf_common+0x38>
    39e2:	1c22      	adds	r2, r4, #0
    39e4:	9800      	ldr	r0, [sp, #0]
    39e6:	9901      	ldr	r1, [sp, #4]
    39e8:	3243      	adds	r2, #67	; 0x43
    39ea:	9d08      	ldr	r5, [sp, #32]
    39ec:	47a8      	blx	r5
    39ee:	1c43      	adds	r3, r0, #1
    39f0:	d102      	bne.n	39f8 <_printf_common+0x98>
    39f2:	2001      	movs	r0, #1
    39f4:	4240      	negs	r0, r0
    39f6:	e020      	b.n	3a3a <_printf_common+0xda>
    39f8:	2306      	movs	r3, #6
    39fa:	6820      	ldr	r0, [r4, #0]
    39fc:	68e1      	ldr	r1, [r4, #12]
    39fe:	683a      	ldr	r2, [r7, #0]
    3a00:	4003      	ands	r3, r0
    3a02:	2500      	movs	r5, #0
    3a04:	2b04      	cmp	r3, #4
    3a06:	d103      	bne.n	3a10 <_printf_common+0xb0>
    3a08:	1a8d      	subs	r5, r1, r2
    3a0a:	43eb      	mvns	r3, r5
    3a0c:	17db      	asrs	r3, r3, #31
    3a0e:	401d      	ands	r5, r3
    3a10:	68a3      	ldr	r3, [r4, #8]
    3a12:	6922      	ldr	r2, [r4, #16]
    3a14:	4293      	cmp	r3, r2
    3a16:	dd01      	ble.n	3a1c <_printf_common+0xbc>
    3a18:	1a9b      	subs	r3, r3, r2
    3a1a:	18ed      	adds	r5, r5, r3
    3a1c:	2700      	movs	r7, #0
    3a1e:	42af      	cmp	r7, r5
    3a20:	da0a      	bge.n	3a38 <_printf_common+0xd8>
    3a22:	1c22      	adds	r2, r4, #0
    3a24:	2301      	movs	r3, #1
    3a26:	9800      	ldr	r0, [sp, #0]
    3a28:	9901      	ldr	r1, [sp, #4]
    3a2a:	321a      	adds	r2, #26
    3a2c:	9e08      	ldr	r6, [sp, #32]
    3a2e:	47b0      	blx	r6
    3a30:	1c43      	adds	r3, r0, #1
    3a32:	d0de      	beq.n	39f2 <_printf_common+0x92>
    3a34:	3701      	adds	r7, #1
    3a36:	e7f2      	b.n	3a1e <_printf_common+0xbe>
    3a38:	2000      	movs	r0, #0
    3a3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003a3c <_printf_i>:
    3a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a3e:	b08b      	sub	sp, #44	; 0x2c
    3a40:	9206      	str	r2, [sp, #24]
    3a42:	1c0a      	adds	r2, r1, #0
    3a44:	3243      	adds	r2, #67	; 0x43
    3a46:	9307      	str	r3, [sp, #28]
    3a48:	9005      	str	r0, [sp, #20]
    3a4a:	9204      	str	r2, [sp, #16]
    3a4c:	7e0a      	ldrb	r2, [r1, #24]
    3a4e:	1c0c      	adds	r4, r1, #0
    3a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3a52:	2a6e      	cmp	r2, #110	; 0x6e
    3a54:	d100      	bne.n	3a58 <_printf_i+0x1c>
    3a56:	e0a8      	b.n	3baa <_printf_i+0x16e>
    3a58:	d811      	bhi.n	3a7e <_printf_i+0x42>
    3a5a:	2a63      	cmp	r2, #99	; 0x63
    3a5c:	d022      	beq.n	3aa4 <_printf_i+0x68>
    3a5e:	d809      	bhi.n	3a74 <_printf_i+0x38>
    3a60:	2a00      	cmp	r2, #0
    3a62:	d100      	bne.n	3a66 <_printf_i+0x2a>
    3a64:	e0b2      	b.n	3bcc <_printf_i+0x190>
    3a66:	2a58      	cmp	r2, #88	; 0x58
    3a68:	d000      	beq.n	3a6c <_printf_i+0x30>
    3a6a:	e0c2      	b.n	3bf2 <_printf_i+0x1b6>
    3a6c:	3145      	adds	r1, #69	; 0x45
    3a6e:	700a      	strb	r2, [r1, #0]
    3a70:	4a7c      	ldr	r2, [pc, #496]	; (3c64 <_printf_i+0x228>)
    3a72:	e04f      	b.n	3b14 <_printf_i+0xd8>
    3a74:	2a64      	cmp	r2, #100	; 0x64
    3a76:	d01d      	beq.n	3ab4 <_printf_i+0x78>
    3a78:	2a69      	cmp	r2, #105	; 0x69
    3a7a:	d01b      	beq.n	3ab4 <_printf_i+0x78>
    3a7c:	e0b9      	b.n	3bf2 <_printf_i+0x1b6>
    3a7e:	2a73      	cmp	r2, #115	; 0x73
    3a80:	d100      	bne.n	3a84 <_printf_i+0x48>
    3a82:	e0a7      	b.n	3bd4 <_printf_i+0x198>
    3a84:	d809      	bhi.n	3a9a <_printf_i+0x5e>
    3a86:	2a6f      	cmp	r2, #111	; 0x6f
    3a88:	d029      	beq.n	3ade <_printf_i+0xa2>
    3a8a:	2a70      	cmp	r2, #112	; 0x70
    3a8c:	d000      	beq.n	3a90 <_printf_i+0x54>
    3a8e:	e0b0      	b.n	3bf2 <_printf_i+0x1b6>
    3a90:	2220      	movs	r2, #32
    3a92:	6809      	ldr	r1, [r1, #0]
    3a94:	430a      	orrs	r2, r1
    3a96:	6022      	str	r2, [r4, #0]
    3a98:	e037      	b.n	3b0a <_printf_i+0xce>
    3a9a:	2a75      	cmp	r2, #117	; 0x75
    3a9c:	d01f      	beq.n	3ade <_printf_i+0xa2>
    3a9e:	2a78      	cmp	r2, #120	; 0x78
    3aa0:	d033      	beq.n	3b0a <_printf_i+0xce>
    3aa2:	e0a6      	b.n	3bf2 <_printf_i+0x1b6>
    3aa4:	1c0e      	adds	r6, r1, #0
    3aa6:	681a      	ldr	r2, [r3, #0]
    3aa8:	3642      	adds	r6, #66	; 0x42
    3aaa:	1d11      	adds	r1, r2, #4
    3aac:	6019      	str	r1, [r3, #0]
    3aae:	6813      	ldr	r3, [r2, #0]
    3ab0:	7033      	strb	r3, [r6, #0]
    3ab2:	e0a1      	b.n	3bf8 <_printf_i+0x1bc>
    3ab4:	6821      	ldr	r1, [r4, #0]
    3ab6:	681a      	ldr	r2, [r3, #0]
    3ab8:	0608      	lsls	r0, r1, #24
    3aba:	d406      	bmi.n	3aca <_printf_i+0x8e>
    3abc:	0649      	lsls	r1, r1, #25
    3abe:	d504      	bpl.n	3aca <_printf_i+0x8e>
    3ac0:	1d11      	adds	r1, r2, #4
    3ac2:	6019      	str	r1, [r3, #0]
    3ac4:	2300      	movs	r3, #0
    3ac6:	5ed5      	ldrsh	r5, [r2, r3]
    3ac8:	e002      	b.n	3ad0 <_printf_i+0x94>
    3aca:	1d11      	adds	r1, r2, #4
    3acc:	6019      	str	r1, [r3, #0]
    3ace:	6815      	ldr	r5, [r2, #0]
    3ad0:	2d00      	cmp	r5, #0
    3ad2:	da3b      	bge.n	3b4c <_printf_i+0x110>
    3ad4:	232d      	movs	r3, #45	; 0x2d
    3ad6:	9a04      	ldr	r2, [sp, #16]
    3ad8:	426d      	negs	r5, r5
    3ada:	7013      	strb	r3, [r2, #0]
    3adc:	e036      	b.n	3b4c <_printf_i+0x110>
    3ade:	6821      	ldr	r1, [r4, #0]
    3ae0:	681a      	ldr	r2, [r3, #0]
    3ae2:	0608      	lsls	r0, r1, #24
    3ae4:	d406      	bmi.n	3af4 <_printf_i+0xb8>
    3ae6:	0649      	lsls	r1, r1, #25
    3ae8:	d504      	bpl.n	3af4 <_printf_i+0xb8>
    3aea:	6815      	ldr	r5, [r2, #0]
    3aec:	1d11      	adds	r1, r2, #4
    3aee:	6019      	str	r1, [r3, #0]
    3af0:	b2ad      	uxth	r5, r5
    3af2:	e002      	b.n	3afa <_printf_i+0xbe>
    3af4:	1d11      	adds	r1, r2, #4
    3af6:	6019      	str	r1, [r3, #0]
    3af8:	6815      	ldr	r5, [r2, #0]
    3afa:	4b5a      	ldr	r3, [pc, #360]	; (3c64 <_printf_i+0x228>)
    3afc:	7e22      	ldrb	r2, [r4, #24]
    3afe:	9303      	str	r3, [sp, #12]
    3b00:	270a      	movs	r7, #10
    3b02:	2a6f      	cmp	r2, #111	; 0x6f
    3b04:	d11d      	bne.n	3b42 <_printf_i+0x106>
    3b06:	2708      	movs	r7, #8
    3b08:	e01b      	b.n	3b42 <_printf_i+0x106>
    3b0a:	1c22      	adds	r2, r4, #0
    3b0c:	2178      	movs	r1, #120	; 0x78
    3b0e:	3245      	adds	r2, #69	; 0x45
    3b10:	7011      	strb	r1, [r2, #0]
    3b12:	4a55      	ldr	r2, [pc, #340]	; (3c68 <_printf_i+0x22c>)
    3b14:	6819      	ldr	r1, [r3, #0]
    3b16:	9203      	str	r2, [sp, #12]
    3b18:	1d08      	adds	r0, r1, #4
    3b1a:	6822      	ldr	r2, [r4, #0]
    3b1c:	6018      	str	r0, [r3, #0]
    3b1e:	680d      	ldr	r5, [r1, #0]
    3b20:	0610      	lsls	r0, r2, #24
    3b22:	d402      	bmi.n	3b2a <_printf_i+0xee>
    3b24:	0650      	lsls	r0, r2, #25
    3b26:	d500      	bpl.n	3b2a <_printf_i+0xee>
    3b28:	b2ad      	uxth	r5, r5
    3b2a:	07d3      	lsls	r3, r2, #31
    3b2c:	d502      	bpl.n	3b34 <_printf_i+0xf8>
    3b2e:	2320      	movs	r3, #32
    3b30:	431a      	orrs	r2, r3
    3b32:	6022      	str	r2, [r4, #0]
    3b34:	2710      	movs	r7, #16
    3b36:	2d00      	cmp	r5, #0
    3b38:	d103      	bne.n	3b42 <_printf_i+0x106>
    3b3a:	2320      	movs	r3, #32
    3b3c:	6822      	ldr	r2, [r4, #0]
    3b3e:	439a      	bics	r2, r3
    3b40:	6022      	str	r2, [r4, #0]
    3b42:	1c23      	adds	r3, r4, #0
    3b44:	2200      	movs	r2, #0
    3b46:	3343      	adds	r3, #67	; 0x43
    3b48:	701a      	strb	r2, [r3, #0]
    3b4a:	e002      	b.n	3b52 <_printf_i+0x116>
    3b4c:	270a      	movs	r7, #10
    3b4e:	4b45      	ldr	r3, [pc, #276]	; (3c64 <_printf_i+0x228>)
    3b50:	9303      	str	r3, [sp, #12]
    3b52:	6863      	ldr	r3, [r4, #4]
    3b54:	60a3      	str	r3, [r4, #8]
    3b56:	2b00      	cmp	r3, #0
    3b58:	db03      	blt.n	3b62 <_printf_i+0x126>
    3b5a:	2204      	movs	r2, #4
    3b5c:	6821      	ldr	r1, [r4, #0]
    3b5e:	4391      	bics	r1, r2
    3b60:	6021      	str	r1, [r4, #0]
    3b62:	2d00      	cmp	r5, #0
    3b64:	d102      	bne.n	3b6c <_printf_i+0x130>
    3b66:	9e04      	ldr	r6, [sp, #16]
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d00e      	beq.n	3b8a <_printf_i+0x14e>
    3b6c:	9e04      	ldr	r6, [sp, #16]
    3b6e:	1c28      	adds	r0, r5, #0
    3b70:	1c39      	adds	r1, r7, #0
    3b72:	f7ff f899 	bl	2ca8 <__aeabi_uidivmod>
    3b76:	9b03      	ldr	r3, [sp, #12]
    3b78:	3e01      	subs	r6, #1
    3b7a:	5c5b      	ldrb	r3, [r3, r1]
    3b7c:	1c28      	adds	r0, r5, #0
    3b7e:	7033      	strb	r3, [r6, #0]
    3b80:	1c39      	adds	r1, r7, #0
    3b82:	f7ff f80b 	bl	2b9c <__aeabi_uidiv>
    3b86:	1e05      	subs	r5, r0, #0
    3b88:	d1f1      	bne.n	3b6e <_printf_i+0x132>
    3b8a:	2f08      	cmp	r7, #8
    3b8c:	d109      	bne.n	3ba2 <_printf_i+0x166>
    3b8e:	6823      	ldr	r3, [r4, #0]
    3b90:	07db      	lsls	r3, r3, #31
    3b92:	d506      	bpl.n	3ba2 <_printf_i+0x166>
    3b94:	6863      	ldr	r3, [r4, #4]
    3b96:	6922      	ldr	r2, [r4, #16]
    3b98:	4293      	cmp	r3, r2
    3b9a:	dc02      	bgt.n	3ba2 <_printf_i+0x166>
    3b9c:	2330      	movs	r3, #48	; 0x30
    3b9e:	3e01      	subs	r6, #1
    3ba0:	7033      	strb	r3, [r6, #0]
    3ba2:	9b04      	ldr	r3, [sp, #16]
    3ba4:	1b9b      	subs	r3, r3, r6
    3ba6:	6123      	str	r3, [r4, #16]
    3ba8:	e02b      	b.n	3c02 <_printf_i+0x1c6>
    3baa:	6809      	ldr	r1, [r1, #0]
    3bac:	681a      	ldr	r2, [r3, #0]
    3bae:	0608      	lsls	r0, r1, #24
    3bb0:	d407      	bmi.n	3bc2 <_printf_i+0x186>
    3bb2:	0649      	lsls	r1, r1, #25
    3bb4:	d505      	bpl.n	3bc2 <_printf_i+0x186>
    3bb6:	1d11      	adds	r1, r2, #4
    3bb8:	6019      	str	r1, [r3, #0]
    3bba:	6813      	ldr	r3, [r2, #0]
    3bbc:	8aa2      	ldrh	r2, [r4, #20]
    3bbe:	801a      	strh	r2, [r3, #0]
    3bc0:	e004      	b.n	3bcc <_printf_i+0x190>
    3bc2:	1d11      	adds	r1, r2, #4
    3bc4:	6019      	str	r1, [r3, #0]
    3bc6:	6813      	ldr	r3, [r2, #0]
    3bc8:	6962      	ldr	r2, [r4, #20]
    3bca:	601a      	str	r2, [r3, #0]
    3bcc:	2300      	movs	r3, #0
    3bce:	9e04      	ldr	r6, [sp, #16]
    3bd0:	6123      	str	r3, [r4, #16]
    3bd2:	e016      	b.n	3c02 <_printf_i+0x1c6>
    3bd4:	681a      	ldr	r2, [r3, #0]
    3bd6:	1d11      	adds	r1, r2, #4
    3bd8:	6019      	str	r1, [r3, #0]
    3bda:	6816      	ldr	r6, [r2, #0]
    3bdc:	2100      	movs	r1, #0
    3bde:	1c30      	adds	r0, r6, #0
    3be0:	6862      	ldr	r2, [r4, #4]
    3be2:	f000 fe89 	bl	48f8 <memchr>
    3be6:	2800      	cmp	r0, #0
    3be8:	d001      	beq.n	3bee <_printf_i+0x1b2>
    3bea:	1b80      	subs	r0, r0, r6
    3bec:	6060      	str	r0, [r4, #4]
    3bee:	6863      	ldr	r3, [r4, #4]
    3bf0:	e003      	b.n	3bfa <_printf_i+0x1be>
    3bf2:	1c26      	adds	r6, r4, #0
    3bf4:	3642      	adds	r6, #66	; 0x42
    3bf6:	7032      	strb	r2, [r6, #0]
    3bf8:	2301      	movs	r3, #1
    3bfa:	6123      	str	r3, [r4, #16]
    3bfc:	2300      	movs	r3, #0
    3bfe:	9a04      	ldr	r2, [sp, #16]
    3c00:	7013      	strb	r3, [r2, #0]
    3c02:	9b07      	ldr	r3, [sp, #28]
    3c04:	9805      	ldr	r0, [sp, #20]
    3c06:	9300      	str	r3, [sp, #0]
    3c08:	1c21      	adds	r1, r4, #0
    3c0a:	9b06      	ldr	r3, [sp, #24]
    3c0c:	aa09      	add	r2, sp, #36	; 0x24
    3c0e:	f7ff fea7 	bl	3960 <_printf_common>
    3c12:	1c43      	adds	r3, r0, #1
    3c14:	d102      	bne.n	3c1c <_printf_i+0x1e0>
    3c16:	2001      	movs	r0, #1
    3c18:	4240      	negs	r0, r0
    3c1a:	e021      	b.n	3c60 <_printf_i+0x224>
    3c1c:	6923      	ldr	r3, [r4, #16]
    3c1e:	9805      	ldr	r0, [sp, #20]
    3c20:	9906      	ldr	r1, [sp, #24]
    3c22:	1c32      	adds	r2, r6, #0
    3c24:	9d07      	ldr	r5, [sp, #28]
    3c26:	47a8      	blx	r5
    3c28:	1c43      	adds	r3, r0, #1
    3c2a:	d0f4      	beq.n	3c16 <_printf_i+0x1da>
    3c2c:	6823      	ldr	r3, [r4, #0]
    3c2e:	079b      	lsls	r3, r3, #30
    3c30:	d405      	bmi.n	3c3e <_printf_i+0x202>
    3c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c34:	68e0      	ldr	r0, [r4, #12]
    3c36:	4298      	cmp	r0, r3
    3c38:	da12      	bge.n	3c60 <_printf_i+0x224>
    3c3a:	1c18      	adds	r0, r3, #0
    3c3c:	e010      	b.n	3c60 <_printf_i+0x224>
    3c3e:	2500      	movs	r5, #0
    3c40:	68e3      	ldr	r3, [r4, #12]
    3c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3c44:	1a9b      	subs	r3, r3, r2
    3c46:	429d      	cmp	r5, r3
    3c48:	daf3      	bge.n	3c32 <_printf_i+0x1f6>
    3c4a:	1c22      	adds	r2, r4, #0
    3c4c:	2301      	movs	r3, #1
    3c4e:	9805      	ldr	r0, [sp, #20]
    3c50:	9906      	ldr	r1, [sp, #24]
    3c52:	3219      	adds	r2, #25
    3c54:	9e07      	ldr	r6, [sp, #28]
    3c56:	47b0      	blx	r6
    3c58:	1c43      	adds	r3, r0, #1
    3c5a:	d0dc      	beq.n	3c16 <_printf_i+0x1da>
    3c5c:	3501      	adds	r5, #1
    3c5e:	e7ef      	b.n	3c40 <_printf_i+0x204>
    3c60:	b00b      	add	sp, #44	; 0x2c
    3c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c64:	000051bd 	.word	0x000051bd
    3c68:	000051ce 	.word	0x000051ce

00003c6c <__svfiscanf_r>:
    3c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c6e:	4cb5      	ldr	r4, [pc, #724]	; (3f44 <__svfiscanf_r+0x2d8>)
    3c70:	1c07      	adds	r7, r0, #0
    3c72:	44a5      	add	sp, r4
    3c74:	9303      	str	r3, [sp, #12]
    3c76:	2300      	movs	r3, #0
    3c78:	2086      	movs	r0, #134	; 0x86
    3c7a:	9348      	str	r3, [sp, #288]	; 0x120
    3c7c:	9349      	str	r3, [sp, #292]	; 0x124
    3c7e:	ab05      	add	r3, sp, #20
    3c80:	934a      	str	r3, [sp, #296]	; 0x128
    3c82:	23be      	movs	r3, #190	; 0xbe
    3c84:	0040      	lsls	r0, r0, #1
    3c86:	1c0d      	adds	r5, r1, #0
    3c88:	9201      	str	r2, [sp, #4]
    3c8a:	a902      	add	r1, sp, #8
    3c8c:	4aae      	ldr	r2, [pc, #696]	; (3f48 <__svfiscanf_r+0x2dc>)
    3c8e:	005b      	lsls	r3, r3, #1
    3c90:	1809      	adds	r1, r1, r0
    3c92:	50ca      	str	r2, [r1, r3]
    3c94:	4aad      	ldr	r2, [pc, #692]	; (3f4c <__svfiscanf_r+0x2e0>)
    3c96:	a902      	add	r1, sp, #8
    3c98:	3304      	adds	r3, #4
    3c9a:	1809      	adds	r1, r1, r0
    3c9c:	50ca      	str	r2, [r1, r3]
    3c9e:	9b01      	ldr	r3, [sp, #4]
    3ca0:	781c      	ldrb	r4, [r3, #0]
    3ca2:	2c00      	cmp	r4, #0
    3ca4:	d100      	bne.n	3ca8 <__svfiscanf_r+0x3c>
    3ca6:	e144      	b.n	3f32 <__svfiscanf_r+0x2c6>
    3ca8:	4ea9      	ldr	r6, [pc, #676]	; (3f50 <__svfiscanf_r+0x2e4>)
    3caa:	6833      	ldr	r3, [r6, #0]
    3cac:	191b      	adds	r3, r3, r4
    3cae:	785a      	ldrb	r2, [r3, #1]
    3cb0:	2308      	movs	r3, #8
    3cb2:	4013      	ands	r3, r2
    3cb4:	d023      	beq.n	3cfe <__svfiscanf_r+0x92>
    3cb6:	686b      	ldr	r3, [r5, #4]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	dd10      	ble.n	3cde <__svfiscanf_r+0x72>
    3cbc:	682b      	ldr	r3, [r5, #0]
    3cbe:	6831      	ldr	r1, [r6, #0]
    3cc0:	781a      	ldrb	r2, [r3, #0]
    3cc2:	188a      	adds	r2, r1, r2
    3cc4:	7852      	ldrb	r2, [r2, #1]
    3cc6:	0712      	lsls	r2, r2, #28
    3cc8:	d515      	bpl.n	3cf6 <__svfiscanf_r+0x8a>
    3cca:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3ccc:	3301      	adds	r3, #1
    3cce:	9202      	str	r2, [sp, #8]
    3cd0:	3201      	adds	r2, #1
    3cd2:	9249      	str	r2, [sp, #292]	; 0x124
    3cd4:	686a      	ldr	r2, [r5, #4]
    3cd6:	602b      	str	r3, [r5, #0]
    3cd8:	3a01      	subs	r2, #1
    3cda:	606a      	str	r2, [r5, #4]
    3cdc:	e7eb      	b.n	3cb6 <__svfiscanf_r+0x4a>
    3cde:	2186      	movs	r1, #134	; 0x86
    3ce0:	23c0      	movs	r3, #192	; 0xc0
    3ce2:	0049      	lsls	r1, r1, #1
    3ce4:	aa02      	add	r2, sp, #8
    3ce6:	1852      	adds	r2, r2, r1
    3ce8:	005b      	lsls	r3, r3, #1
    3cea:	58d3      	ldr	r3, [r2, r3]
    3cec:	1c38      	adds	r0, r7, #0
    3cee:	1c29      	adds	r1, r5, #0
    3cf0:	4798      	blx	r3
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d0e2      	beq.n	3cbc <__svfiscanf_r+0x50>
    3cf6:	9e01      	ldr	r6, [sp, #4]
    3cf8:	3601      	adds	r6, #1
    3cfa:	9601      	str	r6, [sp, #4]
    3cfc:	e7cf      	b.n	3c9e <__svfiscanf_r+0x32>
    3cfe:	9a01      	ldr	r2, [sp, #4]
    3d00:	1c56      	adds	r6, r2, #1
    3d02:	2c25      	cmp	r4, #37	; 0x25
    3d04:	d14f      	bne.n	3da6 <__svfiscanf_r+0x13a>
    3d06:	9347      	str	r3, [sp, #284]	; 0x11c
    3d08:	9345      	str	r3, [sp, #276]	; 0x114
    3d0a:	7853      	ldrb	r3, [r2, #1]
    3d0c:	2b2a      	cmp	r3, #42	; 0x2a
    3d0e:	d102      	bne.n	3d16 <__svfiscanf_r+0xaa>
    3d10:	3b1a      	subs	r3, #26
    3d12:	9345      	str	r3, [sp, #276]	; 0x114
    3d14:	3601      	adds	r6, #1
    3d16:	1c34      	adds	r4, r6, #0
    3d18:	7821      	ldrb	r1, [r4, #0]
    3d1a:	1c0b      	adds	r3, r1, #0
    3d1c:	3b30      	subs	r3, #48	; 0x30
    3d1e:	2b09      	cmp	r3, #9
    3d20:	d809      	bhi.n	3d36 <__svfiscanf_r+0xca>
    3d22:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3d24:	3401      	adds	r4, #1
    3d26:	9301      	str	r3, [sp, #4]
    3d28:	230a      	movs	r3, #10
    3d2a:	9a01      	ldr	r2, [sp, #4]
    3d2c:	4353      	muls	r3, r2
    3d2e:	3b30      	subs	r3, #48	; 0x30
    3d30:	1859      	adds	r1, r3, r1
    3d32:	9147      	str	r1, [sp, #284]	; 0x11c
    3d34:	e7f0      	b.n	3d18 <__svfiscanf_r+0xac>
    3d36:	4e87      	ldr	r6, [pc, #540]	; (3f54 <__svfiscanf_r+0x2e8>)
    3d38:	2203      	movs	r2, #3
    3d3a:	1c30      	adds	r0, r6, #0
    3d3c:	f000 fddc 	bl	48f8 <memchr>
    3d40:	2800      	cmp	r0, #0
    3d42:	d008      	beq.n	3d56 <__svfiscanf_r+0xea>
    3d44:	1b80      	subs	r0, r0, r6
    3d46:	2601      	movs	r6, #1
    3d48:	4086      	lsls	r6, r0
    3d4a:	1c30      	adds	r0, r6, #0
    3d4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3d4e:	3401      	adds	r4, #1
    3d50:	4318      	orrs	r0, r3
    3d52:	9301      	str	r3, [sp, #4]
    3d54:	9045      	str	r0, [sp, #276]	; 0x114
    3d56:	1c66      	adds	r6, r4, #1
    3d58:	7824      	ldrb	r4, [r4, #0]
    3d5a:	2c67      	cmp	r4, #103	; 0x67
    3d5c:	d810      	bhi.n	3d80 <__svfiscanf_r+0x114>
    3d5e:	2c65      	cmp	r4, #101	; 0x65
    3d60:	d300      	bcc.n	3d64 <__svfiscanf_r+0xf8>
    3d62:	e084      	b.n	3e6e <__svfiscanf_r+0x202>
    3d64:	2c5b      	cmp	r4, #91	; 0x5b
    3d66:	d05a      	beq.n	3e1e <__svfiscanf_r+0x1b2>
    3d68:	d805      	bhi.n	3d76 <__svfiscanf_r+0x10a>
    3d6a:	2c00      	cmp	r4, #0
    3d6c:	d100      	bne.n	3d70 <__svfiscanf_r+0x104>
    3d6e:	e0e2      	b.n	3f36 <__svfiscanf_r+0x2ca>
    3d70:	2c25      	cmp	r4, #37	; 0x25
    3d72:	d018      	beq.n	3da6 <__svfiscanf_r+0x13a>
    3d74:	e07d      	b.n	3e72 <__svfiscanf_r+0x206>
    3d76:	2c63      	cmp	r4, #99	; 0x63
    3d78:	d05f      	beq.n	3e3a <__svfiscanf_r+0x1ce>
    3d7a:	2c64      	cmp	r4, #100	; 0x64
    3d7c:	d046      	beq.n	3e0c <__svfiscanf_r+0x1a0>
    3d7e:	e078      	b.n	3e72 <__svfiscanf_r+0x206>
    3d80:	2c70      	cmp	r4, #112	; 0x70
    3d82:	d034      	beq.n	3dee <__svfiscanf_r+0x182>
    3d84:	d807      	bhi.n	3d96 <__svfiscanf_r+0x12a>
    3d86:	2c6e      	cmp	r4, #110	; 0x6e
    3d88:	d05f      	beq.n	3e4a <__svfiscanf_r+0x1de>
    3d8a:	d841      	bhi.n	3e10 <__svfiscanf_r+0x1a4>
    3d8c:	2c69      	cmp	r4, #105	; 0x69
    3d8e:	d170      	bne.n	3e72 <__svfiscanf_r+0x206>
    3d90:	2300      	movs	r3, #0
    3d92:	9346      	str	r3, [sp, #280]	; 0x118
    3d94:	e041      	b.n	3e1a <__svfiscanf_r+0x1ae>
    3d96:	2c75      	cmp	r4, #117	; 0x75
    3d98:	d038      	beq.n	3e0c <__svfiscanf_r+0x1a0>
    3d9a:	2c78      	cmp	r4, #120	; 0x78
    3d9c:	d02d      	beq.n	3dfa <__svfiscanf_r+0x18e>
    3d9e:	2c73      	cmp	r4, #115	; 0x73
    3da0:	d167      	bne.n	3e72 <__svfiscanf_r+0x206>
    3da2:	2302      	movs	r3, #2
    3da4:	e047      	b.n	3e36 <__svfiscanf_r+0x1ca>
    3da6:	686b      	ldr	r3, [r5, #4]
    3da8:	2b00      	cmp	r3, #0
    3daa:	dd0e      	ble.n	3dca <__svfiscanf_r+0x15e>
    3dac:	682b      	ldr	r3, [r5, #0]
    3dae:	781a      	ldrb	r2, [r3, #0]
    3db0:	42a2      	cmp	r2, r4
    3db2:	d000      	beq.n	3db6 <__svfiscanf_r+0x14a>
    3db4:	e0bd      	b.n	3f32 <__svfiscanf_r+0x2c6>
    3db6:	3301      	adds	r3, #1
    3db8:	686a      	ldr	r2, [r5, #4]
    3dba:	602b      	str	r3, [r5, #0]
    3dbc:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3dbe:	3a01      	subs	r2, #1
    3dc0:	9301      	str	r3, [sp, #4]
    3dc2:	3301      	adds	r3, #1
    3dc4:	606a      	str	r2, [r5, #4]
    3dc6:	9349      	str	r3, [sp, #292]	; 0x124
    3dc8:	e797      	b.n	3cfa <__svfiscanf_r+0x8e>
    3dca:	2186      	movs	r1, #134	; 0x86
    3dcc:	23c0      	movs	r3, #192	; 0xc0
    3dce:	0049      	lsls	r1, r1, #1
    3dd0:	aa02      	add	r2, sp, #8
    3dd2:	1852      	adds	r2, r2, r1
    3dd4:	005b      	lsls	r3, r3, #1
    3dd6:	58d3      	ldr	r3, [r2, r3]
    3dd8:	1c38      	adds	r0, r7, #0
    3dda:	1c29      	adds	r1, r5, #0
    3ddc:	4798      	blx	r3
    3dde:	2800      	cmp	r0, #0
    3de0:	d0e4      	beq.n	3dac <__svfiscanf_r+0x140>
    3de2:	9848      	ldr	r0, [sp, #288]	; 0x120
    3de4:	2800      	cmp	r0, #0
    3de6:	d000      	beq.n	3dea <__svfiscanf_r+0x17e>
    3de8:	e09f      	b.n	3f2a <__svfiscanf_r+0x2be>
    3dea:	3801      	subs	r0, #1
    3dec:	e0a5      	b.n	3f3a <__svfiscanf_r+0x2ce>
    3dee:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3df0:	9301      	str	r3, [sp, #4]
    3df2:	2320      	movs	r3, #32
    3df4:	9a01      	ldr	r2, [sp, #4]
    3df6:	4313      	orrs	r3, r2
    3df8:	9345      	str	r3, [sp, #276]	; 0x114
    3dfa:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3dfc:	9301      	str	r3, [sp, #4]
    3dfe:	2380      	movs	r3, #128	; 0x80
    3e00:	9a01      	ldr	r2, [sp, #4]
    3e02:	009b      	lsls	r3, r3, #2
    3e04:	4313      	orrs	r3, r2
    3e06:	9345      	str	r3, [sp, #276]	; 0x114
    3e08:	2310      	movs	r3, #16
    3e0a:	e002      	b.n	3e12 <__svfiscanf_r+0x1a6>
    3e0c:	230a      	movs	r3, #10
    3e0e:	e000      	b.n	3e12 <__svfiscanf_r+0x1a6>
    3e10:	2308      	movs	r3, #8
    3e12:	9346      	str	r3, [sp, #280]	; 0x118
    3e14:	2304      	movs	r3, #4
    3e16:	2c6e      	cmp	r4, #110	; 0x6e
    3e18:	dc0d      	bgt.n	3e36 <__svfiscanf_r+0x1ca>
    3e1a:	2303      	movs	r3, #3
    3e1c:	e00b      	b.n	3e36 <__svfiscanf_r+0x1ca>
    3e1e:	1c31      	adds	r1, r6, #0
    3e20:	a805      	add	r0, sp, #20
    3e22:	f000 fac9 	bl	43b8 <__sccl>
    3e26:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3e28:	1c06      	adds	r6, r0, #0
    3e2a:	9301      	str	r3, [sp, #4]
    3e2c:	2340      	movs	r3, #64	; 0x40
    3e2e:	9a01      	ldr	r2, [sp, #4]
    3e30:	4313      	orrs	r3, r2
    3e32:	9345      	str	r3, [sp, #276]	; 0x114
    3e34:	2301      	movs	r3, #1
    3e36:	934b      	str	r3, [sp, #300]	; 0x12c
    3e38:	e01f      	b.n	3e7a <__svfiscanf_r+0x20e>
    3e3a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3e3c:	9301      	str	r3, [sp, #4]
    3e3e:	2340      	movs	r3, #64	; 0x40
    3e40:	9a01      	ldr	r2, [sp, #4]
    3e42:	4313      	orrs	r3, r2
    3e44:	9345      	str	r3, [sp, #276]	; 0x114
    3e46:	2300      	movs	r3, #0
    3e48:	e7f5      	b.n	3e36 <__svfiscanf_r+0x1ca>
    3e4a:	9945      	ldr	r1, [sp, #276]	; 0x114
    3e4c:	06cb      	lsls	r3, r1, #27
    3e4e:	d500      	bpl.n	3e52 <__svfiscanf_r+0x1e6>
    3e50:	e753      	b.n	3cfa <__svfiscanf_r+0x8e>
    3e52:	9b03      	ldr	r3, [sp, #12]
    3e54:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3e56:	07c8      	lsls	r0, r1, #31
    3e58:	d504      	bpl.n	3e64 <__svfiscanf_r+0x1f8>
    3e5a:	1d19      	adds	r1, r3, #4
    3e5c:	9103      	str	r1, [sp, #12]
    3e5e:	681b      	ldr	r3, [r3, #0]
    3e60:	801a      	strh	r2, [r3, #0]
    3e62:	e74a      	b.n	3cfa <__svfiscanf_r+0x8e>
    3e64:	1d19      	adds	r1, r3, #4
    3e66:	9103      	str	r1, [sp, #12]
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	601a      	str	r2, [r3, #0]
    3e6c:	e745      	b.n	3cfa <__svfiscanf_r+0x8e>
    3e6e:	2305      	movs	r3, #5
    3e70:	e7e1      	b.n	3e36 <__svfiscanf_r+0x1ca>
    3e72:	2303      	movs	r3, #3
    3e74:	934b      	str	r3, [sp, #300]	; 0x12c
    3e76:	3307      	adds	r3, #7
    3e78:	9346      	str	r3, [sp, #280]	; 0x118
    3e7a:	686b      	ldr	r3, [r5, #4]
    3e7c:	2b00      	cmp	r3, #0
    3e7e:	dd04      	ble.n	3e8a <__svfiscanf_r+0x21e>
    3e80:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3e82:	9301      	str	r3, [sp, #4]
    3e84:	065b      	lsls	r3, r3, #25
    3e86:	d518      	bpl.n	3eba <__svfiscanf_r+0x24e>
    3e88:	e01f      	b.n	3eca <__svfiscanf_r+0x25e>
    3e8a:	2186      	movs	r1, #134	; 0x86
    3e8c:	23c0      	movs	r3, #192	; 0xc0
    3e8e:	0049      	lsls	r1, r1, #1
    3e90:	aa02      	add	r2, sp, #8
    3e92:	1852      	adds	r2, r2, r1
    3e94:	005b      	lsls	r3, r3, #1
    3e96:	58d3      	ldr	r3, [r2, r3]
    3e98:	1c38      	adds	r0, r7, #0
    3e9a:	1c29      	adds	r1, r5, #0
    3e9c:	4798      	blx	r3
    3e9e:	2800      	cmp	r0, #0
    3ea0:	d0ee      	beq.n	3e80 <__svfiscanf_r+0x214>
    3ea2:	e79e      	b.n	3de2 <__svfiscanf_r+0x176>
    3ea4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3ea6:	9201      	str	r2, [sp, #4]
    3ea8:	3201      	adds	r2, #1
    3eaa:	9249      	str	r2, [sp, #292]	; 0x124
    3eac:	686a      	ldr	r2, [r5, #4]
    3eae:	3a01      	subs	r2, #1
    3eb0:	606a      	str	r2, [r5, #4]
    3eb2:	2a00      	cmp	r2, #0
    3eb4:	dd13      	ble.n	3ede <__svfiscanf_r+0x272>
    3eb6:	3301      	adds	r3, #1
    3eb8:	602b      	str	r3, [r5, #0]
    3eba:	682b      	ldr	r3, [r5, #0]
    3ebc:	4924      	ldr	r1, [pc, #144]	; (3f50 <__svfiscanf_r+0x2e4>)
    3ebe:	781a      	ldrb	r2, [r3, #0]
    3ec0:	6809      	ldr	r1, [r1, #0]
    3ec2:	188a      	adds	r2, r1, r2
    3ec4:	7852      	ldrb	r2, [r2, #1]
    3ec6:	0712      	lsls	r2, r2, #28
    3ec8:	d4ec      	bmi.n	3ea4 <__svfiscanf_r+0x238>
    3eca:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    3ecc:	2b02      	cmp	r3, #2
    3ece:	dc13      	bgt.n	3ef8 <__svfiscanf_r+0x28c>
    3ed0:	1c38      	adds	r0, r7, #0
    3ed2:	a945      	add	r1, sp, #276	; 0x114
    3ed4:	1c2a      	adds	r2, r5, #0
    3ed6:	ab03      	add	r3, sp, #12
    3ed8:	f000 f868 	bl	3fac <_scanf_chars>
    3edc:	e01f      	b.n	3f1e <__svfiscanf_r+0x2b2>
    3ede:	2186      	movs	r1, #134	; 0x86
    3ee0:	23c0      	movs	r3, #192	; 0xc0
    3ee2:	0049      	lsls	r1, r1, #1
    3ee4:	aa02      	add	r2, sp, #8
    3ee6:	1852      	adds	r2, r2, r1
    3ee8:	005b      	lsls	r3, r3, #1
    3eea:	58d3      	ldr	r3, [r2, r3]
    3eec:	1c38      	adds	r0, r7, #0
    3eee:	1c29      	adds	r1, r5, #0
    3ef0:	4798      	blx	r3
    3ef2:	2800      	cmp	r0, #0
    3ef4:	d0e1      	beq.n	3eba <__svfiscanf_r+0x24e>
    3ef6:	e774      	b.n	3de2 <__svfiscanf_r+0x176>
    3ef8:	2b04      	cmp	r3, #4
    3efa:	dc06      	bgt.n	3f0a <__svfiscanf_r+0x29e>
    3efc:	1c38      	adds	r0, r7, #0
    3efe:	a945      	add	r1, sp, #276	; 0x114
    3f00:	1c2a      	adds	r2, r5, #0
    3f02:	ab03      	add	r3, sp, #12
    3f04:	f000 f8b0 	bl	4068 <_scanf_i>
    3f08:	e009      	b.n	3f1e <__svfiscanf_r+0x2b2>
    3f0a:	4b13      	ldr	r3, [pc, #76]	; (3f58 <__svfiscanf_r+0x2ec>)
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d100      	bne.n	3f12 <__svfiscanf_r+0x2a6>
    3f10:	e6f3      	b.n	3cfa <__svfiscanf_r+0x8e>
    3f12:	1c38      	adds	r0, r7, #0
    3f14:	a945      	add	r1, sp, #276	; 0x114
    3f16:	1c2a      	adds	r2, r5, #0
    3f18:	ab03      	add	r3, sp, #12
    3f1a:	e000      	b.n	3f1e <__svfiscanf_r+0x2b2>
    3f1c:	bf00      	nop
    3f1e:	2801      	cmp	r0, #1
    3f20:	d007      	beq.n	3f32 <__svfiscanf_r+0x2c6>
    3f22:	2802      	cmp	r0, #2
    3f24:	d000      	beq.n	3f28 <__svfiscanf_r+0x2bc>
    3f26:	e6e8      	b.n	3cfa <__svfiscanf_r+0x8e>
    3f28:	e75b      	b.n	3de2 <__svfiscanf_r+0x176>
    3f2a:	89ab      	ldrh	r3, [r5, #12]
    3f2c:	065b      	lsls	r3, r3, #25
    3f2e:	d504      	bpl.n	3f3a <__svfiscanf_r+0x2ce>
    3f30:	e001      	b.n	3f36 <__svfiscanf_r+0x2ca>
    3f32:	9848      	ldr	r0, [sp, #288]	; 0x120
    3f34:	e001      	b.n	3f3a <__svfiscanf_r+0x2ce>
    3f36:	2001      	movs	r0, #1
    3f38:	4240      	negs	r0, r0
    3f3a:	23a7      	movs	r3, #167	; 0xa7
    3f3c:	009b      	lsls	r3, r3, #2
    3f3e:	449d      	add	sp, r3
    3f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	fffffd64 	.word	0xfffffd64
    3f48:	00004759 	.word	0x00004759
    3f4c:	00004275 	.word	0x00004275
    3f50:	2000007c 	.word	0x2000007c
    3f54:	000051b2 	.word	0x000051b2
    3f58:	00000000 	.word	0x00000000

00003f5c <_vfiscanf_r>:
    3f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f5e:	1c05      	adds	r5, r0, #0
    3f60:	1c0c      	adds	r4, r1, #0
    3f62:	1c17      	adds	r7, r2, #0
    3f64:	1c1e      	adds	r6, r3, #0
    3f66:	2800      	cmp	r0, #0
    3f68:	d004      	beq.n	3f74 <_vfiscanf_r+0x18>
    3f6a:	6983      	ldr	r3, [r0, #24]
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	d101      	bne.n	3f74 <_vfiscanf_r+0x18>
    3f70:	f7ff fa10 	bl	3394 <__sinit>
    3f74:	4b0a      	ldr	r3, [pc, #40]	; (3fa0 <_vfiscanf_r+0x44>)
    3f76:	429c      	cmp	r4, r3
    3f78:	d101      	bne.n	3f7e <_vfiscanf_r+0x22>
    3f7a:	686c      	ldr	r4, [r5, #4]
    3f7c:	e008      	b.n	3f90 <_vfiscanf_r+0x34>
    3f7e:	4b09      	ldr	r3, [pc, #36]	; (3fa4 <_vfiscanf_r+0x48>)
    3f80:	429c      	cmp	r4, r3
    3f82:	d101      	bne.n	3f88 <_vfiscanf_r+0x2c>
    3f84:	68ac      	ldr	r4, [r5, #8]
    3f86:	e003      	b.n	3f90 <_vfiscanf_r+0x34>
    3f88:	4b07      	ldr	r3, [pc, #28]	; (3fa8 <_vfiscanf_r+0x4c>)
    3f8a:	429c      	cmp	r4, r3
    3f8c:	d100      	bne.n	3f90 <_vfiscanf_r+0x34>
    3f8e:	68ec      	ldr	r4, [r5, #12]
    3f90:	1c28      	adds	r0, r5, #0
    3f92:	1c3a      	adds	r2, r7, #0
    3f94:	1c33      	adds	r3, r6, #0
    3f96:	1c21      	adds	r1, r4, #0
    3f98:	f7ff fe68 	bl	3c6c <__svfiscanf_r>
    3f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f9e:	46c0      	nop			; (mov r8, r8)
    3fa0:	0000514c 	.word	0x0000514c
    3fa4:	0000516c 	.word	0x0000516c
    3fa8:	0000518c 	.word	0x0000518c

00003fac <_scanf_chars>:
    3fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3fae:	1c15      	adds	r5, r2, #0
    3fb0:	688a      	ldr	r2, [r1, #8]
    3fb2:	9001      	str	r0, [sp, #4]
    3fb4:	1c0c      	adds	r4, r1, #0
    3fb6:	2a00      	cmp	r2, #0
    3fb8:	d106      	bne.n	3fc8 <_scanf_chars+0x1c>
    3fba:	698a      	ldr	r2, [r1, #24]
    3fbc:	1e51      	subs	r1, r2, #1
    3fbe:	418a      	sbcs	r2, r1
    3fc0:	2101      	movs	r1, #1
    3fc2:	4252      	negs	r2, r2
    3fc4:	430a      	orrs	r2, r1
    3fc6:	60a2      	str	r2, [r4, #8]
    3fc8:	6822      	ldr	r2, [r4, #0]
    3fca:	06d2      	lsls	r2, r2, #27
    3fcc:	d403      	bmi.n	3fd6 <_scanf_chars+0x2a>
    3fce:	681a      	ldr	r2, [r3, #0]
    3fd0:	1d11      	adds	r1, r2, #4
    3fd2:	6019      	str	r1, [r3, #0]
    3fd4:	6817      	ldr	r7, [r2, #0]
    3fd6:	2600      	movs	r6, #0
    3fd8:	69a0      	ldr	r0, [r4, #24]
    3fda:	2800      	cmp	r0, #0
    3fdc:	d11d      	bne.n	401a <_scanf_chars+0x6e>
    3fde:	6823      	ldr	r3, [r4, #0]
    3fe0:	3601      	adds	r6, #1
    3fe2:	06db      	lsls	r3, r3, #27
    3fe4:	d403      	bmi.n	3fee <_scanf_chars+0x42>
    3fe6:	682b      	ldr	r3, [r5, #0]
    3fe8:	781b      	ldrb	r3, [r3, #0]
    3fea:	703b      	strb	r3, [r7, #0]
    3fec:	3701      	adds	r7, #1
    3fee:	682a      	ldr	r2, [r5, #0]
    3ff0:	686b      	ldr	r3, [r5, #4]
    3ff2:	3201      	adds	r2, #1
    3ff4:	602a      	str	r2, [r5, #0]
    3ff6:	68a2      	ldr	r2, [r4, #8]
    3ff8:	3b01      	subs	r3, #1
    3ffa:	3a01      	subs	r2, #1
    3ffc:	606b      	str	r3, [r5, #4]
    3ffe:	60a2      	str	r2, [r4, #8]
    4000:	2a00      	cmp	r2, #0
    4002:	d01f      	beq.n	4044 <_scanf_chars+0x98>
    4004:	2b00      	cmp	r3, #0
    4006:	dce7      	bgt.n	3fd8 <_scanf_chars+0x2c>
    4008:	23c0      	movs	r3, #192	; 0xc0
    400a:	005b      	lsls	r3, r3, #1
    400c:	58e3      	ldr	r3, [r4, r3]
    400e:	9801      	ldr	r0, [sp, #4]
    4010:	1c29      	adds	r1, r5, #0
    4012:	4798      	blx	r3
    4014:	2800      	cmp	r0, #0
    4016:	d0df      	beq.n	3fd8 <_scanf_chars+0x2c>
    4018:	e014      	b.n	4044 <_scanf_chars+0x98>
    401a:	2801      	cmp	r0, #1
    401c:	d108      	bne.n	4030 <_scanf_chars+0x84>
    401e:	682b      	ldr	r3, [r5, #0]
    4020:	6962      	ldr	r2, [r4, #20]
    4022:	781b      	ldrb	r3, [r3, #0]
    4024:	5cd3      	ldrb	r3, [r2, r3]
    4026:	2b00      	cmp	r3, #0
    4028:	d1d9      	bne.n	3fde <_scanf_chars+0x32>
    402a:	2e00      	cmp	r6, #0
    402c:	d019      	beq.n	4062 <_scanf_chars+0xb6>
    402e:	e009      	b.n	4044 <_scanf_chars+0x98>
    4030:	2802      	cmp	r0, #2
    4032:	d107      	bne.n	4044 <_scanf_chars+0x98>
    4034:	682b      	ldr	r3, [r5, #0]
    4036:	4a0b      	ldr	r2, [pc, #44]	; (4064 <_scanf_chars+0xb8>)
    4038:	781b      	ldrb	r3, [r3, #0]
    403a:	6812      	ldr	r2, [r2, #0]
    403c:	18d3      	adds	r3, r2, r3
    403e:	785b      	ldrb	r3, [r3, #1]
    4040:	071b      	lsls	r3, r3, #28
    4042:	d5cc      	bpl.n	3fde <_scanf_chars+0x32>
    4044:	2310      	movs	r3, #16
    4046:	6822      	ldr	r2, [r4, #0]
    4048:	4013      	ands	r3, r2
    404a:	d106      	bne.n	405a <_scanf_chars+0xae>
    404c:	68e2      	ldr	r2, [r4, #12]
    404e:	3201      	adds	r2, #1
    4050:	60e2      	str	r2, [r4, #12]
    4052:	69a2      	ldr	r2, [r4, #24]
    4054:	2a00      	cmp	r2, #0
    4056:	d000      	beq.n	405a <_scanf_chars+0xae>
    4058:	703b      	strb	r3, [r7, #0]
    405a:	2000      	movs	r0, #0
    405c:	6923      	ldr	r3, [r4, #16]
    405e:	199e      	adds	r6, r3, r6
    4060:	6126      	str	r6, [r4, #16]
    4062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4064:	2000007c 	.word	0x2000007c

00004068 <_scanf_i>:
    4068:	b5f0      	push	{r4, r5, r6, r7, lr}
    406a:	1c0c      	adds	r4, r1, #0
    406c:	b08b      	sub	sp, #44	; 0x2c
    406e:	9301      	str	r3, [sp, #4]
    4070:	4b74      	ldr	r3, [pc, #464]	; (4244 <_scanf_i+0x1dc>)
    4072:	9004      	str	r0, [sp, #16]
    4074:	1c16      	adds	r6, r2, #0
    4076:	aa07      	add	r2, sp, #28
    4078:	cb23      	ldmia	r3!, {r0, r1, r5}
    407a:	c223      	stmia	r2!, {r0, r1, r5}
    407c:	4b72      	ldr	r3, [pc, #456]	; (4248 <_scanf_i+0x1e0>)
    407e:	9305      	str	r3, [sp, #20]
    4080:	69a3      	ldr	r3, [r4, #24]
    4082:	2b03      	cmp	r3, #3
    4084:	d001      	beq.n	408a <_scanf_i+0x22>
    4086:	4b71      	ldr	r3, [pc, #452]	; (424c <_scanf_i+0x1e4>)
    4088:	9305      	str	r3, [sp, #20]
    408a:	2200      	movs	r2, #0
    408c:	68a3      	ldr	r3, [r4, #8]
    408e:	9203      	str	r2, [sp, #12]
    4090:	325d      	adds	r2, #93	; 0x5d
    4092:	1e59      	subs	r1, r3, #1
    4094:	32ff      	adds	r2, #255	; 0xff
    4096:	4291      	cmp	r1, r2
    4098:	d905      	bls.n	40a6 <_scanf_i+0x3e>
    409a:	3b5e      	subs	r3, #94	; 0x5e
    409c:	3bff      	subs	r3, #255	; 0xff
    409e:	9303      	str	r3, [sp, #12]
    40a0:	235e      	movs	r3, #94	; 0x5e
    40a2:	33ff      	adds	r3, #255	; 0xff
    40a4:	60a3      	str	r3, [r4, #8]
    40a6:	1c23      	adds	r3, r4, #0
    40a8:	331c      	adds	r3, #28
    40aa:	9300      	str	r3, [sp, #0]
    40ac:	23d0      	movs	r3, #208	; 0xd0
    40ae:	2700      	movs	r7, #0
    40b0:	6822      	ldr	r2, [r4, #0]
    40b2:	011b      	lsls	r3, r3, #4
    40b4:	4313      	orrs	r3, r2
    40b6:	6023      	str	r3, [r4, #0]
    40b8:	9b00      	ldr	r3, [sp, #0]
    40ba:	9302      	str	r3, [sp, #8]
    40bc:	6832      	ldr	r2, [r6, #0]
    40be:	00bb      	lsls	r3, r7, #2
    40c0:	7811      	ldrb	r1, [r2, #0]
    40c2:	aa07      	add	r2, sp, #28
    40c4:	5898      	ldr	r0, [r3, r2]
    40c6:	2202      	movs	r2, #2
    40c8:	f000 fc16 	bl	48f8 <memchr>
    40cc:	2800      	cmp	r0, #0
    40ce:	d039      	beq.n	4144 <_scanf_i+0xdc>
    40d0:	2f01      	cmp	r7, #1
    40d2:	d10d      	bne.n	40f0 <_scanf_i+0x88>
    40d4:	6863      	ldr	r3, [r4, #4]
    40d6:	2b00      	cmp	r3, #0
    40d8:	d106      	bne.n	40e8 <_scanf_i+0x80>
    40da:	3308      	adds	r3, #8
    40dc:	6822      	ldr	r2, [r4, #0]
    40de:	6063      	str	r3, [r4, #4]
    40e0:	33f9      	adds	r3, #249	; 0xf9
    40e2:	33ff      	adds	r3, #255	; 0xff
    40e4:	4313      	orrs	r3, r2
    40e6:	6023      	str	r3, [r4, #0]
    40e8:	4b59      	ldr	r3, [pc, #356]	; (4250 <_scanf_i+0x1e8>)
    40ea:	6822      	ldr	r2, [r4, #0]
    40ec:	4013      	ands	r3, r2
    40ee:	e00d      	b.n	410c <_scanf_i+0xa4>
    40f0:	2f02      	cmp	r7, #2
    40f2:	d10c      	bne.n	410e <_scanf_i+0xa6>
    40f4:	22c0      	movs	r2, #192	; 0xc0
    40f6:	2180      	movs	r1, #128	; 0x80
    40f8:	6823      	ldr	r3, [r4, #0]
    40fa:	00d2      	lsls	r2, r2, #3
    40fc:	401a      	ands	r2, r3
    40fe:	0089      	lsls	r1, r1, #2
    4100:	428a      	cmp	r2, r1
    4102:	d122      	bne.n	414a <_scanf_i+0xe2>
    4104:	2210      	movs	r2, #16
    4106:	6062      	str	r2, [r4, #4]
    4108:	32f0      	adds	r2, #240	; 0xf0
    410a:	4313      	orrs	r3, r2
    410c:	6023      	str	r3, [r4, #0]
    410e:	68a3      	ldr	r3, [r4, #8]
    4110:	1e5a      	subs	r2, r3, #1
    4112:	60a2      	str	r2, [r4, #8]
    4114:	2b00      	cmp	r3, #0
    4116:	d015      	beq.n	4144 <_scanf_i+0xdc>
    4118:	9b02      	ldr	r3, [sp, #8]
    411a:	1c5d      	adds	r5, r3, #1
    411c:	6833      	ldr	r3, [r6, #0]
    411e:	1c5a      	adds	r2, r3, #1
    4120:	6032      	str	r2, [r6, #0]
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	9a02      	ldr	r2, [sp, #8]
    4126:	9502      	str	r5, [sp, #8]
    4128:	7013      	strb	r3, [r2, #0]
    412a:	6873      	ldr	r3, [r6, #4]
    412c:	3b01      	subs	r3, #1
    412e:	6073      	str	r3, [r6, #4]
    4130:	2b00      	cmp	r3, #0
    4132:	dc07      	bgt.n	4144 <_scanf_i+0xdc>
    4134:	23c0      	movs	r3, #192	; 0xc0
    4136:	005b      	lsls	r3, r3, #1
    4138:	58e3      	ldr	r3, [r4, r3]
    413a:	9804      	ldr	r0, [sp, #16]
    413c:	1c31      	adds	r1, r6, #0
    413e:	4798      	blx	r3
    4140:	2800      	cmp	r0, #0
    4142:	d144      	bne.n	41ce <_scanf_i+0x166>
    4144:	3701      	adds	r7, #1
    4146:	2f03      	cmp	r7, #3
    4148:	d1b8      	bne.n	40bc <_scanf_i+0x54>
    414a:	6863      	ldr	r3, [r4, #4]
    414c:	2b00      	cmp	r3, #0
    414e:	d101      	bne.n	4154 <_scanf_i+0xec>
    4150:	330a      	adds	r3, #10
    4152:	6063      	str	r3, [r4, #4]
    4154:	2110      	movs	r1, #16
    4156:	2700      	movs	r7, #0
    4158:	6863      	ldr	r3, [r4, #4]
    415a:	6960      	ldr	r0, [r4, #20]
    415c:	1ac9      	subs	r1, r1, r3
    415e:	4b3d      	ldr	r3, [pc, #244]	; (4254 <_scanf_i+0x1ec>)
    4160:	18c9      	adds	r1, r1, r3
    4162:	f000 f929 	bl	43b8 <__sccl>
    4166:	9d02      	ldr	r5, [sp, #8]
    4168:	68a3      	ldr	r3, [r4, #8]
    416a:	2b00      	cmp	r3, #0
    416c:	d030      	beq.n	41d0 <_scanf_i+0x168>
    416e:	6832      	ldr	r2, [r6, #0]
    4170:	6960      	ldr	r0, [r4, #20]
    4172:	7811      	ldrb	r1, [r2, #0]
    4174:	5c40      	ldrb	r0, [r0, r1]
    4176:	2800      	cmp	r0, #0
    4178:	d02a      	beq.n	41d0 <_scanf_i+0x168>
    417a:	2930      	cmp	r1, #48	; 0x30
    417c:	d10b      	bne.n	4196 <_scanf_i+0x12e>
    417e:	6821      	ldr	r1, [r4, #0]
    4180:	0509      	lsls	r1, r1, #20
    4182:	d508      	bpl.n	4196 <_scanf_i+0x12e>
    4184:	9a03      	ldr	r2, [sp, #12]
    4186:	3701      	adds	r7, #1
    4188:	2a00      	cmp	r2, #0
    418a:	d00b      	beq.n	41a4 <_scanf_i+0x13c>
    418c:	3a01      	subs	r2, #1
    418e:	3301      	adds	r3, #1
    4190:	9203      	str	r2, [sp, #12]
    4192:	60a3      	str	r3, [r4, #8]
    4194:	e006      	b.n	41a4 <_scanf_i+0x13c>
    4196:	6821      	ldr	r1, [r4, #0]
    4198:	4b2f      	ldr	r3, [pc, #188]	; (4258 <_scanf_i+0x1f0>)
    419a:	400b      	ands	r3, r1
    419c:	6023      	str	r3, [r4, #0]
    419e:	7813      	ldrb	r3, [r2, #0]
    41a0:	702b      	strb	r3, [r5, #0]
    41a2:	3501      	adds	r5, #1
    41a4:	6873      	ldr	r3, [r6, #4]
    41a6:	3b01      	subs	r3, #1
    41a8:	6073      	str	r3, [r6, #4]
    41aa:	2b00      	cmp	r3, #0
    41ac:	dd03      	ble.n	41b6 <_scanf_i+0x14e>
    41ae:	6833      	ldr	r3, [r6, #0]
    41b0:	3301      	adds	r3, #1
    41b2:	6033      	str	r3, [r6, #0]
    41b4:	e007      	b.n	41c6 <_scanf_i+0x15e>
    41b6:	23c0      	movs	r3, #192	; 0xc0
    41b8:	005b      	lsls	r3, r3, #1
    41ba:	58e3      	ldr	r3, [r4, r3]
    41bc:	9804      	ldr	r0, [sp, #16]
    41be:	1c31      	adds	r1, r6, #0
    41c0:	4798      	blx	r3
    41c2:	2800      	cmp	r0, #0
    41c4:	d104      	bne.n	41d0 <_scanf_i+0x168>
    41c6:	68a3      	ldr	r3, [r4, #8]
    41c8:	3b01      	subs	r3, #1
    41ca:	60a3      	str	r3, [r4, #8]
    41cc:	e7cc      	b.n	4168 <_scanf_i+0x100>
    41ce:	2700      	movs	r7, #0
    41d0:	6823      	ldr	r3, [r4, #0]
    41d2:	05db      	lsls	r3, r3, #23
    41d4:	d50e      	bpl.n	41f4 <_scanf_i+0x18c>
    41d6:	9b00      	ldr	r3, [sp, #0]
    41d8:	429d      	cmp	r5, r3
    41da:	d907      	bls.n	41ec <_scanf_i+0x184>
    41dc:	23be      	movs	r3, #190	; 0xbe
    41de:	3d01      	subs	r5, #1
    41e0:	005b      	lsls	r3, r3, #1
    41e2:	7829      	ldrb	r1, [r5, #0]
    41e4:	58e3      	ldr	r3, [r4, r3]
    41e6:	9804      	ldr	r0, [sp, #16]
    41e8:	1c32      	adds	r2, r6, #0
    41ea:	4798      	blx	r3
    41ec:	9b00      	ldr	r3, [sp, #0]
    41ee:	2001      	movs	r0, #1
    41f0:	429d      	cmp	r5, r3
    41f2:	d025      	beq.n	4240 <_scanf_i+0x1d8>
    41f4:	2210      	movs	r2, #16
    41f6:	6823      	ldr	r3, [r4, #0]
    41f8:	401a      	ands	r2, r3
    41fa:	d11a      	bne.n	4232 <_scanf_i+0x1ca>
    41fc:	702a      	strb	r2, [r5, #0]
    41fe:	6863      	ldr	r3, [r4, #4]
    4200:	9804      	ldr	r0, [sp, #16]
    4202:	9900      	ldr	r1, [sp, #0]
    4204:	9e05      	ldr	r6, [sp, #20]
    4206:	47b0      	blx	r6
    4208:	9b01      	ldr	r3, [sp, #4]
    420a:	6822      	ldr	r2, [r4, #0]
    420c:	681b      	ldr	r3, [r3, #0]
    420e:	0691      	lsls	r1, r2, #26
    4210:	d407      	bmi.n	4222 <_scanf_i+0x1ba>
    4212:	07d1      	lsls	r1, r2, #31
    4214:	d505      	bpl.n	4222 <_scanf_i+0x1ba>
    4216:	9901      	ldr	r1, [sp, #4]
    4218:	1d1a      	adds	r2, r3, #4
    421a:	600a      	str	r2, [r1, #0]
    421c:	681b      	ldr	r3, [r3, #0]
    421e:	8018      	strh	r0, [r3, #0]
    4220:	e004      	b.n	422c <_scanf_i+0x1c4>
    4222:	9901      	ldr	r1, [sp, #4]
    4224:	1d1a      	adds	r2, r3, #4
    4226:	600a      	str	r2, [r1, #0]
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	6018      	str	r0, [r3, #0]
    422c:	68e3      	ldr	r3, [r4, #12]
    422e:	3301      	adds	r3, #1
    4230:	60e3      	str	r3, [r4, #12]
    4232:	2000      	movs	r0, #0
    4234:	9b00      	ldr	r3, [sp, #0]
    4236:	1aed      	subs	r5, r5, r3
    4238:	6923      	ldr	r3, [r4, #16]
    423a:	19ed      	adds	r5, r5, r7
    423c:	195d      	adds	r5, r3, r5
    423e:	6125      	str	r5, [r4, #16]
    4240:	b00b      	add	sp, #44	; 0x2c
    4242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4244:	000051e0 	.word	0x000051e0
    4248:	000044b9 	.word	0x000044b9
    424c:	000045d9 	.word	0x000045d9
    4250:	fffffaff 	.word	0xfffffaff
    4254:	000051ec 	.word	0x000051ec
    4258:	fffff6ff 	.word	0xfffff6ff

0000425c <lflush>:
    425c:	2209      	movs	r2, #9
    425e:	b508      	push	{r3, lr}
    4260:	8981      	ldrh	r1, [r0, #12]
    4262:	1c03      	adds	r3, r0, #0
    4264:	400a      	ands	r2, r1
    4266:	2000      	movs	r0, #0
    4268:	2a09      	cmp	r2, #9
    426a:	d102      	bne.n	4272 <lflush+0x16>
    426c:	1c18      	adds	r0, r3, #0
    426e:	f7ff f83b 	bl	32e8 <fflush>
    4272:	bd08      	pop	{r3, pc}

00004274 <__srefill_r>:
    4274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4276:	1c05      	adds	r5, r0, #0
    4278:	1c0c      	adds	r4, r1, #0
    427a:	2800      	cmp	r0, #0
    427c:	d004      	beq.n	4288 <__srefill_r+0x14>
    427e:	6983      	ldr	r3, [r0, #24]
    4280:	2b00      	cmp	r3, #0
    4282:	d101      	bne.n	4288 <__srefill_r+0x14>
    4284:	f7ff f886 	bl	3394 <__sinit>
    4288:	4b3d      	ldr	r3, [pc, #244]	; (4380 <__srefill_r+0x10c>)
    428a:	429c      	cmp	r4, r3
    428c:	d101      	bne.n	4292 <__srefill_r+0x1e>
    428e:	686c      	ldr	r4, [r5, #4]
    4290:	e008      	b.n	42a4 <__srefill_r+0x30>
    4292:	4b3c      	ldr	r3, [pc, #240]	; (4384 <__srefill_r+0x110>)
    4294:	429c      	cmp	r4, r3
    4296:	d101      	bne.n	429c <__srefill_r+0x28>
    4298:	68ac      	ldr	r4, [r5, #8]
    429a:	e003      	b.n	42a4 <__srefill_r+0x30>
    429c:	4b3a      	ldr	r3, [pc, #232]	; (4388 <__srefill_r+0x114>)
    429e:	429c      	cmp	r4, r3
    42a0:	d100      	bne.n	42a4 <__srefill_r+0x30>
    42a2:	68ec      	ldr	r4, [r5, #12]
    42a4:	2300      	movs	r3, #0
    42a6:	89a2      	ldrh	r2, [r4, #12]
    42a8:	6063      	str	r3, [r4, #4]
    42aa:	b293      	uxth	r3, r2
    42ac:	0699      	lsls	r1, r3, #26
    42ae:	d463      	bmi.n	4378 <__srefill_r+0x104>
    42b0:	0759      	lsls	r1, r3, #29
    42b2:	d41a      	bmi.n	42ea <__srefill_r+0x76>
    42b4:	06d9      	lsls	r1, r3, #27
    42b6:	d405      	bmi.n	42c4 <__srefill_r+0x50>
    42b8:	2309      	movs	r3, #9
    42ba:	602b      	str	r3, [r5, #0]
    42bc:	3337      	adds	r3, #55	; 0x37
    42be:	431a      	orrs	r2, r3
    42c0:	81a2      	strh	r2, [r4, #12]
    42c2:	e059      	b.n	4378 <__srefill_r+0x104>
    42c4:	2608      	movs	r6, #8
    42c6:	4233      	tst	r3, r6
    42c8:	d00a      	beq.n	42e0 <__srefill_r+0x6c>
    42ca:	1c28      	adds	r0, r5, #0
    42cc:	1c21      	adds	r1, r4, #0
    42ce:	f7fe ffdf 	bl	3290 <_fflush_r>
    42d2:	2800      	cmp	r0, #0
    42d4:	d150      	bne.n	4378 <__srefill_r+0x104>
    42d6:	89a3      	ldrh	r3, [r4, #12]
    42d8:	60a0      	str	r0, [r4, #8]
    42da:	43b3      	bics	r3, r6
    42dc:	81a3      	strh	r3, [r4, #12]
    42de:	61a0      	str	r0, [r4, #24]
    42e0:	2204      	movs	r2, #4
    42e2:	89a3      	ldrh	r3, [r4, #12]
    42e4:	4313      	orrs	r3, r2
    42e6:	81a3      	strh	r3, [r4, #12]
    42e8:	e012      	b.n	4310 <__srefill_r+0x9c>
    42ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    42ec:	2900      	cmp	r1, #0
    42ee:	d00f      	beq.n	4310 <__srefill_r+0x9c>
    42f0:	1c23      	adds	r3, r4, #0
    42f2:	3344      	adds	r3, #68	; 0x44
    42f4:	4299      	cmp	r1, r3
    42f6:	d002      	beq.n	42fe <__srefill_r+0x8a>
    42f8:	1c28      	adds	r0, r5, #0
    42fa:	f7ff f95b 	bl	35b4 <_free_r>
    42fe:	2000      	movs	r0, #0
    4300:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4302:	6360      	str	r0, [r4, #52]	; 0x34
    4304:	6063      	str	r3, [r4, #4]
    4306:	4283      	cmp	r3, r0
    4308:	d002      	beq.n	4310 <__srefill_r+0x9c>
    430a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    430c:	6023      	str	r3, [r4, #0]
    430e:	e035      	b.n	437c <__srefill_r+0x108>
    4310:	6923      	ldr	r3, [r4, #16]
    4312:	2b00      	cmp	r3, #0
    4314:	d103      	bne.n	431e <__srefill_r+0xaa>
    4316:	1c28      	adds	r0, r5, #0
    4318:	1c21      	adds	r1, r4, #0
    431a:	f7ff f8e9 	bl	34f0 <__smakebuf_r>
    431e:	89a7      	ldrh	r7, [r4, #12]
    4320:	b2be      	uxth	r6, r7
    4322:	07b3      	lsls	r3, r6, #30
    4324:	d00f      	beq.n	4346 <__srefill_r+0xd2>
    4326:	2301      	movs	r3, #1
    4328:	81a3      	strh	r3, [r4, #12]
    432a:	4b18      	ldr	r3, [pc, #96]	; (438c <__srefill_r+0x118>)
    432c:	4918      	ldr	r1, [pc, #96]	; (4390 <__srefill_r+0x11c>)
    432e:	6818      	ldr	r0, [r3, #0]
    4330:	f7ff f8a0 	bl	3474 <_fwalk>
    4334:	2309      	movs	r3, #9
    4336:	81a7      	strh	r7, [r4, #12]
    4338:	4033      	ands	r3, r6
    433a:	2b09      	cmp	r3, #9
    433c:	d103      	bne.n	4346 <__srefill_r+0xd2>
    433e:	1c28      	adds	r0, r5, #0
    4340:	1c21      	adds	r1, r4, #0
    4342:	f7fe ff1b 	bl	317c <__sflush_r>
    4346:	6923      	ldr	r3, [r4, #16]
    4348:	1c28      	adds	r0, r5, #0
    434a:	1c1a      	adds	r2, r3, #0
    434c:	6023      	str	r3, [r4, #0]
    434e:	6a21      	ldr	r1, [r4, #32]
    4350:	6963      	ldr	r3, [r4, #20]
    4352:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4354:	47a8      	blx	r5
    4356:	1c02      	adds	r2, r0, #0
    4358:	6060      	str	r0, [r4, #4]
    435a:	2000      	movs	r0, #0
    435c:	4282      	cmp	r2, r0
    435e:	dc0d      	bgt.n	437c <__srefill_r+0x108>
    4360:	89a3      	ldrh	r3, [r4, #12]
    4362:	4282      	cmp	r2, r0
    4364:	d104      	bne.n	4370 <__srefill_r+0xfc>
    4366:	2220      	movs	r2, #32
    4368:	4313      	orrs	r3, r2
    436a:	81a3      	strh	r3, [r4, #12]
    436c:	3801      	subs	r0, #1
    436e:	e005      	b.n	437c <__srefill_r+0x108>
    4370:	2240      	movs	r2, #64	; 0x40
    4372:	4313      	orrs	r3, r2
    4374:	6060      	str	r0, [r4, #4]
    4376:	81a3      	strh	r3, [r4, #12]
    4378:	2001      	movs	r0, #1
    437a:	4240      	negs	r0, r0
    437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    437e:	46c0      	nop			; (mov r8, r8)
    4380:	0000514c 	.word	0x0000514c
    4384:	0000516c 	.word	0x0000516c
    4388:	0000518c 	.word	0x0000518c
    438c:	00005148 	.word	0x00005148
    4390:	0000425d 	.word	0x0000425d

00004394 <_sbrk_r>:
    4394:	b538      	push	{r3, r4, r5, lr}
    4396:	2300      	movs	r3, #0
    4398:	4c06      	ldr	r4, [pc, #24]	; (43b4 <_sbrk_r+0x20>)
    439a:	1c05      	adds	r5, r0, #0
    439c:	1c08      	adds	r0, r1, #0
    439e:	6023      	str	r3, [r4, #0]
    43a0:	f7fe fbdc 	bl	2b5c <_sbrk>
    43a4:	1c43      	adds	r3, r0, #1
    43a6:	d103      	bne.n	43b0 <_sbrk_r+0x1c>
    43a8:	6823      	ldr	r3, [r4, #0]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d000      	beq.n	43b0 <_sbrk_r+0x1c>
    43ae:	602b      	str	r3, [r5, #0]
    43b0:	bd38      	pop	{r3, r4, r5, pc}
    43b2:	46c0      	nop			; (mov r8, r8)
    43b4:	20000b60 	.word	0x20000b60

000043b8 <__sccl>:
    43b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ba:	780a      	ldrb	r2, [r1, #0]
    43bc:	2a5e      	cmp	r2, #94	; 0x5e
    43be:	d002      	beq.n	43c6 <__sccl+0xe>
    43c0:	1c4b      	adds	r3, r1, #1
    43c2:	2400      	movs	r4, #0
    43c4:	e002      	b.n	43cc <__sccl+0x14>
    43c6:	2401      	movs	r4, #1
    43c8:	784a      	ldrb	r2, [r1, #1]
    43ca:	1c8b      	adds	r3, r1, #2
    43cc:	1c01      	adds	r1, r0, #0
    43ce:	1c45      	adds	r5, r0, #1
    43d0:	35ff      	adds	r5, #255	; 0xff
    43d2:	700c      	strb	r4, [r1, #0]
    43d4:	3101      	adds	r1, #1
    43d6:	42a9      	cmp	r1, r5
    43d8:	d1fb      	bne.n	43d2 <__sccl+0x1a>
    43da:	2a00      	cmp	r2, #0
    43dc:	d101      	bne.n	43e2 <__sccl+0x2a>
    43de:	1e58      	subs	r0, r3, #1
    43e0:	e01c      	b.n	441c <__sccl+0x64>
    43e2:	2101      	movs	r1, #1
    43e4:	1b0c      	subs	r4, r1, r4
    43e6:	b2e7      	uxtb	r7, r4
    43e8:	5487      	strb	r7, [r0, r2]
    43ea:	7819      	ldrb	r1, [r3, #0]
    43ec:	1c5e      	adds	r6, r3, #1
    43ee:	292d      	cmp	r1, #45	; 0x2d
    43f0:	d006      	beq.n	4400 <__sccl+0x48>
    43f2:	295d      	cmp	r1, #93	; 0x5d
    43f4:	d00f      	beq.n	4416 <__sccl+0x5e>
    43f6:	2900      	cmp	r1, #0
    43f8:	d00f      	beq.n	441a <__sccl+0x62>
    43fa:	1c0a      	adds	r2, r1, #0
    43fc:	1c33      	adds	r3, r6, #0
    43fe:	e7f2      	b.n	43e6 <__sccl+0x2e>
    4400:	785d      	ldrb	r5, [r3, #1]
    4402:	2d5d      	cmp	r5, #93	; 0x5d
    4404:	d0f9      	beq.n	43fa <__sccl+0x42>
    4406:	4295      	cmp	r5, r2
    4408:	dbf7      	blt.n	43fa <__sccl+0x42>
    440a:	3302      	adds	r3, #2
    440c:	3201      	adds	r2, #1
    440e:	5487      	strb	r7, [r0, r2]
    4410:	42aa      	cmp	r2, r5
    4412:	dbfb      	blt.n	440c <__sccl+0x54>
    4414:	e7e9      	b.n	43ea <__sccl+0x32>
    4416:	1c30      	adds	r0, r6, #0
    4418:	e000      	b.n	441c <__sccl+0x64>
    441a:	1c18      	adds	r0, r3, #0
    441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00004420 <__sread>:
    4420:	b538      	push	{r3, r4, r5, lr}
    4422:	1c0c      	adds	r4, r1, #0
    4424:	250e      	movs	r5, #14
    4426:	5f49      	ldrsh	r1, [r1, r5]
    4428:	f000 fa98 	bl	495c <_read_r>
    442c:	2800      	cmp	r0, #0
    442e:	db03      	blt.n	4438 <__sread+0x18>
    4430:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4432:	181b      	adds	r3, r3, r0
    4434:	6563      	str	r3, [r4, #84]	; 0x54
    4436:	e003      	b.n	4440 <__sread+0x20>
    4438:	89a2      	ldrh	r2, [r4, #12]
    443a:	4b02      	ldr	r3, [pc, #8]	; (4444 <__sread+0x24>)
    443c:	4013      	ands	r3, r2
    443e:	81a3      	strh	r3, [r4, #12]
    4440:	bd38      	pop	{r3, r4, r5, pc}
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	ffffefff 	.word	0xffffefff

00004448 <__swrite>:
    4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    444a:	1c1e      	adds	r6, r3, #0
    444c:	898b      	ldrh	r3, [r1, #12]
    444e:	1c05      	adds	r5, r0, #0
    4450:	1c0c      	adds	r4, r1, #0
    4452:	1c17      	adds	r7, r2, #0
    4454:	05db      	lsls	r3, r3, #23
    4456:	d505      	bpl.n	4464 <__swrite+0x1c>
    4458:	230e      	movs	r3, #14
    445a:	5ec9      	ldrsh	r1, [r1, r3]
    445c:	2200      	movs	r2, #0
    445e:	2302      	movs	r3, #2
    4460:	f000 fa36 	bl	48d0 <_lseek_r>
    4464:	89a2      	ldrh	r2, [r4, #12]
    4466:	4b05      	ldr	r3, [pc, #20]	; (447c <__swrite+0x34>)
    4468:	1c28      	adds	r0, r5, #0
    446a:	4013      	ands	r3, r2
    446c:	81a3      	strh	r3, [r4, #12]
    446e:	1c3a      	adds	r2, r7, #0
    4470:	230e      	movs	r3, #14
    4472:	5ee1      	ldrsh	r1, [r4, r3]
    4474:	1c33      	adds	r3, r6, #0
    4476:	f000 f9e1 	bl	483c <_write_r>
    447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    447c:	ffffefff 	.word	0xffffefff

00004480 <__sseek>:
    4480:	b538      	push	{r3, r4, r5, lr}
    4482:	1c0c      	adds	r4, r1, #0
    4484:	250e      	movs	r5, #14
    4486:	5f49      	ldrsh	r1, [r1, r5]
    4488:	f000 fa22 	bl	48d0 <_lseek_r>
    448c:	89a3      	ldrh	r3, [r4, #12]
    448e:	1c42      	adds	r2, r0, #1
    4490:	d103      	bne.n	449a <__sseek+0x1a>
    4492:	4a05      	ldr	r2, [pc, #20]	; (44a8 <__sseek+0x28>)
    4494:	4013      	ands	r3, r2
    4496:	81a3      	strh	r3, [r4, #12]
    4498:	e004      	b.n	44a4 <__sseek+0x24>
    449a:	2280      	movs	r2, #128	; 0x80
    449c:	0152      	lsls	r2, r2, #5
    449e:	4313      	orrs	r3, r2
    44a0:	81a3      	strh	r3, [r4, #12]
    44a2:	6560      	str	r0, [r4, #84]	; 0x54
    44a4:	bd38      	pop	{r3, r4, r5, pc}
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	ffffefff 	.word	0xffffefff

000044ac <__sclose>:
    44ac:	b508      	push	{r3, lr}
    44ae:	230e      	movs	r3, #14
    44b0:	5ec9      	ldrsh	r1, [r1, r3]
    44b2:	f000 f9d7 	bl	4864 <_close_r>
    44b6:	bd08      	pop	{r3, pc}

000044b8 <_strtol_r>:
    44b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ba:	1c1e      	adds	r6, r3, #0
    44bc:	4b44      	ldr	r3, [pc, #272]	; (45d0 <_strtol_r+0x118>)
    44be:	b087      	sub	sp, #28
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	9005      	str	r0, [sp, #20]
    44c4:	9302      	str	r3, [sp, #8]
    44c6:	1c0b      	adds	r3, r1, #0
    44c8:	9103      	str	r1, [sp, #12]
    44ca:	9201      	str	r2, [sp, #4]
    44cc:	781c      	ldrb	r4, [r3, #0]
    44ce:	9a02      	ldr	r2, [sp, #8]
    44d0:	1c5d      	adds	r5, r3, #1
    44d2:	1912      	adds	r2, r2, r4
    44d4:	7850      	ldrb	r0, [r2, #1]
    44d6:	2208      	movs	r2, #8
    44d8:	4010      	ands	r0, r2
    44da:	d001      	beq.n	44e0 <_strtol_r+0x28>
    44dc:	1c2b      	adds	r3, r5, #0
    44de:	e7f5      	b.n	44cc <_strtol_r+0x14>
    44e0:	2c2d      	cmp	r4, #45	; 0x2d
    44e2:	d104      	bne.n	44ee <_strtol_r+0x36>
    44e4:	1c9d      	adds	r5, r3, #2
    44e6:	785c      	ldrb	r4, [r3, #1]
    44e8:	2301      	movs	r3, #1
    44ea:	9300      	str	r3, [sp, #0]
    44ec:	e004      	b.n	44f8 <_strtol_r+0x40>
    44ee:	9000      	str	r0, [sp, #0]
    44f0:	2c2b      	cmp	r4, #43	; 0x2b
    44f2:	d101      	bne.n	44f8 <_strtol_r+0x40>
    44f4:	785c      	ldrb	r4, [r3, #1]
    44f6:	1c9d      	adds	r5, r3, #2
    44f8:	2e00      	cmp	r6, #0
    44fa:	d002      	beq.n	4502 <_strtol_r+0x4a>
    44fc:	2e10      	cmp	r6, #16
    44fe:	d10a      	bne.n	4516 <_strtol_r+0x5e>
    4500:	e060      	b.n	45c4 <_strtol_r+0x10c>
    4502:	2c30      	cmp	r4, #48	; 0x30
    4504:	d15c      	bne.n	45c0 <_strtol_r+0x108>
    4506:	2220      	movs	r2, #32
    4508:	782b      	ldrb	r3, [r5, #0]
    450a:	4393      	bics	r3, r2
    450c:	2b58      	cmp	r3, #88	; 0x58
    450e:	d152      	bne.n	45b6 <_strtol_r+0xfe>
    4510:	2610      	movs	r6, #16
    4512:	786c      	ldrb	r4, [r5, #1]
    4514:	3502      	adds	r5, #2
    4516:	9f00      	ldr	r7, [sp, #0]
    4518:	1c31      	adds	r1, r6, #0
    451a:	1e7b      	subs	r3, r7, #1
    451c:	419f      	sbcs	r7, r3
    451e:	4b2d      	ldr	r3, [pc, #180]	; (45d4 <_strtol_r+0x11c>)
    4520:	18ff      	adds	r7, r7, r3
    4522:	1c38      	adds	r0, r7, #0
    4524:	f7fe fbc0 	bl	2ca8 <__aeabi_uidivmod>
    4528:	1c38      	adds	r0, r7, #0
    452a:	9104      	str	r1, [sp, #16]
    452c:	1c31      	adds	r1, r6, #0
    452e:	f7fe fb35 	bl	2b9c <__aeabi_uidiv>
    4532:	2200      	movs	r2, #0
    4534:	1c07      	adds	r7, r0, #0
    4536:	1c13      	adds	r3, r2, #0
    4538:	9902      	ldr	r1, [sp, #8]
    453a:	1909      	adds	r1, r1, r4
    453c:	7849      	ldrb	r1, [r1, #1]
    453e:	0748      	lsls	r0, r1, #29
    4540:	d501      	bpl.n	4546 <_strtol_r+0x8e>
    4542:	3c30      	subs	r4, #48	; 0x30
    4544:	e007      	b.n	4556 <_strtol_r+0x9e>
    4546:	2003      	movs	r0, #3
    4548:	4008      	ands	r0, r1
    454a:	d017      	beq.n	457c <_strtol_r+0xc4>
    454c:	2137      	movs	r1, #55	; 0x37
    454e:	2801      	cmp	r0, #1
    4550:	d000      	beq.n	4554 <_strtol_r+0x9c>
    4552:	3120      	adds	r1, #32
    4554:	1a64      	subs	r4, r4, r1
    4556:	42b4      	cmp	r4, r6
    4558:	da10      	bge.n	457c <_strtol_r+0xc4>
    455a:	1c51      	adds	r1, r2, #1
    455c:	d00b      	beq.n	4576 <_strtol_r+0xbe>
    455e:	42bb      	cmp	r3, r7
    4560:	d807      	bhi.n	4572 <_strtol_r+0xba>
    4562:	d102      	bne.n	456a <_strtol_r+0xb2>
    4564:	9a04      	ldr	r2, [sp, #16]
    4566:	4294      	cmp	r4, r2
    4568:	dc03      	bgt.n	4572 <_strtol_r+0xba>
    456a:	4373      	muls	r3, r6
    456c:	2201      	movs	r2, #1
    456e:	18e3      	adds	r3, r4, r3
    4570:	e001      	b.n	4576 <_strtol_r+0xbe>
    4572:	2201      	movs	r2, #1
    4574:	4252      	negs	r2, r2
    4576:	782c      	ldrb	r4, [r5, #0]
    4578:	3501      	adds	r5, #1
    457a:	e7dd      	b.n	4538 <_strtol_r+0x80>
    457c:	1c18      	adds	r0, r3, #0
    457e:	1c51      	adds	r1, r2, #1
    4580:	d10b      	bne.n	459a <_strtol_r+0xe2>
    4582:	9800      	ldr	r0, [sp, #0]
    4584:	9a05      	ldr	r2, [sp, #20]
    4586:	1e43      	subs	r3, r0, #1
    4588:	4198      	sbcs	r0, r3
    458a:	4b12      	ldr	r3, [pc, #72]	; (45d4 <_strtol_r+0x11c>)
    458c:	18c0      	adds	r0, r0, r3
    458e:	2322      	movs	r3, #34	; 0x22
    4590:	6013      	str	r3, [r2, #0]
    4592:	9b01      	ldr	r3, [sp, #4]
    4594:	2b00      	cmp	r3, #0
    4596:	d10a      	bne.n	45ae <_strtol_r+0xf6>
    4598:	e017      	b.n	45ca <_strtol_r+0x112>
    459a:	9900      	ldr	r1, [sp, #0]
    459c:	2900      	cmp	r1, #0
    459e:	d000      	beq.n	45a2 <_strtol_r+0xea>
    45a0:	4258      	negs	r0, r3
    45a2:	9b01      	ldr	r3, [sp, #4]
    45a4:	2b00      	cmp	r3, #0
    45a6:	d010      	beq.n	45ca <_strtol_r+0x112>
    45a8:	9b03      	ldr	r3, [sp, #12]
    45aa:	2a00      	cmp	r2, #0
    45ac:	d000      	beq.n	45b0 <_strtol_r+0xf8>
    45ae:	1e6b      	subs	r3, r5, #1
    45b0:	9a01      	ldr	r2, [sp, #4]
    45b2:	6013      	str	r3, [r2, #0]
    45b4:	e009      	b.n	45ca <_strtol_r+0x112>
    45b6:	2430      	movs	r4, #48	; 0x30
    45b8:	2e00      	cmp	r6, #0
    45ba:	d1ac      	bne.n	4516 <_strtol_r+0x5e>
    45bc:	2608      	movs	r6, #8
    45be:	e7aa      	b.n	4516 <_strtol_r+0x5e>
    45c0:	260a      	movs	r6, #10
    45c2:	e7a8      	b.n	4516 <_strtol_r+0x5e>
    45c4:	2c30      	cmp	r4, #48	; 0x30
    45c6:	d1a6      	bne.n	4516 <_strtol_r+0x5e>
    45c8:	e79d      	b.n	4506 <_strtol_r+0x4e>
    45ca:	b007      	add	sp, #28
    45cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	2000007c 	.word	0x2000007c
    45d4:	7fffffff 	.word	0x7fffffff

000045d8 <_strtoul_r>:
    45d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45da:	1c1e      	adds	r6, r3, #0
    45dc:	4b3e      	ldr	r3, [pc, #248]	; (46d8 <_strtoul_r+0x100>)
    45de:	b087      	sub	sp, #28
    45e0:	681b      	ldr	r3, [r3, #0]
    45e2:	1c17      	adds	r7, r2, #0
    45e4:	9302      	str	r3, [sp, #8]
    45e6:	1c0b      	adds	r3, r1, #0
    45e8:	9005      	str	r0, [sp, #20]
    45ea:	9104      	str	r1, [sp, #16]
    45ec:	781c      	ldrb	r4, [r3, #0]
    45ee:	9a02      	ldr	r2, [sp, #8]
    45f0:	1c5d      	adds	r5, r3, #1
    45f2:	1912      	adds	r2, r2, r4
    45f4:	7851      	ldrb	r1, [r2, #1]
    45f6:	2208      	movs	r2, #8
    45f8:	400a      	ands	r2, r1
    45fa:	d001      	beq.n	4600 <_strtoul_r+0x28>
    45fc:	1c2b      	adds	r3, r5, #0
    45fe:	e7f5      	b.n	45ec <_strtoul_r+0x14>
    4600:	2c2d      	cmp	r4, #45	; 0x2d
    4602:	d104      	bne.n	460e <_strtoul_r+0x36>
    4604:	1c9d      	adds	r5, r3, #2
    4606:	785c      	ldrb	r4, [r3, #1]
    4608:	2301      	movs	r3, #1
    460a:	9301      	str	r3, [sp, #4]
    460c:	e004      	b.n	4618 <_strtoul_r+0x40>
    460e:	9201      	str	r2, [sp, #4]
    4610:	2c2b      	cmp	r4, #43	; 0x2b
    4612:	d101      	bne.n	4618 <_strtoul_r+0x40>
    4614:	785c      	ldrb	r4, [r3, #1]
    4616:	1c9d      	adds	r5, r3, #2
    4618:	2e00      	cmp	r6, #0
    461a:	d002      	beq.n	4622 <_strtoul_r+0x4a>
    461c:	2e10      	cmp	r6, #16
    461e:	d10a      	bne.n	4636 <_strtoul_r+0x5e>
    4620:	e054      	b.n	46cc <_strtoul_r+0xf4>
    4622:	2c30      	cmp	r4, #48	; 0x30
    4624:	d150      	bne.n	46c8 <_strtoul_r+0xf0>
    4626:	2220      	movs	r2, #32
    4628:	782b      	ldrb	r3, [r5, #0]
    462a:	4393      	bics	r3, r2
    462c:	2b58      	cmp	r3, #88	; 0x58
    462e:	d146      	bne.n	46be <_strtoul_r+0xe6>
    4630:	2610      	movs	r6, #16
    4632:	786c      	ldrb	r4, [r5, #1]
    4634:	3502      	adds	r5, #2
    4636:	2001      	movs	r0, #1
    4638:	1c31      	adds	r1, r6, #0
    463a:	4240      	negs	r0, r0
    463c:	f7fe faae 	bl	2b9c <__aeabi_uidiv>
    4640:	9003      	str	r0, [sp, #12]
    4642:	2001      	movs	r0, #1
    4644:	1c31      	adds	r1, r6, #0
    4646:	4240      	negs	r0, r0
    4648:	f7fe fb2e 	bl	2ca8 <__aeabi_uidivmod>
    464c:	2200      	movs	r2, #0
    464e:	468c      	mov	ip, r1
    4650:	1c13      	adds	r3, r2, #0
    4652:	9902      	ldr	r1, [sp, #8]
    4654:	1909      	adds	r1, r1, r4
    4656:	7849      	ldrb	r1, [r1, #1]
    4658:	0748      	lsls	r0, r1, #29
    465a:	d501      	bpl.n	4660 <_strtoul_r+0x88>
    465c:	3c30      	subs	r4, #48	; 0x30
    465e:	e007      	b.n	4670 <_strtoul_r+0x98>
    4660:	2003      	movs	r0, #3
    4662:	4008      	ands	r0, r1
    4664:	d017      	beq.n	4696 <_strtoul_r+0xbe>
    4666:	2137      	movs	r1, #55	; 0x37
    4668:	2801      	cmp	r0, #1
    466a:	d000      	beq.n	466e <_strtoul_r+0x96>
    466c:	3120      	adds	r1, #32
    466e:	1a64      	subs	r4, r4, r1
    4670:	42b4      	cmp	r4, r6
    4672:	da10      	bge.n	4696 <_strtoul_r+0xbe>
    4674:	1c51      	adds	r1, r2, #1
    4676:	d00b      	beq.n	4690 <_strtoul_r+0xb8>
    4678:	9a03      	ldr	r2, [sp, #12]
    467a:	4293      	cmp	r3, r2
    467c:	d806      	bhi.n	468c <_strtoul_r+0xb4>
    467e:	d101      	bne.n	4684 <_strtoul_r+0xac>
    4680:	4564      	cmp	r4, ip
    4682:	dc03      	bgt.n	468c <_strtoul_r+0xb4>
    4684:	4373      	muls	r3, r6
    4686:	2201      	movs	r2, #1
    4688:	18e3      	adds	r3, r4, r3
    468a:	e001      	b.n	4690 <_strtoul_r+0xb8>
    468c:	2201      	movs	r2, #1
    468e:	4252      	negs	r2, r2
    4690:	782c      	ldrb	r4, [r5, #0]
    4692:	3501      	adds	r5, #1
    4694:	e7dd      	b.n	4652 <_strtoul_r+0x7a>
    4696:	1c18      	adds	r0, r3, #0
    4698:	1c51      	adds	r1, r2, #1
    469a:	d104      	bne.n	46a6 <_strtoul_r+0xce>
    469c:	2322      	movs	r3, #34	; 0x22
    469e:	9905      	ldr	r1, [sp, #20]
    46a0:	1c10      	adds	r0, r2, #0
    46a2:	600b      	str	r3, [r1, #0]
    46a4:	e003      	b.n	46ae <_strtoul_r+0xd6>
    46a6:	9901      	ldr	r1, [sp, #4]
    46a8:	2900      	cmp	r1, #0
    46aa:	d000      	beq.n	46ae <_strtoul_r+0xd6>
    46ac:	4258      	negs	r0, r3
    46ae:	2f00      	cmp	r7, #0
    46b0:	d00f      	beq.n	46d2 <_strtoul_r+0xfa>
    46b2:	9b04      	ldr	r3, [sp, #16]
    46b4:	2a00      	cmp	r2, #0
    46b6:	d000      	beq.n	46ba <_strtoul_r+0xe2>
    46b8:	1e6b      	subs	r3, r5, #1
    46ba:	603b      	str	r3, [r7, #0]
    46bc:	e009      	b.n	46d2 <_strtoul_r+0xfa>
    46be:	2430      	movs	r4, #48	; 0x30
    46c0:	2e00      	cmp	r6, #0
    46c2:	d1b8      	bne.n	4636 <_strtoul_r+0x5e>
    46c4:	2608      	movs	r6, #8
    46c6:	e7b6      	b.n	4636 <_strtoul_r+0x5e>
    46c8:	260a      	movs	r6, #10
    46ca:	e7b4      	b.n	4636 <_strtoul_r+0x5e>
    46cc:	2c30      	cmp	r4, #48	; 0x30
    46ce:	d1b2      	bne.n	4636 <_strtoul_r+0x5e>
    46d0:	e7a9      	b.n	4626 <_strtoul_r+0x4e>
    46d2:	b007      	add	sp, #28
    46d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46d6:	46c0      	nop			; (mov r8, r8)
    46d8:	2000007c 	.word	0x2000007c

000046dc <__submore>:
    46dc:	1c0b      	adds	r3, r1, #0
    46de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    46e0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    46e2:	3344      	adds	r3, #68	; 0x44
    46e4:	1c0c      	adds	r4, r1, #0
    46e6:	429d      	cmp	r5, r3
    46e8:	d11b      	bne.n	4722 <__submore+0x46>
    46ea:	2680      	movs	r6, #128	; 0x80
    46ec:	00f6      	lsls	r6, r6, #3
    46ee:	1c31      	adds	r1, r6, #0
    46f0:	f7fe ffa6 	bl	3640 <_malloc_r>
    46f4:	2800      	cmp	r0, #0
    46f6:	d102      	bne.n	46fe <__submore+0x22>
    46f8:	2001      	movs	r0, #1
    46fa:	4240      	negs	r0, r0
    46fc:	e025      	b.n	474a <__submore+0x6e>
    46fe:	1c23      	adds	r3, r4, #0
    4700:	6360      	str	r0, [r4, #52]	; 0x34
    4702:	63a6      	str	r6, [r4, #56]	; 0x38
    4704:	3346      	adds	r3, #70	; 0x46
    4706:	781a      	ldrb	r2, [r3, #0]
    4708:	4b10      	ldr	r3, [pc, #64]	; (474c <__submore+0x70>)
    470a:	54c2      	strb	r2, [r0, r3]
    470c:	1c23      	adds	r3, r4, #0
    470e:	3345      	adds	r3, #69	; 0x45
    4710:	781a      	ldrb	r2, [r3, #0]
    4712:	4b0f      	ldr	r3, [pc, #60]	; (4750 <__submore+0x74>)
    4714:	54c2      	strb	r2, [r0, r3]
    4716:	782a      	ldrb	r2, [r5, #0]
    4718:	4b0e      	ldr	r3, [pc, #56]	; (4754 <__submore+0x78>)
    471a:	54c2      	strb	r2, [r0, r3]
    471c:	18c0      	adds	r0, r0, r3
    471e:	6020      	str	r0, [r4, #0]
    4720:	e012      	b.n	4748 <__submore+0x6c>
    4722:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    4724:	1c29      	adds	r1, r5, #0
    4726:	0073      	lsls	r3, r6, #1
    4728:	1c1a      	adds	r2, r3, #0
    472a:	9301      	str	r3, [sp, #4]
    472c:	f000 f8ef 	bl	490e <_realloc_r>
    4730:	1e05      	subs	r5, r0, #0
    4732:	d0e1      	beq.n	46f8 <__submore+0x1c>
    4734:	1987      	adds	r7, r0, r6
    4736:	1c38      	adds	r0, r7, #0
    4738:	1c29      	adds	r1, r5, #0
    473a:	1c32      	adds	r2, r6, #0
    473c:	f7fe fb10 	bl	2d60 <memcpy>
    4740:	9b01      	ldr	r3, [sp, #4]
    4742:	6027      	str	r7, [r4, #0]
    4744:	6365      	str	r5, [r4, #52]	; 0x34
    4746:	63a3      	str	r3, [r4, #56]	; 0x38
    4748:	2000      	movs	r0, #0
    474a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    474c:	000003ff 	.word	0x000003ff
    4750:	000003fe 	.word	0x000003fe
    4754:	000003fd 	.word	0x000003fd

00004758 <_ungetc_r>:
    4758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    475a:	1c06      	adds	r6, r0, #0
    475c:	1c0d      	adds	r5, r1, #0
    475e:	1c14      	adds	r4, r2, #0
    4760:	1c4b      	adds	r3, r1, #1
    4762:	d102      	bne.n	476a <_ungetc_r+0x12>
    4764:	2001      	movs	r0, #1
    4766:	4240      	negs	r0, r0
    4768:	e061      	b.n	482e <_ungetc_r+0xd6>
    476a:	2800      	cmp	r0, #0
    476c:	d004      	beq.n	4778 <_ungetc_r+0x20>
    476e:	6983      	ldr	r3, [r0, #24]
    4770:	2b00      	cmp	r3, #0
    4772:	d101      	bne.n	4778 <_ungetc_r+0x20>
    4774:	f7fe fe0e 	bl	3394 <__sinit>
    4778:	4b2d      	ldr	r3, [pc, #180]	; (4830 <_ungetc_r+0xd8>)
    477a:	429c      	cmp	r4, r3
    477c:	d101      	bne.n	4782 <_ungetc_r+0x2a>
    477e:	6874      	ldr	r4, [r6, #4]
    4780:	e008      	b.n	4794 <_ungetc_r+0x3c>
    4782:	4b2c      	ldr	r3, [pc, #176]	; (4834 <_ungetc_r+0xdc>)
    4784:	429c      	cmp	r4, r3
    4786:	d101      	bne.n	478c <_ungetc_r+0x34>
    4788:	68b4      	ldr	r4, [r6, #8]
    478a:	e003      	b.n	4794 <_ungetc_r+0x3c>
    478c:	4b2a      	ldr	r3, [pc, #168]	; (4838 <_ungetc_r+0xe0>)
    478e:	429c      	cmp	r4, r3
    4790:	d100      	bne.n	4794 <_ungetc_r+0x3c>
    4792:	68f4      	ldr	r4, [r6, #12]
    4794:	2220      	movs	r2, #32
    4796:	89a3      	ldrh	r3, [r4, #12]
    4798:	4393      	bics	r3, r2
    479a:	81a3      	strh	r3, [r4, #12]
    479c:	b29b      	uxth	r3, r3
    479e:	075a      	lsls	r2, r3, #29
    47a0:	d413      	bmi.n	47ca <_ungetc_r+0x72>
    47a2:	06da      	lsls	r2, r3, #27
    47a4:	d5de      	bpl.n	4764 <_ungetc_r+0xc>
    47a6:	2708      	movs	r7, #8
    47a8:	423b      	tst	r3, r7
    47aa:	d00a      	beq.n	47c2 <_ungetc_r+0x6a>
    47ac:	1c30      	adds	r0, r6, #0
    47ae:	1c21      	adds	r1, r4, #0
    47b0:	f7fe fd6e 	bl	3290 <_fflush_r>
    47b4:	2800      	cmp	r0, #0
    47b6:	d1d5      	bne.n	4764 <_ungetc_r+0xc>
    47b8:	89a3      	ldrh	r3, [r4, #12]
    47ba:	60a0      	str	r0, [r4, #8]
    47bc:	43bb      	bics	r3, r7
    47be:	81a3      	strh	r3, [r4, #12]
    47c0:	61a0      	str	r0, [r4, #24]
    47c2:	2204      	movs	r2, #4
    47c4:	89a3      	ldrh	r3, [r4, #12]
    47c6:	4313      	orrs	r3, r2
    47c8:	81a3      	strh	r3, [r4, #12]
    47ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
    47cc:	b2ed      	uxtb	r5, r5
    47ce:	6863      	ldr	r3, [r4, #4]
    47d0:	2a00      	cmp	r2, #0
    47d2:	d010      	beq.n	47f6 <_ungetc_r+0x9e>
    47d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    47d6:	4293      	cmp	r3, r2
    47d8:	da06      	bge.n	47e8 <_ungetc_r+0x90>
    47da:	6823      	ldr	r3, [r4, #0]
    47dc:	3b01      	subs	r3, #1
    47de:	6023      	str	r3, [r4, #0]
    47e0:	701d      	strb	r5, [r3, #0]
    47e2:	6863      	ldr	r3, [r4, #4]
    47e4:	3301      	adds	r3, #1
    47e6:	e020      	b.n	482a <_ungetc_r+0xd2>
    47e8:	1c30      	adds	r0, r6, #0
    47ea:	1c21      	adds	r1, r4, #0
    47ec:	f7ff ff76 	bl	46dc <__submore>
    47f0:	2800      	cmp	r0, #0
    47f2:	d0f2      	beq.n	47da <_ungetc_r+0x82>
    47f4:	e7b6      	b.n	4764 <_ungetc_r+0xc>
    47f6:	6921      	ldr	r1, [r4, #16]
    47f8:	6822      	ldr	r2, [r4, #0]
    47fa:	2900      	cmp	r1, #0
    47fc:	d009      	beq.n	4812 <_ungetc_r+0xba>
    47fe:	428a      	cmp	r2, r1
    4800:	d907      	bls.n	4812 <_ungetc_r+0xba>
    4802:	1e51      	subs	r1, r2, #1
    4804:	7808      	ldrb	r0, [r1, #0]
    4806:	42a8      	cmp	r0, r5
    4808:	d103      	bne.n	4812 <_ungetc_r+0xba>
    480a:	3301      	adds	r3, #1
    480c:	6021      	str	r1, [r4, #0]
    480e:	6063      	str	r3, [r4, #4]
    4810:	e00d      	b.n	482e <_ungetc_r+0xd6>
    4812:	6423      	str	r3, [r4, #64]	; 0x40
    4814:	1c23      	adds	r3, r4, #0
    4816:	3344      	adds	r3, #68	; 0x44
    4818:	6363      	str	r3, [r4, #52]	; 0x34
    481a:	2303      	movs	r3, #3
    481c:	63a3      	str	r3, [r4, #56]	; 0x38
    481e:	1c23      	adds	r3, r4, #0
    4820:	3346      	adds	r3, #70	; 0x46
    4822:	63e2      	str	r2, [r4, #60]	; 0x3c
    4824:	701d      	strb	r5, [r3, #0]
    4826:	6023      	str	r3, [r4, #0]
    4828:	2301      	movs	r3, #1
    482a:	1c28      	adds	r0, r5, #0
    482c:	6063      	str	r3, [r4, #4]
    482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4830:	0000514c 	.word	0x0000514c
    4834:	0000516c 	.word	0x0000516c
    4838:	0000518c 	.word	0x0000518c

0000483c <_write_r>:
    483c:	b538      	push	{r3, r4, r5, lr}
    483e:	1c05      	adds	r5, r0, #0
    4840:	2000      	movs	r0, #0
    4842:	4c07      	ldr	r4, [pc, #28]	; (4860 <_write_r+0x24>)
    4844:	6020      	str	r0, [r4, #0]
    4846:	1c08      	adds	r0, r1, #0
    4848:	1c11      	adds	r1, r2, #0
    484a:	1c1a      	adds	r2, r3, #0
    484c:	f7fe f95e 	bl	2b0c <_write>
    4850:	1c43      	adds	r3, r0, #1
    4852:	d103      	bne.n	485c <_write_r+0x20>
    4854:	6823      	ldr	r3, [r4, #0]
    4856:	2b00      	cmp	r3, #0
    4858:	d000      	beq.n	485c <_write_r+0x20>
    485a:	602b      	str	r3, [r5, #0]
    485c:	bd38      	pop	{r3, r4, r5, pc}
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	20000b60 	.word	0x20000b60

00004864 <_close_r>:
    4864:	b538      	push	{r3, r4, r5, lr}
    4866:	2300      	movs	r3, #0
    4868:	4c06      	ldr	r4, [pc, #24]	; (4884 <_close_r+0x20>)
    486a:	1c05      	adds	r5, r0, #0
    486c:	1c08      	adds	r0, r1, #0
    486e:	6023      	str	r3, [r4, #0]
    4870:	f7fe f986 	bl	2b80 <_close>
    4874:	1c43      	adds	r3, r0, #1
    4876:	d103      	bne.n	4880 <_close_r+0x1c>
    4878:	6823      	ldr	r3, [r4, #0]
    487a:	2b00      	cmp	r3, #0
    487c:	d000      	beq.n	4880 <_close_r+0x1c>
    487e:	602b      	str	r3, [r5, #0]
    4880:	bd38      	pop	{r3, r4, r5, pc}
    4882:	46c0      	nop			; (mov r8, r8)
    4884:	20000b60 	.word	0x20000b60

00004888 <_fstat_r>:
    4888:	b538      	push	{r3, r4, r5, lr}
    488a:	2300      	movs	r3, #0
    488c:	4c06      	ldr	r4, [pc, #24]	; (48a8 <_fstat_r+0x20>)
    488e:	1c05      	adds	r5, r0, #0
    4890:	1c08      	adds	r0, r1, #0
    4892:	1c11      	adds	r1, r2, #0
    4894:	6023      	str	r3, [r4, #0]
    4896:	f7fe f977 	bl	2b88 <_fstat>
    489a:	1c43      	adds	r3, r0, #1
    489c:	d103      	bne.n	48a6 <_fstat_r+0x1e>
    489e:	6823      	ldr	r3, [r4, #0]
    48a0:	2b00      	cmp	r3, #0
    48a2:	d000      	beq.n	48a6 <_fstat_r+0x1e>
    48a4:	602b      	str	r3, [r5, #0]
    48a6:	bd38      	pop	{r3, r4, r5, pc}
    48a8:	20000b60 	.word	0x20000b60

000048ac <_isatty_r>:
    48ac:	b538      	push	{r3, r4, r5, lr}
    48ae:	2300      	movs	r3, #0
    48b0:	4c06      	ldr	r4, [pc, #24]	; (48cc <_isatty_r+0x20>)
    48b2:	1c05      	adds	r5, r0, #0
    48b4:	1c08      	adds	r0, r1, #0
    48b6:	6023      	str	r3, [r4, #0]
    48b8:	f7fe f96c 	bl	2b94 <_isatty>
    48bc:	1c43      	adds	r3, r0, #1
    48be:	d103      	bne.n	48c8 <_isatty_r+0x1c>
    48c0:	6823      	ldr	r3, [r4, #0]
    48c2:	2b00      	cmp	r3, #0
    48c4:	d000      	beq.n	48c8 <_isatty_r+0x1c>
    48c6:	602b      	str	r3, [r5, #0]
    48c8:	bd38      	pop	{r3, r4, r5, pc}
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	20000b60 	.word	0x20000b60

000048d0 <_lseek_r>:
    48d0:	b538      	push	{r3, r4, r5, lr}
    48d2:	1c05      	adds	r5, r0, #0
    48d4:	2000      	movs	r0, #0
    48d6:	4c07      	ldr	r4, [pc, #28]	; (48f4 <_lseek_r+0x24>)
    48d8:	6020      	str	r0, [r4, #0]
    48da:	1c08      	adds	r0, r1, #0
    48dc:	1c11      	adds	r1, r2, #0
    48de:	1c1a      	adds	r2, r3, #0
    48e0:	f7fe f95a 	bl	2b98 <_lseek>
    48e4:	1c43      	adds	r3, r0, #1
    48e6:	d103      	bne.n	48f0 <_lseek_r+0x20>
    48e8:	6823      	ldr	r3, [r4, #0]
    48ea:	2b00      	cmp	r3, #0
    48ec:	d000      	beq.n	48f0 <_lseek_r+0x20>
    48ee:	602b      	str	r3, [r5, #0]
    48f0:	bd38      	pop	{r3, r4, r5, pc}
    48f2:	46c0      	nop			; (mov r8, r8)
    48f4:	20000b60 	.word	0x20000b60

000048f8 <memchr>:
    48f8:	b2c9      	uxtb	r1, r1
    48fa:	1882      	adds	r2, r0, r2
    48fc:	4290      	cmp	r0, r2
    48fe:	d004      	beq.n	490a <memchr+0x12>
    4900:	7803      	ldrb	r3, [r0, #0]
    4902:	428b      	cmp	r3, r1
    4904:	d002      	beq.n	490c <memchr+0x14>
    4906:	3001      	adds	r0, #1
    4908:	e7f8      	b.n	48fc <memchr+0x4>
    490a:	2000      	movs	r0, #0
    490c:	4770      	bx	lr

0000490e <_realloc_r>:
    490e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4910:	1c06      	adds	r6, r0, #0
    4912:	1c0c      	adds	r4, r1, #0
    4914:	1c15      	adds	r5, r2, #0
    4916:	2900      	cmp	r1, #0
    4918:	d104      	bne.n	4924 <_realloc_r+0x16>
    491a:	1c11      	adds	r1, r2, #0
    491c:	f7fe fe90 	bl	3640 <_malloc_r>
    4920:	1c04      	adds	r4, r0, #0
    4922:	e018      	b.n	4956 <_realloc_r+0x48>
    4924:	2a00      	cmp	r2, #0
    4926:	d103      	bne.n	4930 <_realloc_r+0x22>
    4928:	f7fe fe44 	bl	35b4 <_free_r>
    492c:	1c2c      	adds	r4, r5, #0
    492e:	e012      	b.n	4956 <_realloc_r+0x48>
    4930:	f000 f828 	bl	4984 <_malloc_usable_size_r>
    4934:	42a8      	cmp	r0, r5
    4936:	d20e      	bcs.n	4956 <_realloc_r+0x48>
    4938:	1c30      	adds	r0, r6, #0
    493a:	1c29      	adds	r1, r5, #0
    493c:	f7fe fe80 	bl	3640 <_malloc_r>
    4940:	1e07      	subs	r7, r0, #0
    4942:	d007      	beq.n	4954 <_realloc_r+0x46>
    4944:	1c21      	adds	r1, r4, #0
    4946:	1c2a      	adds	r2, r5, #0
    4948:	f7fe fa0a 	bl	2d60 <memcpy>
    494c:	1c30      	adds	r0, r6, #0
    494e:	1c21      	adds	r1, r4, #0
    4950:	f7fe fe30 	bl	35b4 <_free_r>
    4954:	1c3c      	adds	r4, r7, #0
    4956:	1c20      	adds	r0, r4, #0
    4958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000495c <_read_r>:
    495c:	b538      	push	{r3, r4, r5, lr}
    495e:	1c05      	adds	r5, r0, #0
    4960:	2000      	movs	r0, #0
    4962:	4c07      	ldr	r4, [pc, #28]	; (4980 <_read_r+0x24>)
    4964:	6020      	str	r0, [r4, #0]
    4966:	1c08      	adds	r0, r1, #0
    4968:	1c11      	adds	r1, r2, #0
    496a:	1c1a      	adds	r2, r3, #0
    496c:	f7fe f8ac 	bl	2ac8 <_read>
    4970:	1c43      	adds	r3, r0, #1
    4972:	d103      	bne.n	497c <_read_r+0x20>
    4974:	6823      	ldr	r3, [r4, #0]
    4976:	2b00      	cmp	r3, #0
    4978:	d000      	beq.n	497c <_read_r+0x20>
    497a:	602b      	str	r3, [r5, #0]
    497c:	bd38      	pop	{r3, r4, r5, pc}
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	20000b60 	.word	0x20000b60

00004984 <_malloc_usable_size_r>:
    4984:	1f0b      	subs	r3, r1, #4
    4986:	681a      	ldr	r2, [r3, #0]
    4988:	1f10      	subs	r0, r2, #4
    498a:	2a00      	cmp	r2, #0
    498c:	da04      	bge.n	4998 <_malloc_usable_size_r+0x14>
    498e:	1889      	adds	r1, r1, r2
    4990:	3904      	subs	r1, #4
    4992:	680b      	ldr	r3, [r1, #0]
    4994:	18d0      	adds	r0, r2, r3
    4996:	3804      	subs	r0, #4
    4998:	4770      	bx	lr
    499a:	0000      	movs	r0, r0
    499c:	23232323 	.word	0x23232323
    49a0:	23232323 	.word	0x23232323
    49a4:	23232323 	.word	0x23232323
    49a8:	23232323 	.word	0x23232323
    49ac:	23232323 	.word	0x23232323
    49b0:	6c252023 	.word	0x6c252023
    49b4:	0a0d2064 	.word	0x0a0d2064
    49b8:	00000000 	.word	0x00000000
    49bc:	2a2a2a2a 	.word	0x2a2a2a2a
    49c0:	2a2a2a2a 	.word	0x2a2a2a2a
    49c4:	2a2a2a2a 	.word	0x2a2a2a2a
    49c8:	2a2a2a2a 	.word	0x2a2a2a2a
    49cc:	202a2a2a 	.word	0x202a2a2a
    49d0:	20646c25 	.word	0x20646c25
    49d4:	00000a0d 	.word	0x00000a0d
    49d8:	00000cfa 	.word	0x00000cfa
    49dc:	00000d40 	.word	0x00000d40
    49e0:	00000d6e 	.word	0x00000d6e
    49e4:	00000d80 	.word	0x00000d80
    49e8:	00000d92 	.word	0x00000d92
    49ec:	00000dde 	.word	0x00000dde
    49f0:	00000e12 	.word	0x00000e12
    49f4:	00000e24 	.word	0x00000e24
    49f8:	00000cd8 	.word	0x00000cd8
    49fc:	00000cd8 	.word	0x00000cd8
    4a00:	00000cd8 	.word	0x00000cd8
    4a04:	00000cd8 	.word	0x00000cd8
    4a08:	00000cd8 	.word	0x00000cd8
    4a0c:	00000cd8 	.word	0x00000cd8
    4a10:	00000cd8 	.word	0x00000cd8
    4a14:	00000cd8 	.word	0x00000cd8
    4a18:	00000cd8 	.word	0x00000cd8
    4a1c:	00000cd8 	.word	0x00000cd8
    4a20:	00000cd8 	.word	0x00000cd8
    4a24:	00000cd8 	.word	0x00000cd8
    4a28:	00000cd8 	.word	0x00000cd8
    4a2c:	00000cd8 	.word	0x00000cd8
    4a30:	00000cd8 	.word	0x00000cd8
    4a34:	00000cd8 	.word	0x00000cd8
    4a38:	00000cd8 	.word	0x00000cd8
    4a3c:	00000cd8 	.word	0x00000cd8
    4a40:	00000cd8 	.word	0x00000cd8
    4a44:	00000cd8 	.word	0x00000cd8
    4a48:	00000cd8 	.word	0x00000cd8
    4a4c:	00000cd8 	.word	0x00000cd8
    4a50:	00000cd8 	.word	0x00000cd8
    4a54:	00000cd8 	.word	0x00000cd8
    4a58:	00000cd8 	.word	0x00000cd8
    4a5c:	00000cd8 	.word	0x00000cd8
    4a60:	00000cd8 	.word	0x00000cd8
    4a64:	00000cd8 	.word	0x00000cd8
    4a68:	00000cd8 	.word	0x00000cd8
    4a6c:	00000cd8 	.word	0x00000cd8
    4a70:	00000cd8 	.word	0x00000cd8
    4a74:	00000cd8 	.word	0x00000cd8
    4a78:	00000cd8 	.word	0x00000cd8
    4a7c:	00000cd8 	.word	0x00000cd8
    4a80:	00000cd8 	.word	0x00000cd8
    4a84:	00000cd8 	.word	0x00000cd8
    4a88:	00000cd8 	.word	0x00000cd8
    4a8c:	00000cd8 	.word	0x00000cd8
    4a90:	00000cd8 	.word	0x00000cd8
    4a94:	00000cd8 	.word	0x00000cd8
    4a98:	00000cd8 	.word	0x00000cd8
    4a9c:	00000cd8 	.word	0x00000cd8
    4aa0:	00000cd8 	.word	0x00000cd8
    4aa4:	00000cd8 	.word	0x00000cd8
    4aa8:	00000cd8 	.word	0x00000cd8
    4aac:	00000cd8 	.word	0x00000cd8
    4ab0:	00000cd8 	.word	0x00000cd8
    4ab4:	00000cd8 	.word	0x00000cd8
    4ab8:	00000cf2 	.word	0x00000cf2
    4abc:	706d6574 	.word	0x706d6574
    4ac0:	74617265 	.word	0x74617265
    4ac4:	20657275 	.word	0x20657275
    4ac8:	0000003a 	.word	0x0000003a
    4acc:	45200d0a 	.word	0x45200d0a
    4ad0:	6e657478 	.word	0x6e657478
    4ad4:	20646564 	.word	0x20646564
    4ad8:	7373656d 	.word	0x7373656d
    4adc:	20656761 	.word	0x20656761
    4ae0:	65636572 	.word	0x65636572
    4ae4:	64657669 	.word	0x64657669
    4ae8:	206e6920 	.word	0x206e6920
    4aec:	62207852 	.word	0x62207852
    4af0:	65666675 	.word	0x65666675
    4af4:	54202e72 	.word	0x54202e72
    4af8:	72206568 	.word	0x72206568
    4afc:	69656365 	.word	0x69656365
    4b00:	20646576 	.word	0x20646576
    4b04:	61746164 	.word	0x61746164
    4b08:	3a736920 	.word	0x3a736920
    4b0c:	00000d20 	.word	0x00000d20
    4b10:	53200d0a 	.word	0x53200d0a
    4b14:	646e6174 	.word	0x646e6174
    4b18:	20647261 	.word	0x20647261
    4b1c:	7373656d 	.word	0x7373656d
    4b20:	20656761 	.word	0x20656761
    4b24:	65636572 	.word	0x65636572
    4b28:	64657669 	.word	0x64657669
    4b2c:	206e6920 	.word	0x206e6920
    4b30:	62207852 	.word	0x62207852
    4b34:	65666675 	.word	0x65666675
    4b38:	54202e72 	.word	0x54202e72
    4b3c:	72206568 	.word	0x72206568
    4b40:	69656365 	.word	0x69656365
    4b44:	20646576 	.word	0x20646576
    4b48:	61746164 	.word	0x61746164
    4b4c:	3a736920 	.word	0x3a736920
    4b50:	00000d20 	.word	0x00000d20
    4b54:	64252020 	.word	0x64252020
    4b58:	00000000 	.word	0x00000000
    4b5c:	000d0a0d 	.word	0x000d0a0d
    4b60:	53200d0a 	.word	0x53200d0a
    4b64:	646e6174 	.word	0x646e6174
    4b68:	20647261 	.word	0x20647261
    4b6c:	7373656d 	.word	0x7373656d
    4b70:	20656761 	.word	0x20656761
    4b74:	65636572 	.word	0x65636572
    4b78:	64657669 	.word	0x64657669
    4b7c:	206e6920 	.word	0x206e6920
    4b80:	4f464946 	.word	0x4f464946
    4b84:	202e3020 	.word	0x202e3020
    4b88:	20656854 	.word	0x20656854
    4b8c:	65636572 	.word	0x65636572
    4b90:	64657669 	.word	0x64657669
    4b94:	74616420 	.word	0x74616420
    4b98:	73692061 	.word	0x73692061
    4b9c:	000d203a 	.word	0x000d203a
    4ba0:	45200d0a 	.word	0x45200d0a
    4ba4:	6e657478 	.word	0x6e657478
    4ba8:	20646564 	.word	0x20646564
    4bac:	7373656d 	.word	0x7373656d
    4bb0:	20656761 	.word	0x20656761
    4bb4:	65636572 	.word	0x65636572
    4bb8:	64657669 	.word	0x64657669
    4bbc:	206e6920 	.word	0x206e6920
    4bc0:	4f464946 	.word	0x4f464946
    4bc4:	202e3120 	.word	0x202e3120
    4bc8:	20656854 	.word	0x20656854
    4bcc:	65636572 	.word	0x65636572
    4bd0:	64657669 	.word	0x64657669
    4bd4:	74616420 	.word	0x74616420
    4bd8:	73692061 	.word	0x73692061
    4bdc:	000d203a 	.word	0x000d203a
    4be0:	746f7250 	.word	0x746f7250
    4be4:	6c6f636f 	.word	0x6c6f636f
    4be8:	72726520 	.word	0x72726520
    4bec:	202c726f 	.word	0x202c726f
    4bf0:	61656c70 	.word	0x61656c70
    4bf4:	64206573 	.word	0x64206573
    4bf8:	6c62756f 	.word	0x6c62756f
    4bfc:	68632065 	.word	0x68632065
    4c00:	206b6365 	.word	0x206b6365
    4c04:	20656874 	.word	0x20656874
    4c08:	636f6c63 	.word	0x636f6c63
    4c0c:	6e69206b 	.word	0x6e69206b
    4c10:	6f777420 	.word	0x6f777420
    4c14:	616f6220 	.word	0x616f6220
    4c18:	2e736472 	.word	0x2e736472
    4c1c:	0d0a0d20 	.word	0x0d0a0d20
    4c20:	00000000 	.word	0x00000000
    4c24:	756e654d 	.word	0x756e654d
    4c28:	0a0d3a20 	.word	0x0a0d3a20
    4c2c:	2d2d2020 	.word	0x2d2d2020
    4c30:	6c655320 	.word	0x6c655320
    4c34:	20746365 	.word	0x20746365
    4c38:	20656874 	.word	0x20656874
    4c3c:	69746361 	.word	0x69746361
    4c40:	0d3a6e6f 	.word	0x0d3a6e6f
    4c44:	3020200a 	.word	0x3020200a
    4c48:	6553203a 	.word	0x6553203a
    4c4c:	74732074 	.word	0x74732074
    4c50:	61646e61 	.word	0x61646e61
    4c54:	66206472 	.word	0x66206472
    4c58:	65746c69 	.word	0x65746c69
    4c5c:	44492072 	.word	0x44492072
    4c60:	203a3020 	.word	0x203a3020
    4c64:	35347830 	.word	0x35347830
    4c68:	73202c41 	.word	0x73202c41
    4c6c:	65726f74 	.word	0x65726f74
    4c70:	746e6920 	.word	0x746e6920
    4c74:	7852206f 	.word	0x7852206f
    4c78:	66756220 	.word	0x66756220
    4c7c:	2e726566 	.word	0x2e726566
    4c80:	200a0d20 	.word	0x200a0d20
    4c84:	203a3120 	.word	0x203a3120
    4c88:	20746553 	.word	0x20746553
    4c8c:	6e617473 	.word	0x6e617473
    4c90:	64726164 	.word	0x64726164
    4c94:	6c696620 	.word	0x6c696620
    4c98:	20726574 	.word	0x20726574
    4c9c:	31204449 	.word	0x31204449
    4ca0:	7830203a 	.word	0x7830203a
    4ca4:	2c393634 	.word	0x2c393634
    4ca8:	6f747320 	.word	0x6f747320
    4cac:	69206572 	.word	0x69206572
    4cb0:	206f746e 	.word	0x206f746e
    4cb4:	46207852 	.word	0x46207852
    4cb8:	204f4649 	.word	0x204f4649
    4cbc:	0d202e30 	.word	0x0d202e30
    4cc0:	3220200a 	.word	0x3220200a
    4cc4:	6553203a 	.word	0x6553203a
    4cc8:	7320646e 	.word	0x7320646e
    4ccc:	646e6174 	.word	0x646e6174
    4cd0:	20647261 	.word	0x20647261
    4cd4:	7373656d 	.word	0x7373656d
    4cd8:	20656761 	.word	0x20656761
    4cdc:	68746977 	.word	0x68746977
    4ce0:	3a444920 	.word	0x3a444920
    4ce4:	34783020 	.word	0x34783020
    4ce8:	61204135 	.word	0x61204135
    4cec:	3420646e 	.word	0x3420646e
    4cf0:	74796220 	.word	0x74796220
    4cf4:	61642065 	.word	0x61642065
    4cf8:	30206174 	.word	0x30206174
    4cfc:	206f7420 	.word	0x206f7420
    4d00:	0d202e33 	.word	0x0d202e33
    4d04:	3320200a 	.word	0x3320200a
    4d08:	6553203a 	.word	0x6553203a
    4d0c:	7320646e 	.word	0x7320646e
    4d10:	646e6174 	.word	0x646e6174
    4d14:	20647261 	.word	0x20647261
    4d18:	7373656d 	.word	0x7373656d
    4d1c:	20656761 	.word	0x20656761
    4d20:	68746977 	.word	0x68746977
    4d24:	3a444920 	.word	0x3a444920
    4d28:	34783020 	.word	0x34783020
    4d2c:	61203936 	.word	0x61203936
    4d30:	3420646e 	.word	0x3420646e
    4d34:	74796220 	.word	0x74796220
    4d38:	61642065 	.word	0x61642065
    4d3c:	31206174 	.word	0x31206174
    4d40:	74203832 	.word	0x74203832
    4d44:	3331206f 	.word	0x3331206f
    4d48:	0d202e31 	.word	0x0d202e31
    4d4c:	3420200a 	.word	0x3420200a
    4d50:	6553203a 	.word	0x6553203a
    4d54:	78652074 	.word	0x78652074
    4d58:	646e6574 	.word	0x646e6574
    4d5c:	66206465 	.word	0x66206465
    4d60:	65746c69 	.word	0x65746c69
    4d64:	44492072 	.word	0x44492072
    4d68:	203a3020 	.word	0x203a3020
    4d6c:	30317830 	.word	0x30317830
    4d70:	30303030 	.word	0x30303030
    4d74:	202c3541 	.word	0x202c3541
    4d78:	726f7473 	.word	0x726f7473
    4d7c:	6e692065 	.word	0x6e692065
    4d80:	52206f74 	.word	0x52206f74
    4d84:	75622078 	.word	0x75622078
    4d88:	72656666 	.word	0x72656666
    4d8c:	0a0d202e 	.word	0x0a0d202e
    4d90:	3a352020 	.word	0x3a352020
    4d94:	74655320 	.word	0x74655320
    4d98:	74786520 	.word	0x74786520
    4d9c:	65646e65 	.word	0x65646e65
    4da0:	69662064 	.word	0x69662064
    4da4:	7265746c 	.word	0x7265746c
    4da8:	20444920 	.word	0x20444920
    4dac:	30203a31 	.word	0x30203a31
    4db0:	30303178 	.word	0x30303178
    4db4:	39303030 	.word	0x39303030
    4db8:	73202c36 	.word	0x73202c36
    4dbc:	65726f74 	.word	0x65726f74
    4dc0:	746e6920 	.word	0x746e6920
    4dc4:	7852206f 	.word	0x7852206f
    4dc8:	46494620 	.word	0x46494620
    4dcc:	2e31204f 	.word	0x2e31204f
    4dd0:	200a0d20 	.word	0x200a0d20
    4dd4:	203a3620 	.word	0x203a3620
    4dd8:	646e6553 	.word	0x646e6553
    4ddc:	74786520 	.word	0x74786520
    4de0:	65646e65 	.word	0x65646e65
    4de4:	656d2064 	.word	0x656d2064
    4de8:	67617373 	.word	0x67617373
    4dec:	69772065 	.word	0x69772065
    4df0:	49206874 	.word	0x49206874
    4df4:	30203a44 	.word	0x30203a44
    4df8:	30303178 	.word	0x30303178
    4dfc:	41303030 	.word	0x41303030
    4e00:	6e612035 	.word	0x6e612035
    4e04:	20382064 	.word	0x20382064
    4e08:	65747962 	.word	0x65747962
    4e0c:	74616420 	.word	0x74616420
    4e10:	20302061 	.word	0x20302061
    4e14:	37206f74 	.word	0x37206f74
    4e18:	0a0d202e 	.word	0x0a0d202e
    4e1c:	3a372020 	.word	0x3a372020
    4e20:	6e655320 	.word	0x6e655320
    4e24:	78652064 	.word	0x78652064
    4e28:	646e6574 	.word	0x646e6574
    4e2c:	6d206465 	.word	0x6d206465
    4e30:	61737365 	.word	0x61737365
    4e34:	77206567 	.word	0x77206567
    4e38:	20687469 	.word	0x20687469
    4e3c:	203a4449 	.word	0x203a4449
    4e40:	30317830 	.word	0x30317830
    4e44:	30303030 	.word	0x30303030
    4e48:	61203639 	.word	0x61203639
    4e4c:	3820646e 	.word	0x3820646e
    4e50:	74796220 	.word	0x74796220
    4e54:	61642065 	.word	0x61642065
    4e58:	31206174 	.word	0x31206174
    4e5c:	74203832 	.word	0x74203832
    4e60:	3331206f 	.word	0x3331206f
    4e64:	0d202e35 	.word	0x0d202e35
    4e68:	6820200a 	.word	0x6820200a
    4e6c:	6944203a 	.word	0x6944203a
    4e70:	616c7073 	.word	0x616c7073
    4e74:	656d2079 	.word	0x656d2079
    4e78:	0d20756e 	.word	0x0d20756e
    4e7c:	00000d0a 	.word	0x00000d0a
    4e80:	00006325 	.word	0x00006325
    4e84:	3a302020 	.word	0x3a302020
    4e88:	74655320 	.word	0x74655320
    4e8c:	61747320 	.word	0x61747320
    4e90:	7261646e 	.word	0x7261646e
    4e94:	69662064 	.word	0x69662064
    4e98:	7265746c 	.word	0x7265746c
    4e9c:	20444920 	.word	0x20444920
    4ea0:	30203a30 	.word	0x30203a30
    4ea4:	41353478 	.word	0x41353478
    4ea8:	7473202c 	.word	0x7473202c
    4eac:	2065726f 	.word	0x2065726f
    4eb0:	6f746e69 	.word	0x6f746e69
    4eb4:	20785220 	.word	0x20785220
    4eb8:	66667562 	.word	0x66667562
    4ebc:	202e7265 	.word	0x202e7265
    4ec0:	0000000d 	.word	0x0000000d
    4ec4:	3a312020 	.word	0x3a312020
    4ec8:	74655320 	.word	0x74655320
    4ecc:	61747320 	.word	0x61747320
    4ed0:	7261646e 	.word	0x7261646e
    4ed4:	69662064 	.word	0x69662064
    4ed8:	7265746c 	.word	0x7265746c
    4edc:	20444920 	.word	0x20444920
    4ee0:	30203a31 	.word	0x30203a31
    4ee4:	39363478 	.word	0x39363478
    4ee8:	7473202c 	.word	0x7473202c
    4eec:	2065726f 	.word	0x2065726f
    4ef0:	6f746e69 	.word	0x6f746e69
    4ef4:	20785220 	.word	0x20785220
    4ef8:	4f464946 	.word	0x4f464946
    4efc:	202e3020 	.word	0x202e3020
    4f00:	0000000d 	.word	0x0000000d
    4f04:	3a322020 	.word	0x3a322020
    4f08:	6e655320 	.word	0x6e655320
    4f0c:	74732064 	.word	0x74732064
    4f10:	61646e61 	.word	0x61646e61
    4f14:	6d206472 	.word	0x6d206472
    4f18:	61737365 	.word	0x61737365
    4f1c:	77206567 	.word	0x77206567
    4f20:	20687469 	.word	0x20687469
    4f24:	203a4449 	.word	0x203a4449
    4f28:	35347830 	.word	0x35347830
    4f2c:	6e612041 	.word	0x6e612041
    4f30:	20342064 	.word	0x20342064
    4f34:	65747962 	.word	0x65747962
    4f38:	74616420 	.word	0x74616420
    4f3c:	20302061 	.word	0x20302061
    4f40:	33206f74 	.word	0x33206f74
    4f44:	000d202e 	.word	0x000d202e
    4f48:	3a332020 	.word	0x3a332020
    4f4c:	6e655320 	.word	0x6e655320
    4f50:	74732064 	.word	0x74732064
    4f54:	61646e61 	.word	0x61646e61
    4f58:	6d206472 	.word	0x6d206472
    4f5c:	61737365 	.word	0x61737365
    4f60:	77206567 	.word	0x77206567
    4f64:	20687469 	.word	0x20687469
    4f68:	203a4449 	.word	0x203a4449
    4f6c:	36347830 	.word	0x36347830
    4f70:	6e612039 	.word	0x6e612039
    4f74:	20342064 	.word	0x20342064
    4f78:	65747962 	.word	0x65747962
    4f7c:	74616420 	.word	0x74616420
    4f80:	32312061 	.word	0x32312061
    4f84:	6f742038 	.word	0x6f742038
    4f88:	31333120 	.word	0x31333120
    4f8c:	000d202e 	.word	0x000d202e
    4f90:	3a342020 	.word	0x3a342020
    4f94:	74655320 	.word	0x74655320
    4f98:	74786520 	.word	0x74786520
    4f9c:	65646e65 	.word	0x65646e65
    4fa0:	69662064 	.word	0x69662064
    4fa4:	7265746c 	.word	0x7265746c
    4fa8:	20444920 	.word	0x20444920
    4fac:	30203a30 	.word	0x30203a30
    4fb0:	30303178 	.word	0x30303178
    4fb4:	41303030 	.word	0x41303030
    4fb8:	73202c35 	.word	0x73202c35
    4fbc:	65726f74 	.word	0x65726f74
    4fc0:	746e6920 	.word	0x746e6920
    4fc4:	7852206f 	.word	0x7852206f
    4fc8:	66756220 	.word	0x66756220
    4fcc:	2e726566 	.word	0x2e726566
    4fd0:	00000d20 	.word	0x00000d20
    4fd4:	3a352020 	.word	0x3a352020
    4fd8:	74655320 	.word	0x74655320
    4fdc:	74786520 	.word	0x74786520
    4fe0:	65646e65 	.word	0x65646e65
    4fe4:	69662064 	.word	0x69662064
    4fe8:	7265746c 	.word	0x7265746c
    4fec:	20444920 	.word	0x20444920
    4ff0:	30203a31 	.word	0x30203a31
    4ff4:	30303178 	.word	0x30303178
    4ff8:	39303030 	.word	0x39303030
    4ffc:	73202c36 	.word	0x73202c36
    5000:	65726f74 	.word	0x65726f74
    5004:	746e6920 	.word	0x746e6920
    5008:	7852206f 	.word	0x7852206f
    500c:	46494620 	.word	0x46494620
    5010:	2e31204f 	.word	0x2e31204f
    5014:	00000d20 	.word	0x00000d20
    5018:	3a362020 	.word	0x3a362020
    501c:	6e655320 	.word	0x6e655320
    5020:	78652064 	.word	0x78652064
    5024:	646e6574 	.word	0x646e6574
    5028:	6d206465 	.word	0x6d206465
    502c:	61737365 	.word	0x61737365
    5030:	77206567 	.word	0x77206567
    5034:	20687469 	.word	0x20687469
    5038:	203a4449 	.word	0x203a4449
    503c:	30317830 	.word	0x30317830
    5040:	30303030 	.word	0x30303030
    5044:	61203541 	.word	0x61203541
    5048:	3820646e 	.word	0x3820646e
    504c:	74796220 	.word	0x74796220
    5050:	61642065 	.word	0x61642065
    5054:	30206174 	.word	0x30206174
    5058:	206f7420 	.word	0x206f7420
    505c:	0d202e37 	.word	0x0d202e37
    5060:	00000000 	.word	0x00000000
    5064:	3a372020 	.word	0x3a372020
    5068:	6e655320 	.word	0x6e655320
    506c:	78652064 	.word	0x78652064
    5070:	646e6574 	.word	0x646e6574
    5074:	6d206465 	.word	0x6d206465
    5078:	61737365 	.word	0x61737365
    507c:	77206567 	.word	0x77206567
    5080:	20687469 	.word	0x20687469
    5084:	203a4449 	.word	0x203a4449
    5088:	30317830 	.word	0x30317830
    508c:	30303030 	.word	0x30303030
    5090:	61203639 	.word	0x61203639
    5094:	3820646e 	.word	0x3820646e
    5098:	74796220 	.word	0x74796220
    509c:	61642065 	.word	0x61642065
    50a0:	31206174 	.word	0x31206174
    50a4:	74203832 	.word	0x74203832
    50a8:	3331206f 	.word	0x3331206f
    50ac:	0d202e35 	.word	0x0d202e35
    50b0:	00000000 	.word	0x00000000

000050b4 <_tcc_intflag>:
    50b4:	00000001 00000002 00000004 00000008     ................
    50c4:	00001000 00002000 00004000 00008000     ..... ...@......
    50d4:	00010000 00020000 00040000 00080000     ................
    50e4:	42000400 42000800 42000c00 42001000     ...B...B...B...B
    50f4:	42001400 42001800 0c0b0a09 00000e0d     ...B...B........
    5104:	0000228a 00002286 00002286 000022b8     ."..."..."..."..
    5114:	000022b8 000022a2 00002290 000022a8     ."..."..."..."..
    5124:	0000252c 0000250c 0000250c 00002562     ,%...%...%..b%..
    5134:	0000251e 0000253a 00002510 00002548     .%..:%...%..H%..
    5144:	00000043                                C...

00005148 <_global_impure_ptr>:
    5148:	20000018                                ... 

0000514c <__sf_fake_stdin>:
	...

0000516c <__sf_fake_stdout>:
	...

0000518c <__sf_fake_stderr>:
	...
    51ac:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    51bc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    51cc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    51dc:	00006665 000051fe 00005201 00005204     ef...Q...R...R..
    51ec:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    51fc:	2d2b005d 00303000 00005878                       ].+-.00.xX.

00005207 <_ctype_>:
    5207:	20202000 20202020 28282020 20282828     .         ((((( 
    5217:	20202020 20202020 20202020 20202020                     
    5227:	10108820 10101010 10101010 10101010      ...............
    5237:	04040410 04040404 10040404 10101010     ................
    5247:	41411010 41414141 01010101 01010101     ..AAAAAA........
    5257:	01010101 01010101 01010101 10101010     ................
    5267:	42421010 42424242 02020202 02020202     ..BBBBBB........
    5277:	02020202 02020202 02020202 10101010     ................
    5287:	00000020 00000000 00000000 00000000      ...............
	...

00005308 <_init>:
    5308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    530e:	bc08      	pop	{r3}
    5310:	469e      	mov	lr, r3
    5312:	4770      	bx	lr

00005314 <__init_array_start>:
    5314:	000000e5 	.word	0x000000e5

00005318 <_fini>:
    5318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    531a:	46c0      	nop			; (mov r8, r8)
    531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    531e:	bc08      	pop	{r3}
    5320:	469e      	mov	lr, r3
    5322:	4770      	bx	lr

00005324 <__fini_array_start>:
    5324:	000000bd 	.word	0x000000bd
