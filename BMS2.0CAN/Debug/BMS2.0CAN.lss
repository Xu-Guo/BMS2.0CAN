
BMS2.0CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050ac  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000080  20000000  000050ac  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ad8  20000080  0000512c  00010080  2**2
                  ALLOC
  3 .stack        00002000  20000b58  00005c04  00010080  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c7f0  00000000  00000000  00010103  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003882  00000000  00000000  0003c8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006723  00000000  00000000  00040175  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f8  00000000  00000000  00046898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000768  00000000  00000000  00046f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020857  00000000  00000000  000476f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e9e3  00000000  00000000  00067f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a3c36  00000000  00000000  00076932  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b20  00000000  00000000  0011a568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002b58 	.word	0x20002b58
       4:	00002779 	.word	0x00002779
       8:	00002775 	.word	0x00002775
       c:	00002775 	.word	0x00002775
	...
      2c:	00002775 	.word	0x00002775
	...
      38:	00002775 	.word	0x00002775
      3c:	00002775 	.word	0x00002775
      40:	00002775 	.word	0x00002775
      44:	00002775 	.word	0x00002775
      48:	00000301 	.word	0x00000301
      4c:	00002775 	.word	0x00002775
      50:	00002775 	.word	0x00002775
      54:	00002775 	.word	0x00002775
      58:	00002775 	.word	0x00002775
      5c:	00002775 	.word	0x00002775
      60:	00000dd5 	.word	0x00000dd5
      64:	000019a9 	.word	0x000019a9
      68:	000019b9 	.word	0x000019b9
      6c:	000019c9 	.word	0x000019c9
      70:	000019d9 	.word	0x000019d9
      74:	000019e9 	.word	0x000019e9
      78:	000019f9 	.word	0x000019f9
      7c:	00000545 	.word	0x00000545
      80:	00002775 	.word	0x00002775
      84:	00000cc9 	.word	0x00000cc9
      88:	00000cd9 	.word	0x00000cd9
      8c:	00000ce9 	.word	0x00000ce9
      90:	00002775 	.word	0x00002775
      94:	00002775 	.word	0x00002775
      98:	00002775 	.word	0x00002775
      9c:	00002775 	.word	0x00002775
      a0:	00002775 	.word	0x00002775
      a4:	00002775 	.word	0x00002775
      a8:	00002775 	.word	0x00002775
      ac:	00002775 	.word	0x00002775
      b0:	00002775 	.word	0x00002775
      b4:	00002775 	.word	0x00002775
      b8:	00002775 	.word	0x00002775

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000080 	.word	0x20000080
      dc:	00000000 	.word	0x00000000
      e0:	000050ac 	.word	0x000050ac

000000e4 <frame_dummy>:
      e4:	b508      	push	{r3, lr}
      e6:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4908      	ldr	r1, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd08      	pop	{r3, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	000050ac 	.word	0x000050ac
     110:	20000084 	.word	0x20000084
     114:	000050ac 	.word	0x000050ac
     118:	00000000 	.word	0x00000000

0000011c <rtc_calendar_enable>:
	/* Enable RTC. */
	rtc_calendar_enable(module);

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
}
     11c:	6802      	ldr	r2, [r0, #0]
     11e:	2104      	movs	r1, #4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <rtc_calendar_enable+0x24>)
     122:	6019      	str	r1, [r3, #0]
     124:	6801      	ldr	r1, [r0, #0]
     126:	690b      	ldr	r3, [r1, #16]
     128:	2b00      	cmp	r3, #0
     12a:	d1fc      	bne.n	126 <rtc_calendar_enable+0xa>
	while (rtc_calendar_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;
     12c:	8811      	ldrh	r1, [r2, #0]
     12e:	3302      	adds	r3, #2
     130:	430b      	orrs	r3, r1
     132:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     134:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     136:	6913      	ldr	r3, [r2, #16]
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
     138:	2b00      	cmp	r3, #0
     13a:	d1fc      	bne.n	136 <rtc_calendar_enable+0x1a>
		/* Wait for synchronization */
	}
}
     13c:	4770      	bx	lr
     13e:	46c0      	nop			; (mov r8, r8)
     140:	e000e100 	.word	0xe000e100

00000144 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     144:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     146:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     148:	2404      	movs	r4, #4
     14a:	2380      	movs	r3, #128	; 0x80
     14c:	4907      	ldr	r1, [pc, #28]	; (16c <rtc_calendar_disable+0x28>)
     14e:	50cc      	str	r4, [r1, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     150:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     152:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     154:	2b00      	cmp	r3, #0
     156:	d1fc      	bne.n	152 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;
     158:	8813      	ldrh	r3, [r2, #0]
     15a:	2102      	movs	r1, #2
     15c:	438b      	bics	r3, r1
     15e:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     160:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     162:	6913      	ldr	r3, [r2, #16]
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
     164:	2b00      	cmp	r3, #0
     166:	d1fc      	bne.n	162 <rtc_calendar_disable+0x1e>
		/* Wait for synchronization */
	}
}
     168:	bd10      	pop	{r4, pc}
     16a:	46c0      	nop			; (mov r8, r8)
     16c:	e000e100 	.word	0xe000e100

00000170 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     170:	b538      	push	{r3, r4, r5, lr}
     172:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     174:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     176:	4b09      	ldr	r3, [pc, #36]	; (19c <rtc_calendar_reset+0x2c>)
     178:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     17a:	2300      	movs	r3, #0
     17c:	8623      	strh	r3, [r4, #48]	; 0x30
	module->enabled_callback    = 0;
     17e:	8663      	strh	r3, [r4, #50]	; 0x32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     180:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     182:	6913      	ldr	r3, [r2, #16]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     184:	2b00      	cmp	r3, #0
     186:	d1fc      	bne.n	182 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;
     188:	882a      	ldrh	r2, [r5, #0]
     18a:	3301      	adds	r3, #1
     18c:	4313      	orrs	r3, r2
     18e:	802b      	strh	r3, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     190:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     192:	6913      	ldr	r3, [r2, #16]
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;

	while (rtc_calendar_is_syncing(module)) {
     194:	2b00      	cmp	r3, #0
     196:	d1fc      	bne.n	192 <rtc_calendar_reset+0x22>
		/* Wait for synchronization */
	}
}
     198:	bd38      	pop	{r3, r4, r5, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	00000145 	.word	0x00000145

000001a0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     1a0:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     1a2:	88cb      	ldrh	r3, [r1, #6]
     1a4:	88c2      	ldrh	r2, [r0, #6]
     1a6:	1a9b      	subs	r3, r3, r2
     1a8:	069a      	lsls	r2, r3, #26

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     1aa:	790b      	ldrb	r3, [r1, #4]
     1ac:	045c      	lsls	r4, r3, #17
	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     1ae:	794b      	ldrb	r3, [r1, #5]
     1b0:	059b      	lsls	r3, r3, #22
     1b2:	4323      	orrs	r3, r4

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     1b4:	788c      	ldrb	r4, [r1, #2]
     1b6:	0324      	lsls	r4, r4, #12
     1b8:	4323      	orrs	r3, r4
     1ba:	4313      	orrs	r3, r2

	/* Check if 24h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     1bc:	7902      	ldrb	r2, [r0, #4]
     1be:	2a00      	cmp	r2, #0
     1c0:	d105      	bne.n	1ce <rtc_calendar_time_to_register_value+0x2e>
     1c2:	78ca      	ldrb	r2, [r1, #3]
     1c4:	2a00      	cmp	r2, #0
     1c6:	d002      	beq.n	1ce <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= (0x10u << RTC_MODE2_CLOCK_HOUR_Pos);
     1c8:	2280      	movs	r2, #128	; 0x80
     1ca:	0252      	lsls	r2, r2, #9
     1cc:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     1ce:	7848      	ldrb	r0, [r1, #1]
     1d0:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     1d2:	780a      	ldrb	r2, [r1, #0]
     1d4:	4310      	orrs	r0, r2
     1d6:	4318      	orrs	r0, r3

	return register_value;
}
     1d8:	bd10      	pop	{r4, pc}
     1da:	46c0      	nop			; (mov r8, r8)

000001dc <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1de:	6806      	ldr	r6, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     1e0:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     1e2:	2a01      	cmp	r2, #1
     1e4:	d815      	bhi.n	212 <rtc_calendar_set_alarm+0x36>
     1e6:	1c14      	adds	r4, r2, #0
     1e8:	1c0d      	adds	r5, r1, #0
     1ea:	1c07      	adds	r7, r0, #0
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     1ec:	4b0a      	ldr	r3, [pc, #40]	; (218 <rtc_calendar_set_alarm+0x3c>)
     1ee:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     1f0:	6933      	ldr	r3, [r6, #16]
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));

	while (rtc_calendar_is_syncing(module)) {
     1f2:	2b00      	cmp	r3, #0
     1f4:	d1fc      	bne.n	1f0 <rtc_calendar_set_alarm+0x14>
     1f6:	00e2      	lsls	r2, r4, #3
     1f8:	18b2      	adds	r2, r6, r2
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     1fa:	6210      	str	r0, [r2, #32]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1fc:	6839      	ldr	r1, [r7, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     1fe:	690b      	ldr	r3, [r1, #16]
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;

	while (rtc_calendar_is_syncing(module)) {
     200:	2b00      	cmp	r3, #0
     202:	d1fc      	bne.n	1fe <rtc_calendar_set_alarm+0x22>
			/* Wait for synchronization */
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     204:	7a29      	ldrb	r1, [r5, #8]
     206:	3324      	adds	r3, #36	; 0x24
     208:	54d1      	strb	r1, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     20a:	683a      	ldr	r2, [r7, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     20c:	6913      	ldr	r3, [r2, #16]
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	while (rtc_calendar_is_syncing(module)) {
     20e:	2b00      	cmp	r3, #0
     210:	d1fc      	bne.n	20c <rtc_calendar_set_alarm+0x30>
			/* Wait for synchronization */
	}

	return STATUS_OK;
}
     212:	1c18      	adds	r0, r3, #0
     214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     216:	46c0      	nop			; (mov r8, r8)
     218:	000001a1 	.word	0x000001a1

0000021c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
     21c:	b538      	push	{r3, r4, r5, lr}
     21e:	1c05      	adds	r5, r0, #0
     220:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     222:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     224:	4a16      	ldr	r2, [pc, #88]	; (280 <rtc_calendar_init+0x64>)
     226:	6953      	ldr	r3, [r2, #20]
     228:	2180      	movs	r1, #128	; 0x80
     22a:	0089      	lsls	r1, r1, #2
     22c:	430b      	orrs	r3, r1
     22e:	6153      	str	r3, [r2, #20]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     230:	2200      	movs	r2, #0
     232:	4b14      	ldr	r3, [pc, #80]	; (284 <rtc_calendar_init+0x68>)
     234:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
     236:	4b14      	ldr	r3, [pc, #80]	; (288 <rtc_calendar_init+0x6c>)
     238:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
     23a:	78e3      	ldrb	r3, [r4, #3]
     23c:	712b      	strb	r3, [r5, #4]
	module->year_init_value     = config->year_init_value;
     23e:	88a3      	ldrh	r3, [r4, #4]
     240:	80eb      	strh	r3, [r5, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     242:	4b12      	ldr	r3, [pc, #72]	; (28c <rtc_calendar_init+0x70>)
     244:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     246:	682a      	ldr	r2, [r5, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     248:	8823      	ldrh	r3, [r4, #0]

#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	if(config->enable_read_sync) {
     24a:	79a1      	ldrb	r1, [r4, #6]
     24c:	2900      	cmp	r1, #0
     24e:	d102      	bne.n	256 <rtc_calendar_init+0x3a>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     250:	3108      	adds	r1, #8
     252:	430b      	orrs	r3, r1
     254:	e001      	b.n	25a <rtc_calendar_init+0x3e>

#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21)
	if(config->enable_read_sync) {
		tmp_reg |= RTC_MODE2_CTRLA_CLOCKSYNC;
     256:	490e      	ldr	r1, [pc, #56]	; (290 <rtc_calendar_init+0x74>)
     258:	430b      	orrs	r3, r1
	}
#endif

	/* Check clock mode. */
	if (!(config->clock_24h)) {
     25a:	78e1      	ldrb	r1, [r4, #3]
     25c:	2900      	cmp	r1, #0
     25e:	d101      	bne.n	264 <rtc_calendar_init+0x48>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRLA_CLKREP;
     260:	3140      	adds	r1, #64	; 0x40
     262:	430b      	orrs	r3, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
     264:	78a1      	ldrb	r1, [r4, #2]
     266:	2900      	cmp	r1, #0
     268:	d001      	beq.n	26e <rtc_calendar_init+0x52>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRLA_MATCHCLR;
     26a:	2180      	movs	r1, #128	; 0x80
     26c:	430b      	orrs	r3, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRLA.reg = tmp_reg;
     26e:	8013      	strh	r3, [r2, #0]

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     270:	1c21      	adds	r1, r4, #0
     272:	3108      	adds	r1, #8
     274:	1c28      	adds	r0, r5, #0
     276:	2200      	movs	r2, #0
     278:	4b06      	ldr	r3, [pc, #24]	; (294 <rtc_calendar_init+0x78>)
     27a:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
     27c:	bd38      	pop	{r3, r4, r5, pc}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	40000800 	.word	0x40000800
     284:	40001400 	.word	0x40001400
     288:	00000171 	.word	0x00000171
     28c:	20000adc 	.word	0x20000adc
     290:	00008008 	.word	0x00008008
     294:	000001dd 	.word	0x000001dd

00000298 <rtc_calendar_register_callback>:
		|| callback_type == RTC_CALENDAR_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else if (callback_type > (RTC_NUM_OF_ALARMS + RTC_PER_NUM)) {
     298:	2a09      	cmp	r2, #9
     29a:	d901      	bls.n	2a0 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     29c:	2017      	movs	r0, #23
     29e:	e00a      	b.n	2b6 <rtc_calendar_register_callback+0x1e>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     2a0:	1c93      	adds	r3, r2, #2
     2a2:	009b      	lsls	r3, r3, #2
     2a4:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     2a6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
     2a8:	2301      	movs	r3, #1
     2aa:	4093      	lsls	r3, r2
     2ac:	1c1a      	adds	r2, r3, #0
     2ae:	430a      	orrs	r2, r1
     2b0:	b292      	uxth	r2, r2
     2b2:	8602      	strh	r2, [r0, #48]	; 0x30
     2b4:	2000      	movs	r0, #0
	}

	return status;
}
     2b6:	4770      	bx	lr

000002b8 <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     2b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     2ba:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     2bc:	2909      	cmp	r1, #9
     2be:	d102      	bne.n	2c6 <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     2c0:	4a0e      	ldr	r2, [pc, #56]	; (2fc <rtc_calendar_enable_callback+0x44>)
     2c2:	815a      	strh	r2, [r3, #10]
     2c4:	e011      	b.n	2ea <rtc_calendar_enable_callback+0x32>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_CALENDAR_CALLBACK_TAMPER) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
     2c6:	2907      	cmp	r1, #7
     2c8:	d805      	bhi.n	2d6 <rtc_calendar_enable_callback+0x1e>
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
     2ca:	2201      	movs	r2, #1
     2cc:	408a      	lsls	r2, r1
     2ce:	24ff      	movs	r4, #255	; 0xff
     2d0:	4022      	ands	r2, r4
     2d2:	815a      	strh	r2, [r3, #10]
     2d4:	e009      	b.n	2ea <rtc_calendar_enable_callback+0x32>
	}else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << (callback_type - RTC_PER_NUM));
     2d6:	2280      	movs	r2, #128	; 0x80
     2d8:	0052      	lsls	r2, r2, #1
     2da:	1c0c      	adds	r4, r1, #0
     2dc:	3c08      	subs	r4, #8
     2de:	40a2      	lsls	r2, r4
     2e0:	1c14      	adds	r4, r2, #0
     2e2:	2280      	movs	r2, #128	; 0x80
     2e4:	0052      	lsls	r2, r2, #1
     2e6:	4022      	ands	r2, r4
     2e8:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     2ea:	8e42      	ldrh	r2, [r0, #50]	; 0x32
     2ec:	2301      	movs	r3, #1
     2ee:	408b      	lsls	r3, r1
     2f0:	1c19      	adds	r1, r3, #0
     2f2:	4311      	orrs	r1, r2
     2f4:	b289      	uxth	r1, r1
     2f6:	8641      	strh	r1, [r0, #50]	; 0x32
}
     2f8:	bd10      	pop	{r4, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	ffff8000 	.word	0xffff8000

00000300 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	465f      	mov	r7, fp
     304:	4656      	mov	r6, sl
     306:	464d      	mov	r5, r9
     308:	4644      	mov	r4, r8
     30a:	b4f0      	push	{r4, r5, r6, r7}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     30c:	4b23      	ldr	r3, [pc, #140]	; (39c <RTC_Handler+0x9c>)
     30e:	681b      	ldr	r3, [r3, #0]
     310:	469a      	mov	sl, r3

	Rtc *const rtc_module = module->hw;
     312:	681e      	ldr	r6, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
     316:	4652      	mov	r2, sl
     318:	8e12      	ldrh	r2, [r2, #48]	; 0x30
     31a:	401a      	ands	r2, r3
     31c:	4690      	mov	r8, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     31e:	89b3      	ldrh	r3, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     320:	8972      	ldrh	r2, [r6, #10]
     322:	4013      	ands	r3, r2

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     324:	b21a      	sxth	r2, r3
     326:	2a00      	cmp	r2, #0
     328:	da08      	bge.n	33c <RTC_Handler+0x3c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     32a:	4643      	mov	r3, r8
     32c:	059b      	lsls	r3, r3, #22
     32e:	d502      	bpl.n	336 <RTC_Handler+0x36>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     330:	4653      	mov	r3, sl
     332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     334:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     336:	4b1a      	ldr	r3, [pc, #104]	; (3a0 <RTC_Handler+0xa0>)
     338:	81b3      	strh	r3, [r6, #12]
     33a:	e028      	b.n	38e <RTC_Handler+0x8e>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
     33c:	27ff      	movs	r7, #255	; 0xff
     33e:	401f      	ands	r7, r3
     340:	d01a      	beq.n	378 <RTC_Handler+0x78>
     342:	2400      	movs	r4, #0
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     344:	2301      	movs	r3, #1
     346:	4699      	mov	r9, r3
			  && (callback_mask & (1 << i))) {
				module->callbacks[i]();
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     348:	33fe      	adds	r3, #254	; 0xfe
     34a:	469b      	mov	fp, r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     34c:	1c23      	adds	r3, r4, #0
     34e:	464d      	mov	r5, r9
     350:	40a5      	lsls	r5, r4
     352:	422f      	tst	r7, r5
     354:	d009      	beq.n	36a <RTC_Handler+0x6a>
			  && (callback_mask & (1 << i))) {
     356:	4642      	mov	r2, r8
     358:	4122      	asrs	r2, r4
     35a:	4649      	mov	r1, r9
     35c:	4211      	tst	r1, r2
     35e:	d004      	beq.n	36a <RTC_Handler+0x6a>
				module->callbacks[i]();
     360:	3302      	adds	r3, #2
     362:	009b      	lsls	r3, r3, #2
     364:	4652      	mov	r2, sl
     366:	589b      	ldr	r3, [r3, r2]
     368:	4798      	blx	r3
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     36a:	465b      	mov	r3, fp
     36c:	401d      	ands	r5, r3
     36e:	81b5      	strh	r5, [r6, #12]
     370:	3401      	adds	r4, #1
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
     372:	2c08      	cmp	r4, #8
     374:	d1ea      	bne.n	34c <RTC_Handler+0x4c>
     376:	e00a      	b.n	38e <RTC_Handler+0x8e>
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
		}
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     378:	05db      	lsls	r3, r3, #23
     37a:	d508      	bpl.n	38e <RTC_Handler+0x8e>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     37c:	4643      	mov	r3, r8
     37e:	05db      	lsls	r3, r3, #23
     380:	d502      	bpl.n	388 <RTC_Handler+0x88>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     382:	4653      	mov	r3, sl
     384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     386:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     388:	2380      	movs	r3, #128	; 0x80
     38a:	005b      	lsls	r3, r3, #1
     38c:	81b3      	strh	r3, [r6, #12]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     38e:	bc3c      	pop	{r2, r3, r4, r5}
     390:	4690      	mov	r8, r2
     392:	4699      	mov	r9, r3
     394:	46a2      	mov	sl, r4
     396:	46ab      	mov	fp, r5
     398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	20000adc 	.word	0x20000adc
     3a0:	ffff8000 	.word	0xffff8000

000003a4 <event_counter>:
	events_add_hook(resource, hook);
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
}

void event_counter(struct events_resource *resource)
{
     3a4:	b510      	push	{r4, lr}
     3a6:	1c04      	adds	r4, r0, #0
	if(events_is_interrupt_set(resource, EVENTS_INTERRUPT_DETECT)) {
     3a8:	2101      	movs	r1, #1
     3aa:	4b0a      	ldr	r3, [pc, #40]	; (3d4 <event_counter+0x30>)
     3ac:	4798      	blx	r3
     3ae:	2800      	cmp	r0, #0
     3b0:	d00f      	beq.n	3d2 <event_counter+0x2e>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     3b2:	2280      	movs	r2, #128	; 0x80
     3b4:	0212      	lsls	r2, r2, #8
     3b6:	2382      	movs	r3, #130	; 0x82
     3b8:	05db      	lsls	r3, r3, #23
     3ba:	61da      	str	r2, [r3, #28]
		port_pin_toggle_output_level(LED_0_PIN);
		printf("@@@@@@@@@@@@@@@@@@@@@@@@@ event success @@@@@@@@@@@@@@@@@@@@@@@@ \r\n");
     3bc:	4806      	ldr	r0, [pc, #24]	; (3d8 <event_counter+0x34>)
     3be:	4b07      	ldr	r3, [pc, #28]	; (3dc <event_counter+0x38>)
     3c0:	4798      	blx	r3
		event_count++;
     3c2:	4a07      	ldr	r2, [pc, #28]	; (3e0 <event_counter+0x3c>)
     3c4:	6813      	ldr	r3, [r2, #0]
     3c6:	3301      	adds	r3, #1
     3c8:	6013      	str	r3, [r2, #0]
		events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
     3ca:	1c20      	adds	r0, r4, #0
     3cc:	2101      	movs	r1, #1
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <event_counter+0x40>)
     3d0:	4798      	blx	r3
	}
}
     3d2:	bd10      	pop	{r4, pc}
     3d4:	00000d6d 	.word	0x00000d6d
     3d8:	000047cc 	.word	0x000047cc
     3dc:	00002bc9 	.word	0x00002bc9
     3e0:	20000108 	.word	0x20000108
     3e4:	00000da1 	.word	0x00000da1

000003e8 <rtc_match_callback>:
	rtc_calendar_enable(&rtc_instance);
}
struct rtc_calendar_alarm_time alarm;

void rtc_match_callback(void)
{
     3e8:	b510      	push	{r4, lr}
	/* Do something on RTC alarm match here */
	printf("******************** alarm success !!!******************** \r\n");
     3ea:	4809      	ldr	r0, [pc, #36]	; (410 <rtc_match_callback+0x28>)
     3ec:	4b09      	ldr	r3, [pc, #36]	; (414 <rtc_match_callback+0x2c>)
     3ee:	4798      	blx	r3
	/* Set new alarm in 5 seconds */
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
     3f0:	4c09      	ldr	r4, [pc, #36]	; (418 <rtc_match_callback+0x30>)
     3f2:	2301      	movs	r3, #1
     3f4:	7223      	strb	r3, [r4, #8]
	alarm.time.second += 5;
     3f6:	7820      	ldrb	r0, [r4, #0]
     3f8:	3005      	adds	r0, #5
	alarm.time.second = alarm.time.second % 60;
     3fa:	b2c0      	uxtb	r0, r0
     3fc:	213c      	movs	r1, #60	; 0x3c
     3fe:	4b07      	ldr	r3, [pc, #28]	; (41c <rtc_match_callback+0x34>)
     400:	4798      	blx	r3
     402:	7021      	strb	r1, [r4, #0]
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
     404:	4806      	ldr	r0, [pc, #24]	; (420 <rtc_match_callback+0x38>)
     406:	1c21      	adds	r1, r4, #0
     408:	2200      	movs	r2, #0
     40a:	4b06      	ldr	r3, [pc, #24]	; (424 <rtc_match_callback+0x3c>)
     40c:	4798      	blx	r3
	
}
     40e:	bd10      	pop	{r4, pc}
     410:	00004810 	.word	0x00004810
     414:	00002bc9 	.word	0x00002bc9
     418:	20000b14 	.word	0x20000b14
     41c:	000029f5 	.word	0x000029f5
     420:	20000ae0 	.word	0x20000ae0
     424:	000001dd 	.word	0x000001dd

00000428 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     428:	b570      	push	{r4, r5, r6, lr}
     42a:	b082      	sub	sp, #8
     42c:	1c05      	adds	r5, r0, #0
     42e:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     430:	2200      	movs	r2, #0
     432:	466b      	mov	r3, sp
     434:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     436:	4c06      	ldr	r4, [pc, #24]	; (450 <usart_serial_getchar+0x28>)
     438:	1c28      	adds	r0, r5, #0
     43a:	466b      	mov	r3, sp
     43c:	1d99      	adds	r1, r3, #6
     43e:	47a0      	blx	r4
     440:	2800      	cmp	r0, #0
     442:	d1f9      	bne.n	438 <usart_serial_getchar+0x10>

	*c = temp;
     444:	466b      	mov	r3, sp
     446:	3306      	adds	r3, #6
     448:	881b      	ldrh	r3, [r3, #0]
     44a:	7033      	strb	r3, [r6, #0]
}
     44c:	b002      	add	sp, #8
     44e:	bd70      	pop	{r4, r5, r6, pc}
     450:	00001dc5 	.word	0x00001dc5

00000454 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     454:	b570      	push	{r4, r5, r6, lr}
     456:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     458:	b28c      	uxth	r4, r1
     45a:	4e03      	ldr	r6, [pc, #12]	; (468 <usart_serial_putchar+0x14>)
     45c:	1c28      	adds	r0, r5, #0
     45e:	1c21      	adds	r1, r4, #0
     460:	47b0      	blx	r6
     462:	2800      	cmp	r0, #0
     464:	d1fa      	bne.n	45c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     466:	bd70      	pop	{r4, r5, r6, pc}
     468:	00001d99 	.word	0x00001d99

0000046c <can_send_standard_message>:
//! [can_receive_filter_setup]

//! [can_transfer_message_setup]
static void can_send_standard_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length)
{
     46c:	b510      	push	{r4, lr}
     46e:	b084      	sub	sp, #16
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
     470:	2300      	movs	r3, #0
     472:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
     474:	2388      	movs	r3, #136	; 0x88
     476:	041b      	lsls	r3, r3, #16
     478:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
     47a:	9b00      	ldr	r3, [sp, #0]
     47c:	0480      	lsls	r0, r0, #18
     47e:	4c12      	ldr	r4, [pc, #72]	; (4c8 <can_send_standard_message+0x5c>)
     480:	4020      	ands	r0, r4
     482:	4318      	orrs	r0, r3
     484:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
     486:	230f      	movs	r3, #15
     488:	4013      	ands	r3, r2
     48a:	0418      	lsls	r0, r3, #16
     48c:	9c01      	ldr	r4, [sp, #4]
     48e:	4b0f      	ldr	r3, [pc, #60]	; (4cc <can_send_standard_message+0x60>)
     490:	4023      	ands	r3, r4
     492:	4303      	orrs	r3, r0
     494:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
     496:	2a00      	cmp	r2, #0
     498:	d007      	beq.n	4aa <can_send_standard_message+0x3e>
     49a:	2300      	movs	r3, #0
     49c:	1c18      	adds	r0, r3, #0
     49e:	4468      	add	r0, sp
		tx_element.data[i] = *data;
     4a0:	5ccc      	ldrb	r4, [r1, r3]
     4a2:	7204      	strb	r4, [r0, #8]
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
	tx_element.T1.bit.DLC = data_length;
	for (i = 0; i < data_length; i++) {
     4a4:	3301      	adds	r3, #1
     4a6:	4293      	cmp	r3, r2
     4a8:	d1f8      	bne.n	49c <can_send_standard_message+0x30>
		tx_element.data[i] = *data;
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
     4aa:	4c09      	ldr	r4, [pc, #36]	; (4d0 <can_send_standard_message+0x64>)
     4ac:	1c20      	adds	r0, r4, #0
     4ae:	4669      	mov	r1, sp
     4b0:	2200      	movs	r2, #0
     4b2:	4b08      	ldr	r3, [pc, #32]	; (4d4 <can_send_standard_message+0x68>)
     4b4:	4798      	blx	r3
 *  \retval STATUS_BUSY The module is in configuration.
 */
static inline enum status_code can_tx_transfer_request(
		struct can_module *const module_inst, uint32_t trig_mask)
{
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
     4b6:	6823      	ldr	r3, [r4, #0]
     4b8:	699a      	ldr	r2, [r3, #24]
     4ba:	0792      	lsls	r2, r2, #30
     4bc:	d402      	bmi.n	4c4 <can_send_standard_message+0x58>
		return STATUS_BUSY;
	}
	module_inst->hw->TXBAR.reg = trig_mask;
     4be:	2101      	movs	r1, #1
     4c0:	22d0      	movs	r2, #208	; 0xd0
     4c2:	5099      	str	r1, [r3, r2]
			CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
     4c4:	b004      	add	sp, #16
     4c6:	bd10      	pop	{r4, pc}
     4c8:	1ffc0000 	.word	0x1ffc0000
     4cc:	fff0ffff 	.word	0xfff0ffff
     4d0:	200000d0 	.word	0x200000d0
     4d4:	000014a5 	.word	0x000014a5

000004d8 <can_send_extended_message>:

static void can_send_extended_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length)
{
     4d8:	b510      	push	{r4, lr}
     4da:	b084      	sub	sp, #16
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
     4dc:	2300      	movs	r3, #0
     4de:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
     4e0:	2388      	movs	r3, #136	; 0x88
     4e2:	041b      	lsls	r3, r3, #16
     4e4:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
     4e6:	9b00      	ldr	r3, [sp, #0]
     4e8:	2480      	movs	r4, #128	; 0x80
     4ea:	05e4      	lsls	r4, r4, #23
     4ec:	4323      	orrs	r3, r4
     4ee:	00c0      	lsls	r0, r0, #3
     4f0:	08c0      	lsrs	r0, r0, #3
     4f2:	4318      	orrs	r0, r3
     4f4:	9000      	str	r0, [sp, #0]
			CAN_TX_ELEMENT_T0_XTD;
	tx_element.T1.bit.DLC = data_length;
     4f6:	230f      	movs	r3, #15
     4f8:	4013      	ands	r3, r2
     4fa:	0418      	lsls	r0, r3, #16
     4fc:	9c01      	ldr	r4, [sp, #4]
     4fe:	4b0e      	ldr	r3, [pc, #56]	; (538 <can_send_extended_message+0x60>)
     500:	4023      	ands	r3, r4
     502:	4303      	orrs	r3, r0
     504:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
     506:	2a00      	cmp	r2, #0
     508:	d007      	beq.n	51a <can_send_extended_message+0x42>
     50a:	2300      	movs	r3, #0
     50c:	1c18      	adds	r0, r3, #0
     50e:	4468      	add	r0, sp
		tx_element.data[i] = *data;
     510:	5ccc      	ldrb	r4, [r1, r3]
     512:	7204      	strb	r4, [r0, #8]

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
			CAN_TX_ELEMENT_T0_XTD;
	tx_element.T1.bit.DLC = data_length;
	for (i = 0; i < data_length; i++) {
     514:	3301      	adds	r3, #1
     516:	4293      	cmp	r3, r2
     518:	d1f8      	bne.n	50c <can_send_extended_message+0x34>
		tx_element.data[i] = *data;
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
     51a:	4c08      	ldr	r4, [pc, #32]	; (53c <can_send_extended_message+0x64>)
     51c:	1c20      	adds	r0, r4, #0
     51e:	4669      	mov	r1, sp
     520:	2200      	movs	r2, #0
     522:	4b07      	ldr	r3, [pc, #28]	; (540 <can_send_extended_message+0x68>)
     524:	4798      	blx	r3
 *  \retval STATUS_BUSY The module is in configuration.
 */
static inline enum status_code can_tx_transfer_request(
		struct can_module *const module_inst, uint32_t trig_mask)
{
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
     526:	6823      	ldr	r3, [r4, #0]
     528:	699a      	ldr	r2, [r3, #24]
     52a:	0792      	lsls	r2, r2, #30
     52c:	d402      	bmi.n	534 <can_send_extended_message+0x5c>
		return STATUS_BUSY;
	}
	module_inst->hw->TXBAR.reg = trig_mask;
     52e:	2101      	movs	r1, #1
     530:	22d0      	movs	r2, #208	; 0xd0
     532:	5099      	str	r1, [r3, r2]
			CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
     534:	b004      	add	sp, #16
     536:	bd10      	pop	{r4, pc}
     538:	fff0ffff 	.word	0xfff0ffff
     53c:	200000d0 	.word	0x200000d0
     540:	000014a5 	.word	0x000014a5

00000544 <CAN0_Handler>:

//! [can_transfer_message_setup]

//! [can_interrupt_handler]
void CAN0_Handler(void)
{
     544:	b5f0      	push	{r4, r5, r6, r7, lr}
     546:	4647      	mov	r7, r8
     548:	b480      	push	{r7}
     54a:	b084      	sub	sp, #16
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
     54c:	4b81      	ldr	r3, [pc, #516]	; (754 <CAN0_Handler+0x210>)
     54e:	681b      	ldr	r3, [r3, #0]
     550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = can_read_interrupt_status(&can_instance);
     552:	9203      	str	r2, [sp, #12]

	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
     554:	9a03      	ldr	r2, [sp, #12]
     556:	0312      	lsls	r2, r2, #12
     558:	d572      	bpl.n	640 <CAN0_Handler+0xfc>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     55a:	2280      	movs	r2, #128	; 0x80
     55c:	0312      	lsls	r2, r2, #12
     55e:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
     560:	2300      	movs	r3, #0
     562:	9302      	str	r3, [sp, #8]
     564:	9b02      	ldr	r3, [sp, #8]
     566:	2b0f      	cmp	r3, #15
     568:	d86a      	bhi.n	640 <CAN0_Handler+0xfc>
 */
static inline bool can_rx_get_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
     56a:	4b7a      	ldr	r3, [pc, #488]	; (754 <CAN0_Handler+0x210>)
     56c:	4698      	mov	r8, r3
		} else {
			return false;
		}
	} else {
		index -= 32;
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
     56e:	1c1f      	adds	r7, r3, #0
			if (can_rx_get_buffer_status(&can_instance, i)) {
     570:	9902      	ldr	r1, [sp, #8]
 *  \retval false Rx Buffer not updated.
 */
static inline bool can_rx_get_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
     572:	291f      	cmp	r1, #31
     574:	d80b      	bhi.n	58e <CAN0_Handler+0x4a>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
     576:	2398      	movs	r3, #152	; 0x98
     578:	4642      	mov	r2, r8
     57a:	6812      	ldr	r2, [r2, #0]
     57c:	58d0      	ldr	r0, [r2, r3]
     57e:	2201      	movs	r2, #1
     580:	1c13      	adds	r3, r2, #0
     582:	408b      	lsls	r3, r1
     584:	4003      	ands	r3, r0
     586:	1e5a      	subs	r2, r3, #1
     588:	4193      	sbcs	r3, r2
     58a:	b2db      	uxtb	r3, r3
     58c:	e00a      	b.n	5a4 <CAN0_Handler+0x60>
		} else {
			return false;
		}
	} else {
		index -= 32;
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
     58e:	239c      	movs	r3, #156	; 0x9c
     590:	683a      	ldr	r2, [r7, #0]
     592:	58d0      	ldr	r0, [r2, r3]
			return true;
		} else {
			return false;
		}
	} else {
		index -= 32;
     594:	3920      	subs	r1, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
     596:	2201      	movs	r2, #1
     598:	1c13      	adds	r3, r2, #0
     59a:	408b      	lsls	r3, r1
     59c:	4003      	ands	r3, r0
     59e:	1e5a      	subs	r2, r3, #1
     5a0:	4193      	sbcs	r3, r2
     5a2:	b2db      	uxtb	r3, r3
     5a4:	2b00      	cmp	r3, #0
     5a6:	d045      	beq.n	634 <CAN0_Handler+0xf0>
				rx_buffer_index = i;
     5a8:	9b02      	ldr	r3, [sp, #8]
     5aa:	9301      	str	r3, [sp, #4]
				can_rx_clear_buffer_status(&can_instance, i);
     5ac:	9b02      	ldr	r3, [sp, #8]
 *
 */
static inline void can_rx_clear_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
     5ae:	2b1f      	cmp	r3, #31
     5b0:	d809      	bhi.n	5c6 <CAN0_Handler+0x82>
		module_inst->hw->NDAT1.reg |= (1 << index);
     5b2:	4a68      	ldr	r2, [pc, #416]	; (754 <CAN0_Handler+0x210>)
     5b4:	6814      	ldr	r4, [r2, #0]
     5b6:	2098      	movs	r0, #152	; 0x98
     5b8:	5822      	ldr	r2, [r4, r0]
     5ba:	2101      	movs	r1, #1
     5bc:	4099      	lsls	r1, r3
     5be:	1c0b      	adds	r3, r1, #0
     5c0:	4313      	orrs	r3, r2
     5c2:	5023      	str	r3, [r4, r0]
     5c4:	e009      	b.n	5da <CAN0_Handler+0x96>
	} else {
		index -= 32;
		module_inst->hw->NDAT2.reg |= (1 << index);
     5c6:	4a63      	ldr	r2, [pc, #396]	; (754 <CAN0_Handler+0x210>)
     5c8:	6814      	ldr	r4, [r2, #0]
     5ca:	209c      	movs	r0, #156	; 0x9c
     5cc:	5822      	ldr	r2, [r4, r0]
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
		module_inst->hw->NDAT1.reg |= (1 << index);
	} else {
		index -= 32;
     5ce:	3b20      	subs	r3, #32
		module_inst->hw->NDAT2.reg |= (1 << index);
     5d0:	2101      	movs	r1, #1
     5d2:	4099      	lsls	r1, r3
     5d4:	1c0b      	adds	r3, r1, #0
     5d6:	4313      	orrs	r3, r2
     5d8:	5023      	str	r3, [r4, r0]
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
     5da:	9a01      	ldr	r2, [sp, #4]
     5dc:	4c5e      	ldr	r4, [pc, #376]	; (758 <CAN0_Handler+0x214>)
     5de:	485d      	ldr	r0, [pc, #372]	; (754 <CAN0_Handler+0x210>)
     5e0:	1c21      	adds	r1, r4, #0
     5e2:	4b5e      	ldr	r3, [pc, #376]	; (75c <CAN0_Handler+0x218>)
     5e4:	4798      	blx	r3
				rx_buffer_index);
				if (rx_element_buffer.R0.bit.XTD) {
     5e6:	6823      	ldr	r3, [r4, #0]
     5e8:	005b      	lsls	r3, r3, #1
     5ea:	d503      	bpl.n	5f4 <CAN0_Handler+0xb0>
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
     5ec:	485c      	ldr	r0, [pc, #368]	; (760 <CAN0_Handler+0x21c>)
     5ee:	4b5d      	ldr	r3, [pc, #372]	; (764 <CAN0_Handler+0x220>)
     5f0:	4798      	blx	r3
     5f2:	e002      	b.n	5fa <CAN0_Handler+0xb6>
				} else {
					printf("\n\r Standard message received in Rx buffer. The received data is: \r\n");
     5f4:	485c      	ldr	r0, [pc, #368]	; (768 <CAN0_Handler+0x224>)
     5f6:	4b5b      	ldr	r3, [pc, #364]	; (764 <CAN0_Handler+0x220>)
     5f8:	4798      	blx	r3
				}
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
     5fa:	2300      	movs	r3, #0
     5fc:	9302      	str	r3, [sp, #8]
     5fe:	4b56      	ldr	r3, [pc, #344]	; (758 <CAN0_Handler+0x214>)
     600:	685b      	ldr	r3, [r3, #4]
     602:	031b      	lsls	r3, r3, #12
     604:	0f1b      	lsrs	r3, r3, #28
     606:	9a02      	ldr	r2, [sp, #8]
     608:	4293      	cmp	r3, r2
     60a:	d910      	bls.n	62e <CAN0_Handler+0xea>
					printf("  %d",rx_element_buffer.data[i]);
     60c:	4c57      	ldr	r4, [pc, #348]	; (76c <CAN0_Handler+0x228>)
     60e:	4d52      	ldr	r5, [pc, #328]	; (758 <CAN0_Handler+0x214>)
     610:	4e57      	ldr	r6, [pc, #348]	; (770 <CAN0_Handler+0x22c>)
     612:	9b02      	ldr	r3, [sp, #8]
     614:	18eb      	adds	r3, r5, r3
     616:	7a19      	ldrb	r1, [r3, #8]
     618:	1c20      	adds	r0, r4, #0
     61a:	47b0      	blx	r6
				if (rx_element_buffer.R0.bit.XTD) {
					printf("\n\r Extended message received in Rx buffer. The received data is: \r\n");
				} else {
					printf("\n\r Standard message received in Rx buffer. The received data is: \r\n");
				}
				for (i = 0; i < rx_element_buffer.R1.bit.DLC; i++) {
     61c:	9b02      	ldr	r3, [sp, #8]
     61e:	3301      	adds	r3, #1
     620:	9302      	str	r3, [sp, #8]
     622:	686b      	ldr	r3, [r5, #4]
     624:	031b      	lsls	r3, r3, #12
     626:	0f1b      	lsrs	r3, r3, #28
     628:	9a02      	ldr	r2, [sp, #8]
     62a:	4293      	cmp	r3, r2
     62c:	d8f1      	bhi.n	612 <CAN0_Handler+0xce>
					printf("  %d",rx_element_buffer.data[i]);
				}
				printf("\r\n\r\n");
     62e:	4851      	ldr	r0, [pc, #324]	; (774 <CAN0_Handler+0x230>)
     630:	4b4c      	ldr	r3, [pc, #304]	; (764 <CAN0_Handler+0x220>)
     632:	4798      	blx	r3
	volatile uint32_t status, i, rx_buffer_index;
	status = can_read_interrupt_status(&can_instance);

	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
     634:	9b02      	ldr	r3, [sp, #8]
     636:	3301      	adds	r3, #1
     638:	9302      	str	r3, [sp, #8]
     63a:	9b02      	ldr	r3, [sp, #8]
     63c:	2b0f      	cmp	r3, #15
     63e:	d997      	bls.n	570 <CAN0_Handler+0x2c>
				printf("\r\n\r\n");
			}
		}
	}

	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
     640:	9b03      	ldr	r3, [sp, #12]
     642:	07db      	lsls	r3, r3, #31
     644:	d538      	bpl.n	6b8 <CAN0_Handler+0x174>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     646:	4d43      	ldr	r5, [pc, #268]	; (754 <CAN0_Handler+0x210>)
     648:	682b      	ldr	r3, [r5, #0]
     64a:	2201      	movs	r2, #1
     64c:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_FIFO_0_NEW_MESSAGE);
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
     64e:	4c4a      	ldr	r4, [pc, #296]	; (778 <CAN0_Handler+0x234>)
     650:	6822      	ldr	r2, [r4, #0]
     652:	1c28      	adds	r0, r5, #0
     654:	4949      	ldr	r1, [pc, #292]	; (77c <CAN0_Handler+0x238>)
     656:	4b4a      	ldr	r3, [pc, #296]	; (780 <CAN0_Handler+0x23c>)
     658:	4798      	blx	r3
				standard_receive_index);
		can_rx_fifo_acknowledge(&can_instance, 0,
     65a:	6823      	ldr	r3, [r4, #0]
 */
static inline void can_rx_fifo_acknowledge(
		struct can_module *const module_inst, bool fifo_number, uint32_t index)
{
	if (!fifo_number) {
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
     65c:	6829      	ldr	r1, [r5, #0]
     65e:	223f      	movs	r2, #63	; 0x3f
     660:	4013      	ands	r3, r2
     662:	3269      	adds	r2, #105	; 0x69
     664:	508b      	str	r3, [r1, r2]
				standard_receive_index);
		standard_receive_index++;
     666:	6823      	ldr	r3, [r4, #0]
     668:	3301      	adds	r3, #1
     66a:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
     66c:	6823      	ldr	r3, [r4, #0]
     66e:	2b10      	cmp	r3, #16
     670:	d102      	bne.n	678 <CAN0_Handler+0x134>
			standard_receive_index = 0;
     672:	2200      	movs	r2, #0
     674:	4b40      	ldr	r3, [pc, #256]	; (778 <CAN0_Handler+0x234>)
     676:	601a      	str	r2, [r3, #0]
		}

		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
     678:	4842      	ldr	r0, [pc, #264]	; (784 <CAN0_Handler+0x240>)
     67a:	4b3a      	ldr	r3, [pc, #232]	; (764 <CAN0_Handler+0x220>)
     67c:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
     67e:	2300      	movs	r3, #0
     680:	9302      	str	r3, [sp, #8]
     682:	4b3e      	ldr	r3, [pc, #248]	; (77c <CAN0_Handler+0x238>)
     684:	685b      	ldr	r3, [r3, #4]
     686:	031b      	lsls	r3, r3, #12
     688:	0f1b      	lsrs	r3, r3, #28
     68a:	9a02      	ldr	r2, [sp, #8]
     68c:	4293      	cmp	r3, r2
     68e:	d910      	bls.n	6b2 <CAN0_Handler+0x16e>
			printf("  %d",rx_element_fifo_0.data[i]);
     690:	4c36      	ldr	r4, [pc, #216]	; (76c <CAN0_Handler+0x228>)
     692:	4d3a      	ldr	r5, [pc, #232]	; (77c <CAN0_Handler+0x238>)
     694:	4e36      	ldr	r6, [pc, #216]	; (770 <CAN0_Handler+0x22c>)
     696:	9b02      	ldr	r3, [sp, #8]
     698:	18eb      	adds	r3, r5, r3
     69a:	7a19      	ldrb	r1, [r3, #8]
     69c:	1c20      	adds	r0, r4, #0
     69e:	47b0      	blx	r6
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
			standard_receive_index = 0;
		}

		printf("\n\r Standard message received in FIFO 0. The received data is: \r\n");
		for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
     6a0:	9b02      	ldr	r3, [sp, #8]
     6a2:	3301      	adds	r3, #1
     6a4:	9302      	str	r3, [sp, #8]
     6a6:	686b      	ldr	r3, [r5, #4]
     6a8:	031b      	lsls	r3, r3, #12
     6aa:	0f1b      	lsrs	r3, r3, #28
     6ac:	9a02      	ldr	r2, [sp, #8]
     6ae:	4293      	cmp	r3, r2
     6b0:	d8f1      	bhi.n	696 <CAN0_Handler+0x152>
			printf("  %d",rx_element_fifo_0.data[i]);
		}
		printf("\r\n\r\n");
     6b2:	4830      	ldr	r0, [pc, #192]	; (774 <CAN0_Handler+0x230>)
     6b4:	4b2b      	ldr	r3, [pc, #172]	; (764 <CAN0_Handler+0x220>)
     6b6:	4798      	blx	r3
	}

	if (status & CAN_RX_FIFO_1_NEW_MESSAGE) {
     6b8:	9b03      	ldr	r3, [sp, #12]
     6ba:	06db      	lsls	r3, r3, #27
     6bc:	d538      	bpl.n	730 <CAN0_Handler+0x1ec>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     6be:	4d25      	ldr	r5, [pc, #148]	; (754 <CAN0_Handler+0x210>)
     6c0:	682b      	ldr	r3, [r5, #0]
     6c2:	2210      	movs	r2, #16
     6c4:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_FIFO_1_NEW_MESSAGE);
		can_get_rx_fifo_1_element(&can_instance, &rx_element_fifo_1,
     6c6:	4c30      	ldr	r4, [pc, #192]	; (788 <CAN0_Handler+0x244>)
     6c8:	6822      	ldr	r2, [r4, #0]
     6ca:	1c28      	adds	r0, r5, #0
     6cc:	492f      	ldr	r1, [pc, #188]	; (78c <CAN0_Handler+0x248>)
     6ce:	4b30      	ldr	r3, [pc, #192]	; (790 <CAN0_Handler+0x24c>)
     6d0:	4798      	blx	r3
				extended_receive_index);
		can_rx_fifo_acknowledge(&can_instance, 0,
     6d2:	6823      	ldr	r3, [r4, #0]
 */
static inline void can_rx_fifo_acknowledge(
		struct can_module *const module_inst, bool fifo_number, uint32_t index)
{
	if (!fifo_number) {
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
     6d4:	6829      	ldr	r1, [r5, #0]
     6d6:	223f      	movs	r2, #63	; 0x3f
     6d8:	4013      	ands	r3, r2
     6da:	3269      	adds	r2, #105	; 0x69
     6dc:	508b      	str	r3, [r1, r2]
				extended_receive_index);
		extended_receive_index++;
     6de:	6823      	ldr	r3, [r4, #0]
     6e0:	3301      	adds	r3, #1
     6e2:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
     6e4:	6823      	ldr	r3, [r4, #0]
     6e6:	2b10      	cmp	r3, #16
     6e8:	d102      	bne.n	6f0 <CAN0_Handler+0x1ac>
			extended_receive_index = 0;
     6ea:	2200      	movs	r2, #0
     6ec:	4b26      	ldr	r3, [pc, #152]	; (788 <CAN0_Handler+0x244>)
     6ee:	601a      	str	r2, [r3, #0]
		}

		printf("\n\r Extended message received in FIFO 1. The received data is: \r\n");
     6f0:	4828      	ldr	r0, [pc, #160]	; (794 <CAN0_Handler+0x250>)
     6f2:	4b1c      	ldr	r3, [pc, #112]	; (764 <CAN0_Handler+0x220>)
     6f4:	4798      	blx	r3
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
     6f6:	2300      	movs	r3, #0
     6f8:	9302      	str	r3, [sp, #8]
     6fa:	4b24      	ldr	r3, [pc, #144]	; (78c <CAN0_Handler+0x248>)
     6fc:	685b      	ldr	r3, [r3, #4]
     6fe:	031b      	lsls	r3, r3, #12
     700:	0f1b      	lsrs	r3, r3, #28
     702:	9a02      	ldr	r2, [sp, #8]
     704:	4293      	cmp	r3, r2
     706:	d910      	bls.n	72a <CAN0_Handler+0x1e6>
			printf("  %d",rx_element_fifo_1.data[i]);
     708:	4c18      	ldr	r4, [pc, #96]	; (76c <CAN0_Handler+0x228>)
     70a:	4d20      	ldr	r5, [pc, #128]	; (78c <CAN0_Handler+0x248>)
     70c:	4e18      	ldr	r6, [pc, #96]	; (770 <CAN0_Handler+0x22c>)
     70e:	9b02      	ldr	r3, [sp, #8]
     710:	18eb      	adds	r3, r5, r3
     712:	7a19      	ldrb	r1, [r3, #8]
     714:	1c20      	adds	r0, r4, #0
     716:	47b0      	blx	r6
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
			extended_receive_index = 0;
		}

		printf("\n\r Extended message received in FIFO 1. The received data is: \r\n");
		for (i = 0; i < rx_element_fifo_1.R1.bit.DLC; i++) {
     718:	9b02      	ldr	r3, [sp, #8]
     71a:	3301      	adds	r3, #1
     71c:	9302      	str	r3, [sp, #8]
     71e:	686b      	ldr	r3, [r5, #4]
     720:	031b      	lsls	r3, r3, #12
     722:	0f1b      	lsrs	r3, r3, #28
     724:	9a02      	ldr	r2, [sp, #8]
     726:	4293      	cmp	r3, r2
     728:	d8f1      	bhi.n	70e <CAN0_Handler+0x1ca>
			printf("  %d",rx_element_fifo_1.data[i]);
		}
		printf("\r\n\r\n");
     72a:	4812      	ldr	r0, [pc, #72]	; (774 <CAN0_Handler+0x230>)
     72c:	4b0d      	ldr	r3, [pc, #52]	; (764 <CAN0_Handler+0x220>)
     72e:	4798      	blx	r3
	}

	if ((status & CAN_PROTOCAL_ERROR_ARBITRATION)
     730:	9b03      	ldr	r3, [sp, #12]
     732:	011b      	lsls	r3, r3, #4
     734:	d402      	bmi.n	73c <CAN0_Handler+0x1f8>
			|| (status & CAN_PROTOCAL_ERROR_DATA)) {
     736:	9b03      	ldr	r3, [sp, #12]
     738:	00db      	lsls	r3, r3, #3
     73a:	d507      	bpl.n	74c <CAN0_Handler+0x208>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
     73c:	4b05      	ldr	r3, [pc, #20]	; (754 <CAN0_Handler+0x210>)
     73e:	681b      	ldr	r3, [r3, #0]
     740:	22c0      	movs	r2, #192	; 0xc0
     742:	0552      	lsls	r2, r2, #21
     744:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_PROTOCAL_ERROR_ARBITRATION
			 	| CAN_PROTOCAL_ERROR_DATA);
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
     746:	4814      	ldr	r0, [pc, #80]	; (798 <CAN0_Handler+0x254>)
     748:	4b06      	ldr	r3, [pc, #24]	; (764 <CAN0_Handler+0x220>)
     74a:	4798      	blx	r3
	}
}
     74c:	b004      	add	sp, #16
     74e:	bc04      	pop	{r2}
     750:	4690      	mov	r8, r2
     752:	bdf0      	pop	{r4, r5, r6, r7, pc}
     754:	200000d0 	.word	0x200000d0
     758:	2000010c 	.word	0x2000010c
     75c:	000013b5 	.word	0x000013b5
     760:	00004850 	.word	0x00004850
     764:	00002bc9 	.word	0x00002bc9
     768:	00004894 	.word	0x00004894
     76c:	000048d8 	.word	0x000048d8
     770:	00002ad1 	.word	0x00002ad1
     774:	000048e0 	.word	0x000048e0
     778:	2000011c 	.word	0x2000011c
     77c:	2000009c 	.word	0x2000009c
     780:	00001405 	.word	0x00001405
     784:	000048e4 	.word	0x000048e4
     788:	200000cc 	.word	0x200000cc
     78c:	200000ac 	.word	0x200000ac
     790:	00001455 	.word	0x00001455
     794:	00004924 	.word	0x00004924
     798:	00004964 	.word	0x00004964

0000079c <configure_rtc_calendar>:

//! ******************************************* [RTC CONFIG ] *******************************************
struct rtc_module rtc_instance;

void configure_rtc_calendar(void)
{
     79c:	b530      	push	{r4, r5, lr}
     79e:	b089      	sub	sp, #36	; 0x24
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
     7a0:	aa03      	add	r2, sp, #12
     7a2:	23b0      	movs	r3, #176	; 0xb0
     7a4:	011b      	lsls	r3, r3, #4
     7a6:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
     7a8:	2300      	movs	r3, #0
     7aa:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
     7ac:	21fa      	movs	r1, #250	; 0xfa
     7ae:	00c9      	lsls	r1, r1, #3
     7b0:	8091      	strh	r1, [r2, #4]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) 
	config->enable_read_sync    = true;
     7b2:	2401      	movs	r4, #1
     7b4:	7194      	strb	r4, [r2, #6]
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
     7b6:	72d3      	strb	r3, [r2, #11]
	alarm.time.month = 1;
	alarm.time.day = 1;
	alarm.time.hour = 0;
	alarm.time.minute = 0;
	alarm.time.second = 0;
	config_rtc_calendar.clock_24h = true;
     7b8:	70d4      	strb	r4, [r2, #3]
	config_rtc_calendar.alarm[0].time = alarm.time;
     7ba:	7213      	strb	r3, [r2, #8]
     7bc:	7253      	strb	r3, [r2, #9]
     7be:	7293      	strb	r3, [r2, #10]
     7c0:	7314      	strb	r4, [r2, #12]
     7c2:	7354      	strb	r4, [r2, #13]
     7c4:	23fc      	movs	r3, #252	; 0xfc
     7c6:	00db      	lsls	r3, r3, #3
     7c8:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
     7ca:	7414      	strb	r4, [r2, #16]
	
	//! [init_rtc]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
     7cc:	4d14      	ldr	r5, [pc, #80]	; (820 <configure_rtc_calendar+0x84>)
     7ce:	1c28      	adds	r0, r5, #0
     7d0:	4914      	ldr	r1, [pc, #80]	; (824 <configure_rtc_calendar+0x88>)
     7d2:	4b15      	ldr	r3, [pc, #84]	; (828 <configure_rtc_calendar+0x8c>)
     7d4:	4798      	blx	r3
	
	
	//[setup and initial RTC AND enable system event generate]
	struct rtc_calendar_events calendar_event;
	calendar_event.generate_event_on_periodic[6] = true;
     7d6:	466b      	mov	r3, sp
     7d8:	721c      	strb	r4, [r3, #8]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     7da:	682d      	ldr	r5, [r5, #0]

	uint32_t event_mask = 0;

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
     7dc:	781a      	ldrb	r2, [r3, #0]
		event_mask |= RTC_MODE2_EVCTRL_OVFEO;
     7de:	1e53      	subs	r3, r2, #1
     7e0:	419a      	sbcs	r2, r3
     7e2:	03d2      	lsls	r2, r2, #15
	}

	/* Check if the user has requested any alarm events */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		if (events->generate_event_on_alarm[i]) {
     7e4:	466b      	mov	r3, sp
     7e6:	785b      	ldrb	r3, [r3, #1]
     7e8:	2b00      	cmp	r3, #0
     7ea:	d002      	beq.n	7f2 <configure_rtc_calendar+0x56>
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
     7ec:	2380      	movs	r3, #128	; 0x80
     7ee:	005b      	lsls	r3, r3, #1
     7f0:	431a      	orrs	r2, r3

//! ******************************************* [RTC CONFIG ] *******************************************
struct rtc_module rtc_instance;

void configure_rtc_calendar(void)
{
     7f2:	2300      	movs	r3, #0
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
     7f4:	2401      	movs	r4, #1
     7f6:	20ff      	movs	r0, #255	; 0xff
     7f8:	1c19      	adds	r1, r3, #0
     7fa:	4469      	add	r1, sp
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
     7fc:	7889      	ldrb	r1, [r1, #2]
     7fe:	2900      	cmp	r1, #0
     800:	d003      	beq.n	80a <configure_rtc_calendar+0x6e>
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
     802:	1c21      	adds	r1, r4, #0
     804:	4099      	lsls	r1, r3
     806:	4001      	ands	r1, r0
     808:	430a      	orrs	r2, r1
     80a:	3301      	adds	r3, #1
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
     80c:	2b08      	cmp	r3, #8
     80e:	d1f3      	bne.n	7f8 <configure_rtc_calendar+0x5c>
		event_mask |= RTC_MODE2_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s) */
	rtc_module->MODE2.EVCTRL.reg |= event_mask;
     810:	686b      	ldr	r3, [r5, #4]
     812:	431a      	orrs	r2, r3
     814:	606a      	str	r2, [r5, #4]
	struct rtc_calendar_events calendar_event;
	calendar_event.generate_event_on_periodic[6] = true;
	rtc_calendar_enable_events(&rtc_instance, &calendar_event);
	
	//! [enable]
	rtc_calendar_enable(&rtc_instance);
     816:	4802      	ldr	r0, [pc, #8]	; (820 <configure_rtc_calendar+0x84>)
     818:	4b04      	ldr	r3, [pc, #16]	; (82c <configure_rtc_calendar+0x90>)
     81a:	4798      	blx	r3
}
     81c:	b009      	add	sp, #36	; 0x24
     81e:	bd30      	pop	{r4, r5, pc}
     820:	20000ae0 	.word	0x20000ae0
     824:	40002400 	.word	0x40002400
     828:	0000021d 	.word	0x0000021d
     82c:	0000011d 	.word	0x0000011d

00000830 <configure_rtc_callbacks>:
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
	
}

void configure_rtc_callbacks(void)
{
     830:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
     832:	4c05      	ldr	r4, [pc, #20]	; (848 <configure_rtc_callbacks+0x18>)
     834:	1c20      	adds	r0, r4, #0
     836:	4905      	ldr	r1, [pc, #20]	; (84c <configure_rtc_callbacks+0x1c>)
     838:	2208      	movs	r2, #8
     83a:	4b05      	ldr	r3, [pc, #20]	; (850 <configure_rtc_callbacks+0x20>)
     83c:	4798      	blx	r3
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
     83e:	1c20      	adds	r0, r4, #0
     840:	2108      	movs	r1, #8
     842:	4b04      	ldr	r3, [pc, #16]	; (854 <configure_rtc_callbacks+0x24>)
     844:	4798      	blx	r3
}
     846:	bd10      	pop	{r4, pc}
     848:	20000ae0 	.word	0x20000ae0
     84c:	000003e9 	.word	0x000003e9
     850:	00000299 	.word	0x00000299
     854:	000002b9 	.word	0x000002b9

00000858 <main>:
//! //! ******************************************* [RTC CONFIG END] *******************************************

//! [setup]

int main(void)
{
     858:	b5f0      	push	{r4, r5, r6, r7, lr}
     85a:	4647      	mov	r7, r8
     85c:	b480      	push	{r7}
     85e:	b09a      	sub	sp, #104	; 0x68
	
	uint8_t key;

//! [setup_init]
	system_init();
     860:	4bc9      	ldr	r3, [pc, #804]	; (b88 <main+0x330>)
     862:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     864:	2401      	movs	r4, #1
     866:	4bc9      	ldr	r3, [pc, #804]	; (b8c <main+0x334>)
     868:	701c      	strb	r4, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     86a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     86e:	b662      	cpsie	i
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     870:	aa02      	add	r2, sp, #8
     872:	2380      	movs	r3, #128	; 0x80
     874:	05db      	lsls	r3, r3, #23
     876:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     878:	2300      	movs	r3, #0
     87a:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
     87c:	21ff      	movs	r1, #255	; 0xff
     87e:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
     880:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     882:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     884:	39d3      	subs	r1, #211	; 0xd3
     886:	5454      	strb	r4, [r2, r1]
	config->transmitter_enable = true;
     888:	3101      	adds	r1, #1
     88a:	5454      	strb	r4, [r2, r1]
	config->clock_polarity_inverted = false;
     88c:	3101      	adds	r1, #1
     88e:	5453      	strb	r3, [r2, r1]
	config->use_external_clock = false;
     890:	3101      	adds	r1, #1
     892:	5453      	strb	r3, [r2, r1]
	config->ext_clock_freq   = 0;
     894:	6313      	str	r3, [r2, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     896:	3105      	adds	r1, #5
     898:	5453      	strb	r3, [r2, r1]
	config->generator_source = GCLK_GENERATOR_0;
     89a:	3101      	adds	r1, #1
     89c:	5453      	strb	r3, [r2, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     89e:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     8a0:	2100      	movs	r1, #0
     8a2:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     8a4:	76d1      	strb	r1, [r2, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
     8a6:	61d3      	str	r3, [r2, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
     8a8:	8413      	strh	r3, [r2, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
     8aa:	8453      	strh	r3, [r2, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     8ac:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     8ae:	3324      	adds	r3, #36	; 0x24
     8b0:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     8b2:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
     8b4:	3b11      	subs	r3, #17
     8b6:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     8b8:	3313      	adds	r3, #19
     8ba:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
     8bc:	3b01      	subs	r3, #1
     8be:	54d1      	strb	r1, [r2, r3]
static void configure_usart_cdc(void)
{

	struct usart_config config_cdc;
	usart_get_config_defaults(&config_cdc);
	config_cdc.baudrate	 = 38400;
     8c0:	2396      	movs	r3, #150	; 0x96
     8c2:	021b      	lsls	r3, r3, #8
     8c4:	6293      	str	r3, [r2, #40]	; 0x28
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     8c6:	23c4      	movs	r3, #196	; 0xc4
     8c8:	039b      	lsls	r3, r3, #14
     8ca:	60d3      	str	r3, [r2, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     8cc:	2301      	movs	r3, #1
     8ce:	425b      	negs	r3, r3
     8d0:	6393      	str	r3, [r2, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     8d2:	63d3      	str	r3, [r2, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     8d4:	4bae      	ldr	r3, [pc, #696]	; (b90 <main+0x338>)
     8d6:	6413      	str	r3, [r2, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     8d8:	4bae      	ldr	r3, [pc, #696]	; (b94 <main+0x33c>)
     8da:	6453      	str	r3, [r2, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     8dc:	4dae      	ldr	r5, [pc, #696]	; (b98 <main+0x340>)
     8de:	4baf      	ldr	r3, [pc, #700]	; (b9c <main+0x344>)
     8e0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     8e2:	49af      	ldr	r1, [pc, #700]	; (ba0 <main+0x348>)
     8e4:	4baf      	ldr	r3, [pc, #700]	; (ba4 <main+0x34c>)
     8e6:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     8e8:	49af      	ldr	r1, [pc, #700]	; (ba8 <main+0x350>)
     8ea:	4bb0      	ldr	r3, [pc, #704]	; (bac <main+0x354>)
     8ec:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     8ee:	1c28      	adds	r0, r5, #0
     8f0:	49af      	ldr	r1, [pc, #700]	; (bb0 <main+0x358>)
     8f2:	4bb0      	ldr	r3, [pc, #704]	; (bb4 <main+0x35c>)
     8f4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     8f6:	4fb0      	ldr	r7, [pc, #704]	; (bb8 <main+0x360>)
     8f8:	683b      	ldr	r3, [r7, #0]
     8fa:	6898      	ldr	r0, [r3, #8]
     8fc:	2100      	movs	r1, #0
     8fe:	4eaf      	ldr	r6, [pc, #700]	; (bbc <main+0x364>)
     900:	47b0      	blx	r6
	setbuf(stdin, NULL);
     902:	683b      	ldr	r3, [r7, #0]
     904:	6858      	ldr	r0, [r3, #4]
     906:	2100      	movs	r1, #0
     908:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     90a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     90c:	1c30      	adds	r0, r6, #0
     90e:	4bac      	ldr	r3, [pc, #688]	; (bc0 <main+0x368>)
     910:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     912:	231f      	movs	r3, #31
     914:	4018      	ands	r0, r3
     916:	4084      	lsls	r4, r0
     918:	4baa      	ldr	r3, [pc, #680]	; (bc4 <main+0x36c>)
     91a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     91c:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     91e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     920:	2a00      	cmp	r2, #0
     922:	d1fc      	bne.n	91e <main+0xc6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     924:	6832      	ldr	r2, [r6, #0]
     926:	2302      	movs	r3, #2
     928:	4313      	orrs	r3, r2
     92a:	6033      	str	r3, [r6, #0]
static volatile uint32_t event_count = 0;
void event_counter(struct events_resource *resource);
static void configure_event_channel(struct events_resource *resource)
{
	struct events_config config;
	events_get_config_defaults(&config);
     92c:	ac02      	add	r4, sp, #8
     92e:	1c20      	adds	r0, r4, #0
     930:	4ba5      	ldr	r3, [pc, #660]	; (bc8 <main+0x370>)
     932:	4798      	blx	r3
	config.generator = CONF_EVENT_GENERATOR;
     934:	230c      	movs	r3, #12
     936:	70a3      	strb	r3, [r4, #2]
	config.edge_detect = EVENTS_EDGE_DETECT_RISING;
     938:	3b0b      	subs	r3, #11
     93a:	7023      	strb	r3, [r4, #0]
	config.path = EVENTS_PATH_SYNCHRONOUS;
     93c:	2300      	movs	r3, #0
     93e:	7063      	strb	r3, [r4, #1]
	config.clock_source = GCLK_GENERATOR_0;
     940:	70e3      	strb	r3, [r4, #3]
	events_allocate(resource, &config);
     942:	a817      	add	r0, sp, #92	; 0x5c
     944:	1c21      	adds	r1, r4, #0
     946:	4ba1      	ldr	r3, [pc, #644]	; (bcc <main+0x374>)
     948:	4798      	blx	r3
}

static void configure_event_user(struct events_resource *resource)
{
	events_attach_user(resource, CONF_EVENT_USER);
     94a:	a817      	add	r0, sp, #92	; 0x5c
     94c:	2105      	movs	r1, #5
     94e:	4ba0      	ldr	r3, [pc, #640]	; (bd0 <main+0x378>)
     950:	4798      	blx	r3
}

static void configure_event_interrupt(struct events_resource *resource,
struct events_hook *hook)
{
	events_create_hook(hook, event_counter);
     952:	a814      	add	r0, sp, #80	; 0x50
     954:	499f      	ldr	r1, [pc, #636]	; (bd4 <main+0x37c>)
     956:	4ba0      	ldr	r3, [pc, #640]	; (bd8 <main+0x380>)
     958:	4798      	blx	r3
	events_add_hook(resource, hook);
     95a:	a817      	add	r0, sp, #92	; 0x5c
     95c:	a914      	add	r1, sp, #80	; 0x50
     95e:	4b9f      	ldr	r3, [pc, #636]	; (bdc <main+0x384>)
     960:	4798      	blx	r3
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
     962:	a817      	add	r0, sp, #92	; 0x5c
     964:	2101      	movs	r1, #1
     966:	4b9e      	ldr	r3, [pc, #632]	; (be0 <main+0x388>)
     968:	4798      	blx	r3
	configure_event_channel(&example_event);
	configure_event_user(&example_event);
	configure_event_interrupt(&example_event, &hook);
	
	//setup RTC
	configure_rtc_calendar();
     96a:	4b9e      	ldr	r3, [pc, #632]	; (be4 <main+0x38c>)
     96c:	4798      	blx	r3
	configure_rtc_callbacks();
     96e:	4b9e      	ldr	r3, [pc, #632]	; (be8 <main+0x390>)
     970:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
     972:	489e      	ldr	r0, [pc, #632]	; (bec <main+0x394>)
     974:	4b9e      	ldr	r3, [pc, #632]	; (bf0 <main+0x398>)
     976:	4798      	blx	r3
//! [can_init_setup]
static void configure_can(void)
{
	uint32_t i;
	/* Initialize the memory. */
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     978:	2300      	movs	r3, #0
		tx_message_0[i] = i;
     97a:	489e      	ldr	r0, [pc, #632]	; (bf4 <main+0x39c>)
		tx_message_1[i] = i + 0x80;
     97c:	499e      	ldr	r1, [pc, #632]	; (bf8 <main+0x3a0>)
static void configure_can(void)
{
	uint32_t i;
	/* Initialize the memory. */
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
		tx_message_0[i] = i;
     97e:	b2da      	uxtb	r2, r3
     980:	541a      	strb	r2, [r3, r0]
     982:	3a80      	subs	r2, #128	; 0x80
		tx_message_1[i] = i + 0x80;
     984:	545a      	strb	r2, [r3, r1]
//! [can_init_setup]
static void configure_can(void)
{
	uint32_t i;
	/* Initialize the memory. */
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
     986:	3301      	adds	r3, #1
     988:	2b08      	cmp	r3, #8
     98a:	d1f8      	bne.n	97e <main+0x126>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     98c:	ae01      	add	r6, sp, #4
     98e:	2400      	movs	r4, #0
     990:	7074      	strb	r4, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     992:	2501      	movs	r5, #1
     994:	70b5      	strb	r5, [r6, #2]
	config->powersave    = false;
     996:	70f4      	strb	r4, [r6, #3]
	}

	/* Set up the CAN TX/RX pins */
	struct system_pinmux_config pin_config;
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = CAN_TX_MUX_SETTING;
     998:	3b02      	subs	r3, #2
     99a:	4698      	mov	r8, r3
     99c:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
     99e:	2018      	movs	r0, #24
     9a0:	1c31      	adds	r1, r6, #0
     9a2:	4f96      	ldr	r7, [pc, #600]	; (bfc <main+0x3a4>)
     9a4:	47b8      	blx	r7
	pin_config.mux_position = CAN_RX_MUX_SETTING;
     9a6:	4643      	mov	r3, r8
     9a8:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
     9aa:	2019      	movs	r0, #25
     9ac:	1c31      	adds	r1, r6, #0
     9ae:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->clock_source = GCLK_GENERATOR_8;
     9b0:	aa02      	add	r2, sp, #8
     9b2:	2308      	movs	r3, #8
     9b4:	7013      	strb	r3, [r2, #0]
	config->run_in_standby = false;
     9b6:	7054      	strb	r4, [r2, #1]
	config->watchdog_configuration = 0x00;
     9b8:	7094      	strb	r4, [r2, #2]
	config->transmit_pause = true;
     9ba:	70d5      	strb	r5, [r2, #3]
	config->edge_filtering = true;
     9bc:	7115      	strb	r5, [r2, #4]
	config->protocol_exception_handling = true;
     9be:	7155      	strb	r5, [r2, #5]
	config->automatic_retransmission = true;
     9c0:	7195      	strb	r5, [r2, #6]
	config->clock_stop_request = false;
     9c2:	71d4      	strb	r4, [r2, #7]
	config->clock_stop_acknowledge = false;
     9c4:	7214      	strb	r4, [r2, #8]
	config->timestamp_prescaler = 0;
     9c6:	7254      	strb	r4, [r2, #9]
	config->timeout_period = 0xFFFF;
     9c8:	3b09      	subs	r3, #9
     9ca:	8153      	strh	r3, [r2, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
     9cc:	7314      	strb	r4, [r2, #12]
	config->timeout_enable = false;
     9ce:	7354      	strb	r4, [r2, #13]
	config->delay_compensation_offset = 0;
     9d0:	7394      	strb	r4, [r2, #14]
	config->delay_compensation_filter_window_length = 0;
     9d2:	73d4      	strb	r4, [r2, #15]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
     9d4:	3303      	adds	r3, #3
     9d6:	7413      	strb	r3, [r2, #16]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
     9d8:	7453      	strb	r3, [r2, #17]
	config->remote_frames_standard_reject = true;
     9da:	7495      	strb	r5, [r2, #18]
	config->remote_frames_extended_reject = true;
     9dc:	74d5      	strb	r5, [r2, #19]
	config->extended_id_mask = 0x1FFFFFFF;
     9de:	4b88      	ldr	r3, [pc, #544]	; (c00 <main+0x3a8>)
     9e0:	6153      	str	r3, [r2, #20]
	config->rx_fifo_0_overwrite = true;
     9e2:	7615      	strb	r5, [r2, #24]
	config->rx_fifo_0_watermark = 0;
     9e4:	7654      	strb	r4, [r2, #25]
	config->rx_fifo_1_overwrite = true;
     9e6:	7695      	strb	r5, [r2, #26]
	config->rx_fifo_1_watermark = 0;
     9e8:	76d4      	strb	r4, [r2, #27]
	config->tx_queue_mode = false;
     9ea:	7714      	strb	r4, [r2, #28]
	config->tx_event_fifo_watermark = 0;
     9ec:	7754      	strb	r4, [r2, #29]

	/* Initialize the module. */
	struct can_config config_can;
	can_get_config_defaults(&config_can);
	can_init(&can_instance, CAN_MODULE, &config_can);
     9ee:	4c85      	ldr	r4, [pc, #532]	; (c04 <main+0x3ac>)
     9f0:	1c20      	adds	r0, r4, #0
     9f2:	4985      	ldr	r1, [pc, #532]	; (c08 <main+0x3b0>)
     9f4:	4b85      	ldr	r3, [pc, #532]	; (c0c <main+0x3b4>)
     9f6:	4798      	blx	r3

	can_start(&can_instance);
     9f8:	1c20      	adds	r0, r4, #0
     9fa:	4b85      	ldr	r3, [pc, #532]	; (c10 <main+0x3b8>)
     9fc:	4798      	blx	r3
     9fe:	2280      	movs	r2, #128	; 0x80
     a00:	0212      	lsls	r2, r2, #8
     a02:	4b70      	ldr	r3, [pc, #448]	; (bc4 <main+0x36c>)
     a04:	601a      	str	r2, [r3, #0]
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     a06:	6822      	ldr	r2, [r4, #0]
     a08:	6d53      	ldr	r3, [r2, #84]	; 0x54
     a0a:	21c0      	movs	r1, #192	; 0xc0
     a0c:	0549      	lsls	r1, r1, #21
     a0e:	430b      	orrs	r3, r1
     a10:	6553      	str	r3, [r2, #84]	; 0x54


//! [user_menu]
static void display_menu(void)
{
	printf("Menu :\r\n"
     a12:	4880      	ldr	r0, [pc, #512]	; (c14 <main+0x3bc>)
     a14:	4b80      	ldr	r3, [pc, #512]	; (c18 <main+0x3c0>)
     a16:	4798      	blx	r3

//! [display_user_menu]
	display_menu();
//! [display_user_menu]

while (events_is_busy(&example_event)) {
     a18:	4c80      	ldr	r4, [pc, #512]	; (c1c <main+0x3c4>)
     a1a:	a817      	add	r0, sp, #92	; 0x5c
     a1c:	47a0      	blx	r4
     a1e:	2800      	cmp	r0, #0
     a20:	d1fb      	bne.n	a1a <main+0x1c2>
};


//! [main_loop]
	while(1) {
		scanf("%c", (char *)&key);
     a22:	4c7f      	ldr	r4, [pc, #508]	; (c20 <main+0x3c8>)
     a24:	4e7f      	ldr	r6, [pc, #508]	; (c24 <main+0x3cc>)

		switch (key) {
     a26:	4f80      	ldr	r7, [pc, #512]	; (c28 <main+0x3d0>)
};


//! [main_loop]
	while(1) {
		scanf("%c", (char *)&key);
     a28:	2567      	movs	r5, #103	; 0x67
     a2a:	446d      	add	r5, sp
     a2c:	1c20      	adds	r0, r4, #0
     a2e:	1c29      	adds	r1, r5, #0
     a30:	47b0      	blx	r6

		switch (key) {
     a32:	782b      	ldrb	r3, [r5, #0]
     a34:	3b30      	subs	r3, #48	; 0x30
     a36:	b2da      	uxtb	r2, r3
     a38:	2a38      	cmp	r2, #56	; 0x38
     a3a:	d8f5      	bhi.n	a28 <main+0x1d0>
     a3c:	0093      	lsls	r3, r2, #2
     a3e:	58fb      	ldr	r3, [r7, r3]
     a40:	469f      	mov	pc, r3


//! [user_menu]
static void display_menu(void)
{
	printf("Menu :\r\n"
     a42:	4874      	ldr	r0, [pc, #464]	; (c14 <main+0x3bc>)
     a44:	4b74      	ldr	r3, [pc, #464]	; (c18 <main+0x3c0>)
     a46:	4798      	blx	r3
     a48:	e7ee      	b.n	a28 <main+0x1d0>
		case 'h':
			display_menu();
			break;

		case '0':
			printf("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
     a4a:	4878      	ldr	r0, [pc, #480]	; (c2c <main+0x3d4>)
     a4c:	4b72      	ldr	r3, [pc, #456]	; (c18 <main+0x3c0>)
     a4e:	4798      	blx	r3
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void can_get_standard_message_filter_element_default(
		struct can_standard_message_filter_element *sd_filter)
{
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
     a50:	4b77      	ldr	r3, [pc, #476]	; (c30 <main+0x3d8>)
     a52:	9302      	str	r3, [sp, #8]
static void can_set_standard_filter_0(void)
{
	struct can_standard_message_filter_element sd_filter;

	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID2 = CAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX;
     a54:	9b02      	ldr	r3, [sp, #8]
     a56:	0adb      	lsrs	r3, r3, #11
     a58:	02db      	lsls	r3, r3, #11
     a5a:	2202      	movs	r2, #2
     a5c:	4313      	orrs	r3, r2
     a5e:	9302      	str	r3, [sp, #8]
	sd_filter.S0.bit.SFID1 = CAN_RX_STANDARD_FILTER_ID_0;
     a60:	9a02      	ldr	r2, [sp, #8]
     a62:	4b74      	ldr	r3, [pc, #464]	; (c34 <main+0x3dc>)
     a64:	4013      	ands	r3, r2
     a66:	4a74      	ldr	r2, [pc, #464]	; (c38 <main+0x3e0>)
     a68:	4313      	orrs	r3, r2
     a6a:	9302      	str	r3, [sp, #8]
	sd_filter.S0.bit.SFEC =
     a6c:	9b02      	ldr	r3, [sp, #8]
     a6e:	22e0      	movs	r2, #224	; 0xe0
     a70:	0592      	lsls	r2, r2, #22
     a72:	4313      	orrs	r3, r2
     a74:	9302      	str	r3, [sp, #8]
			CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STRXBUF_Val;

	can_set_rx_standand_filter(&can_instance, &sd_filter,
     a76:	4d63      	ldr	r5, [pc, #396]	; (c04 <main+0x3ac>)
     a78:	1c28      	adds	r0, r5, #0
     a7a:	a902      	add	r1, sp, #8
     a7c:	2200      	movs	r2, #0
     a7e:	4b6f      	ldr	r3, [pc, #444]	; (c3c <main+0x3e4>)
     a80:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     a82:	682a      	ldr	r2, [r5, #0]
     a84:	6d53      	ldr	r3, [r2, #84]	; 0x54
     a86:	2180      	movs	r1, #128	; 0x80
     a88:	0309      	lsls	r1, r1, #12
     a8a:	430b      	orrs	r3, r1
     a8c:	6553      	str	r3, [r2, #84]	; 0x54
     a8e:	e7cb      	b.n	a28 <main+0x1d0>
			printf("  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
			can_set_standard_filter_0();
			break;

		case '1':
			printf("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
     a90:	486b      	ldr	r0, [pc, #428]	; (c40 <main+0x3e8>)
     a92:	4b61      	ldr	r3, [pc, #388]	; (c18 <main+0x3c0>)
     a94:	4798      	blx	r3
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void can_get_standard_message_filter_element_default(
		struct can_standard_message_filter_element *sd_filter)
{
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
     a96:	4b66      	ldr	r3, [pc, #408]	; (c30 <main+0x3d8>)
     a98:	9302      	str	r3, [sp, #8]
static void can_set_standard_filter_1(void)
{
	struct can_standard_message_filter_element sd_filter;

	can_get_standard_message_filter_element_default(&sd_filter);
	sd_filter.S0.bit.SFID1 = CAN_RX_STANDARD_FILTER_ID_1;
     a9a:	9a02      	ldr	r2, [sp, #8]
     a9c:	4b65      	ldr	r3, [pc, #404]	; (c34 <main+0x3dc>)
     a9e:	4013      	ands	r3, r2
     aa0:	4a68      	ldr	r2, [pc, #416]	; (c44 <main+0x3ec>)
     aa2:	4313      	orrs	r3, r2
     aa4:	9302      	str	r3, [sp, #8]

	can_set_rx_standand_filter(&can_instance, &sd_filter,
     aa6:	4d57      	ldr	r5, [pc, #348]	; (c04 <main+0x3ac>)
     aa8:	1c28      	adds	r0, r5, #0
     aaa:	a902      	add	r1, sp, #8
     aac:	2201      	movs	r2, #1
     aae:	4b63      	ldr	r3, [pc, #396]	; (c3c <main+0x3e4>)
     ab0:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     ab2:	682a      	ldr	r2, [r5, #0]
     ab4:	6d51      	ldr	r1, [r2, #84]	; 0x54
     ab6:	2301      	movs	r3, #1
     ab8:	430b      	orrs	r3, r1
     aba:	6553      	str	r3, [r2, #84]	; 0x54
     abc:	e7b4      	b.n	a28 <main+0x1d0>
			printf("  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
			can_set_standard_filter_1();
			break;

		case '2':
			printf("  2: Send standard message with ID: 0x45A and 4 byte data 0 to 3. \r\n");
     abe:	4862      	ldr	r0, [pc, #392]	; (c48 <main+0x3f0>)
     ac0:	4b55      	ldr	r3, [pc, #340]	; (c18 <main+0x3c0>)
     ac2:	4798      	blx	r3
			can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_0, tx_message_0,
     ac4:	4861      	ldr	r0, [pc, #388]	; (c4c <main+0x3f4>)
     ac6:	494b      	ldr	r1, [pc, #300]	; (bf4 <main+0x39c>)
     ac8:	2204      	movs	r2, #4
     aca:	4b61      	ldr	r3, [pc, #388]	; (c50 <main+0x3f8>)
     acc:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE / 2);
			break;
     ace:	e7ab      	b.n	a28 <main+0x1d0>

		case '3':
			printf("  3: Send standard message with ID: 0x469 and 4 byte data 128 to 131. \r\n");
     ad0:	4860      	ldr	r0, [pc, #384]	; (c54 <main+0x3fc>)
     ad2:	4b51      	ldr	r3, [pc, #324]	; (c18 <main+0x3c0>)
     ad4:	4798      	blx	r3
			can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_1, tx_message_1,
     ad6:	4860      	ldr	r0, [pc, #384]	; (c58 <main+0x400>)
     ad8:	4947      	ldr	r1, [pc, #284]	; (bf8 <main+0x3a0>)
     ada:	2204      	movs	r2, #4
     adc:	4b5c      	ldr	r3, [pc, #368]	; (c50 <main+0x3f8>)
     ade:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE / 2);
			break;
     ae0:	e7a2      	b.n	a28 <main+0x1d0>

		case '4':
			printf("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
     ae2:	485e      	ldr	r0, [pc, #376]	; (c5c <main+0x404>)
     ae4:	4b4c      	ldr	r3, [pc, #304]	; (c18 <main+0x3c0>)
     ae6:	4798      	blx	r3
 * \param[out] et_filter  Pointer to extended filter element struct to initialize to default values
 */
static inline void can_get_extended_message_filter_element_default(
		struct can_extended_message_filter_element *et_filter)
{
	et_filter->F0.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
     ae8:	2380      	movs	r3, #128	; 0x80
     aea:	05db      	lsls	r3, r3, #23
     aec:	9302      	str	r3, [sp, #8]
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC(
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val);
	et_filter->F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
     aee:	4b5c      	ldr	r3, [pc, #368]	; (c60 <main+0x408>)
     af0:	9303      	str	r3, [sp, #12]
static void can_set_extended_filter_0(void)
{
	struct can_extended_message_filter_element et_filter;

	can_get_extended_message_filter_element_default(&et_filter);
	et_filter.F0.bit.EFID1 = CAN_RX_EXTENDED_FILTER_ID_0;
     af2:	9b02      	ldr	r3, [sp, #8]
     af4:	0f5b      	lsrs	r3, r3, #29
     af6:	075b      	lsls	r3, r3, #29
     af8:	4a5a      	ldr	r2, [pc, #360]	; (c64 <main+0x40c>)
     afa:	4313      	orrs	r3, r2
     afc:	9302      	str	r3, [sp, #8]
	et_filter.F0.bit.EFEC =
     afe:	9b02      	ldr	r3, [sp, #8]
     b00:	22e0      	movs	r2, #224	; 0xe0
     b02:	0612      	lsls	r2, r2, #24
     b04:	4313      	orrs	r3, r2
     b06:	9302      	str	r3, [sp, #8]
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STRXBUF_Val;
	et_filter.F1.bit.EFID2 = CAN_RX_EXTENDED_FILTER_ID_0_BUFFER_INDEX;
     b08:	9b03      	ldr	r3, [sp, #12]
     b0a:	0f5b      	lsrs	r3, r3, #29
     b0c:	075b      	lsls	r3, r3, #29
     b0e:	2201      	movs	r2, #1
     b10:	4313      	orrs	r3, r2
     b12:	9303      	str	r3, [sp, #12]

	can_set_rx_extended_filter(&can_instance, &et_filter,
     b14:	4d3b      	ldr	r5, [pc, #236]	; (c04 <main+0x3ac>)
     b16:	1c28      	adds	r0, r5, #0
     b18:	a902      	add	r1, sp, #8
     b1a:	2200      	movs	r2, #0
     b1c:	4b52      	ldr	r3, [pc, #328]	; (c68 <main+0x410>)
     b1e:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     b20:	682a      	ldr	r2, [r5, #0]
     b22:	6d53      	ldr	r3, [r2, #84]	; 0x54
     b24:	2180      	movs	r1, #128	; 0x80
     b26:	0309      	lsls	r1, r1, #12
     b28:	430b      	orrs	r3, r1
     b2a:	6553      	str	r3, [r2, #84]	; 0x54
     b2c:	e77c      	b.n	a28 <main+0x1d0>
			printf("  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
			can_set_extended_filter_0();
			break;

		case '5':
			printf("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
     b2e:	484f      	ldr	r0, [pc, #316]	; (c6c <main+0x414>)
     b30:	4b39      	ldr	r3, [pc, #228]	; (c18 <main+0x3c0>)
     b32:	4798      	blx	r3
 * \param[out] et_filter  Pointer to extended filter element struct to initialize to default values
 */
static inline void can_get_extended_message_filter_element_default(
		struct can_extended_message_filter_element *et_filter)
{
	et_filter->F0.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
     b34:	2380      	movs	r3, #128	; 0x80
     b36:	05db      	lsls	r3, r3, #23
     b38:	9302      	str	r3, [sp, #8]
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC(
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val);
	et_filter->F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
     b3a:	4b49      	ldr	r3, [pc, #292]	; (c60 <main+0x408>)
     b3c:	9303      	str	r3, [sp, #12]
static void can_set_extended_filter_1(void)
{
	struct can_extended_message_filter_element et_filter;

	can_get_extended_message_filter_element_default(&et_filter);
	et_filter.F0.bit.EFID1 = CAN_RX_EXTENDED_FILTER_ID_1;
     b3e:	9b02      	ldr	r3, [sp, #8]
     b40:	0f5b      	lsrs	r3, r3, #29
     b42:	075b      	lsls	r3, r3, #29
     b44:	4a4a      	ldr	r2, [pc, #296]	; (c70 <main+0x418>)
     b46:	4313      	orrs	r3, r2
     b48:	9302      	str	r3, [sp, #8]

	can_set_rx_extended_filter(&can_instance, &et_filter,
     b4a:	4d2e      	ldr	r5, [pc, #184]	; (c04 <main+0x3ac>)
     b4c:	1c28      	adds	r0, r5, #0
     b4e:	a902      	add	r1, sp, #8
     b50:	2201      	movs	r2, #1
     b52:	4b45      	ldr	r3, [pc, #276]	; (c68 <main+0x410>)
     b54:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
     b56:	682a      	ldr	r2, [r5, #0]
     b58:	6d51      	ldr	r1, [r2, #84]	; 0x54
     b5a:	2310      	movs	r3, #16
     b5c:	430b      	orrs	r3, r1
     b5e:	6553      	str	r3, [r2, #84]	; 0x54
     b60:	e762      	b.n	a28 <main+0x1d0>
			printf("  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
			can_set_extended_filter_1();
			break;

		case '6':
			printf("  6: Send extended message with ID: 0x100000A5 and 8 byte data 0 to 7. \r\n");
     b62:	4844      	ldr	r0, [pc, #272]	; (c74 <main+0x41c>)
     b64:	4b2c      	ldr	r3, [pc, #176]	; (c18 <main+0x3c0>)
     b66:	4798      	blx	r3
			can_send_extended_message(CAN_RX_EXTENDED_FILTER_ID_0, tx_message_0,
     b68:	483e      	ldr	r0, [pc, #248]	; (c64 <main+0x40c>)
     b6a:	4922      	ldr	r1, [pc, #136]	; (bf4 <main+0x39c>)
     b6c:	2208      	movs	r2, #8
     b6e:	4b42      	ldr	r3, [pc, #264]	; (c78 <main+0x420>)
     b70:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE);
			break;
     b72:	e759      	b.n	a28 <main+0x1d0>

		case '7':
			printf("  7: Send extended message with ID: 0x10000096 and 8 byte data 128 to 135. \r\n");
     b74:	4841      	ldr	r0, [pc, #260]	; (c7c <main+0x424>)
     b76:	4b28      	ldr	r3, [pc, #160]	; (c18 <main+0x3c0>)
     b78:	4798      	blx	r3
			can_send_extended_message(CAN_RX_EXTENDED_FILTER_ID_1, tx_message_1,
     b7a:	483d      	ldr	r0, [pc, #244]	; (c70 <main+0x418>)
     b7c:	491e      	ldr	r1, [pc, #120]	; (bf8 <main+0x3a0>)
     b7e:	2208      	movs	r2, #8
     b80:	4b3d      	ldr	r3, [pc, #244]	; (c78 <main+0x420>)
     b82:	4798      	blx	r3
					CONF_CAN_ELEMENT_DATA_SIZE);
			break;
     b84:	e750      	b.n	a28 <main+0x1d0>
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	00002749 	.word	0x00002749
     b8c:	20000014 	.word	0x20000014
     b90:	002a0003 	.word	0x002a0003
     b94:	002b0003 	.word	0x002b0003
     b98:	200000d4 	.word	0x200000d4
     b9c:	20000b50 	.word	0x20000b50
     ba0:	00000455 	.word	0x00000455
     ba4:	20000b4c 	.word	0x20000b4c
     ba8:	00000429 	.word	0x00000429
     bac:	20000b48 	.word	0x20000b48
     bb0:	42001400 	.word	0x42001400
     bb4:	00001a09 	.word	0x00001a09
     bb8:	20000078 	.word	0x20000078
     bbc:	00002c11 	.word	0x00002c11
     bc0:	0000197d 	.word	0x0000197d
     bc4:	e000e100 	.word	0xe000e100
     bc8:	00000e3d 	.word	0x00000e3d
     bcc:	00000e51 	.word	0x00000e51
     bd0:	00000f2d 	.word	0x00000f2d
     bd4:	000003a5 	.word	0x000003a5
     bd8:	00000cf9 	.word	0x00000cf9
     bdc:	00000d05 	.word	0x00000d05
     be0:	00000d39 	.word	0x00000d39
     be4:	0000079d 	.word	0x0000079d
     be8:	00000831 	.word	0x00000831
     bec:	20000ae0 	.word	0x20000ae0
     bf0:	0000011d 	.word	0x0000011d
     bf4:	200000bc 	.word	0x200000bc
     bf8:	200000c4 	.word	0x200000c4
     bfc:	00002719 	.word	0x00002719
     c00:	1fffffff 	.word	0x1fffffff
     c04:	200000d0 	.word	0x200000d0
     c08:	42001c00 	.word	0x42001c00
     c0c:	00001029 	.word	0x00001029
     c10:	00001319 	.word	0x00001319
     c14:	000049a8 	.word	0x000049a8
     c18:	00002bc9 	.word	0x00002bc9
     c1c:	00000f11 	.word	0x00000f11
     c20:	00004c04 	.word	0x00004c04
     c24:	00002bdd 	.word	0x00002bdd
     c28:	000046e8 	.word	0x000046e8
     c2c:	00004c08 	.word	0x00004c08
     c30:	880007ff 	.word	0x880007ff
     c34:	f800ffff 	.word	0xf800ffff
     c38:	045a0000 	.word	0x045a0000
     c3c:	00001331 	.word	0x00001331
     c40:	00004c48 	.word	0x00004c48
     c44:	04690000 	.word	0x04690000
     c48:	00004c88 	.word	0x00004c88
     c4c:	0000045a 	.word	0x0000045a
     c50:	0000046d 	.word	0x0000046d
     c54:	00004ccc 	.word	0x00004ccc
     c58:	00000469 	.word	0x00000469
     c5c:	00004d14 	.word	0x00004d14
     c60:	9fffffff 	.word	0x9fffffff
     c64:	100000a5 	.word	0x100000a5
     c68:	0000136d 	.word	0x0000136d
     c6c:	00004d58 	.word	0x00004d58
     c70:	10000096 	.word	0x10000096
     c74:	00004d9c 	.word	0x00004d9c
     c78:	000004d9 	.word	0x000004d9
     c7c:	00004de8 	.word	0x00004de8

00000c80 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     c80:	b5f0      	push	{r4, r5, r6, r7, lr}
     c82:	4647      	mov	r7, r8
     c84:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     c86:	0080      	lsls	r0, r0, #2
     c88:	4b0d      	ldr	r3, [pc, #52]	; (cc0 <_tcc_interrupt_handler+0x40>)
     c8a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     c8c:	683b      	ldr	r3, [r7, #0]
     c8e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c92:	401e      	ands	r6, r3
     c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c96:	401e      	ands	r6, r3
     c98:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     c9a:	4b0a      	ldr	r3, [pc, #40]	; (cc4 <_tcc_interrupt_handler+0x44>)
     c9c:	4698      	mov	r8, r3
     c9e:	4643      	mov	r3, r8
     ca0:	58e5      	ldr	r5, [r4, r3]
     ca2:	422e      	tst	r6, r5
     ca4:	d005      	beq.n	cb2 <_tcc_interrupt_handler+0x32>
     ca6:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     ca8:	685b      	ldr	r3, [r3, #4]
     caa:	1c38      	adds	r0, r7, #0
     cac:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     cae:	683b      	ldr	r3, [r7, #0]
     cb0:	62dd      	str	r5, [r3, #44]	; 0x2c
     cb2:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     cb4:	2c30      	cmp	r4, #48	; 0x30
     cb6:	d1f2      	bne.n	c9e <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     cb8:	bc04      	pop	{r2}
     cba:	4690      	mov	r8, r2
     cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	20000b20 	.word	0x20000b20
     cc4:	00004e38 	.word	0x00004e38

00000cc8 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     cc8:	b508      	push	{r3, lr}
     cca:	2000      	movs	r0, #0
     ccc:	4b01      	ldr	r3, [pc, #4]	; (cd4 <TCC0_Handler+0xc>)
     cce:	4798      	blx	r3
     cd0:	bd08      	pop	{r3, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00000c81 	.word	0x00000c81

00000cd8 <TCC1_Handler>:
     cd8:	b508      	push	{r3, lr}
     cda:	2001      	movs	r0, #1
     cdc:	4b01      	ldr	r3, [pc, #4]	; (ce4 <TCC1_Handler+0xc>)
     cde:	4798      	blx	r3
     ce0:	bd08      	pop	{r3, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	00000c81 	.word	0x00000c81

00000ce8 <TCC2_Handler>:
     ce8:	b508      	push	{r3, lr}
     cea:	2002      	movs	r0, #2
     cec:	4b01      	ldr	r3, [pc, #4]	; (cf4 <TCC2_Handler+0xc>)
     cee:	4798      	blx	r3
     cf0:	bd08      	pop	{r3, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	00000c81 	.word	0x00000c81

00000cf8 <events_create_hook>:
extern struct _events_module _events_inst;

enum status_code events_create_hook(struct events_hook *hook, events_interrupt_hook func)
{
	/* Initialize the hook struct members */
	hook->next      = NULL;
     cf8:	2300      	movs	r3, #0
     cfa:	6083      	str	r3, [r0, #8]
	hook->resource  = NULL;
     cfc:	6003      	str	r3, [r0, #0]
	hook->hook_func = func;
     cfe:	6041      	str	r1, [r0, #4]

	return STATUS_OK;
}
     d00:	2000      	movs	r0, #0
     d02:	4770      	bx	lr

00000d04 <events_add_hook>:
enum status_code events_add_hook(struct events_resource *resource, struct events_hook *hook)
{
	struct events_hook *tmp_hook = NULL;

	/* Associate the hook with the resource */
	hook->resource = resource;
     d04:	6008      	str	r0, [r1, #0]

	/* Check if this is the first hook in the list */
	if (_events_inst.hook_list == NULL) {
     d06:	4b0a      	ldr	r3, [pc, #40]	; (d30 <events_add_hook+0x2c>)
     d08:	691a      	ldr	r2, [r3, #16]
     d0a:	2a00      	cmp	r2, #0
     d0c:	d102      	bne.n	d14 <events_add_hook+0x10>
		_events_inst.hook_list = hook;
     d0e:	6119      	str	r1, [r3, #16]
     d10:	e004      	b.n	d1c <events_add_hook+0x18>
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
			tmp_hook = tmp_hook->next;
     d12:	1c1a      	adds	r2, r3, #0
		_events_inst.hook_list = hook;
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
     d14:	6893      	ldr	r3, [r2, #8]
     d16:	2b00      	cmp	r3, #0
     d18:	d1fb      	bne.n	d12 <events_add_hook+0xe>
			tmp_hook = tmp_hook->next;
		}

		/* Put the hook into the next free place in the list */
		tmp_hook->next = hook;
     d1a:	6091      	str	r1, [r2, #8]
 *
 */
static inline bool system_interrupt_is_enabled(
		const enum system_interrupt_vector vector)
{
	return (bool)((NVIC->ISER[0] >> (uint32_t)vector) & 0x00000001);
     d1c:	4b05      	ldr	r3, [pc, #20]	; (d34 <events_add_hook+0x30>)
     d1e:	681b      	ldr	r3, [r3, #0]
	}

	/* Check if interrupts from the EVSYS module is enabled in the interrupt controller */
	if (!system_interrupt_is_enabled(SYSTEM_INTERRUPT_MODULE_EVSYS)) {
     d20:	05db      	lsls	r3, r3, #23
     d22:	d403      	bmi.n	d2c <events_add_hook+0x28>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d24:	2280      	movs	r2, #128	; 0x80
     d26:	0052      	lsls	r2, r2, #1
     d28:	4b02      	ldr	r3, [pc, #8]	; (d34 <events_add_hook+0x30>)
     d2a:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EVSYS);
	}

	return STATUS_OK;
}
     d2c:	2000      	movs	r0, #0
     d2e:	4770      	bx	lr
     d30:	20000000 	.word	0x20000000
     d34:	e000e100 	.word	0xe000e100

00000d38 <events_enable_interrupt_source>:

	return STATUS_OK;
}

enum status_code events_enable_interrupt_source(struct events_resource *resource, enum events_interrupt_source source)
{
     d38:	b508      	push	{r3, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
     d3a:	2901      	cmp	r1, #1
     d3c:	d108      	bne.n	d50 <events_enable_interrupt_source+0x18>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     d3e:	7800      	ldrb	r0, [r0, #0]
     d40:	310f      	adds	r1, #15
     d42:	4b09      	ldr	r3, [pc, #36]	; (d68 <events_enable_interrupt_source+0x30>)
     d44:	4798      	blx	r3
     d46:	2384      	movs	r3, #132	; 0x84
     d48:	05db      	lsls	r3, r3, #23
     d4a:	6158      	str	r0, [r3, #20]
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d4c:	2300      	movs	r3, #0
     d4e:	e009      	b.n	d64 <events_enable_interrupt_source+0x2c>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     d50:	2317      	movs	r3, #23
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     d52:	2900      	cmp	r1, #0
     d54:	d106      	bne.n	d64 <events_enable_interrupt_source+0x2c>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     d56:	7800      	ldrb	r0, [r0, #0]
     d58:	4b03      	ldr	r3, [pc, #12]	; (d68 <events_enable_interrupt_source+0x30>)
     d5a:	4798      	blx	r3
     d5c:	2384      	movs	r3, #132	; 0x84
     d5e:	05db      	lsls	r3, r3, #23
     d60:	6158      	str	r0, [r3, #20]
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d62:	2300      	movs	r3, #0
}
     d64:	1c18      	adds	r0, r3, #0
     d66:	bd08      	pop	{r3, pc}
     d68:	00000e11 	.word	0x00000e11

00000d6c <events_is_interrupt_set>:
	return STATUS_OK;
}


bool events_is_interrupt_set(struct events_resource *resource, enum events_interrupt_source source)
{
     d6c:	b508      	push	{r3, lr}
     d6e:	1c03      	adds	r3, r0, #0
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     d70:	2901      	cmp	r1, #1
     d72:	d104      	bne.n	d7e <events_is_interrupt_set+0x12>
		bitpos = _events_find_bit_position(resource->channel,
     d74:	7800      	ldrb	r0, [r0, #0]
     d76:	310f      	adds	r1, #15
     d78:	4b07      	ldr	r3, [pc, #28]	; (d98 <events_is_interrupt_set+0x2c>)
     d7a:	4798      	blx	r3
     d7c:	e005      	b.n	d8a <events_is_interrupt_set+0x1e>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
     d7e:	2000      	movs	r0, #0
	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     d80:	2900      	cmp	r1, #0
     d82:	d108      	bne.n	d96 <events_is_interrupt_set+0x2a>
		bitpos = _events_find_bit_position(resource->channel,
     d84:	7818      	ldrb	r0, [r3, #0]
     d86:	4b04      	ldr	r3, [pc, #16]	; (d98 <events_is_interrupt_set+0x2c>)
     d88:	4798      	blx	r3
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
	}

	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
     d8a:	4b04      	ldr	r3, [pc, #16]	; (d9c <events_is_interrupt_set+0x30>)
     d8c:	689b      	ldr	r3, [r3, #8]
     d8e:	4018      	ands	r0, r3
     d90:	1e43      	subs	r3, r0, #1
     d92:	4198      	sbcs	r0, r3
     d94:	b2c0      	uxtb	r0, r0
}
     d96:	bd08      	pop	{r3, pc}
     d98:	00000e11 	.word	0x00000e11
     d9c:	20000000 	.word	0x20000000

00000da0 <events_ack_interrupt>:

enum status_code events_ack_interrupt(struct events_resource *resource, enum events_interrupt_source source)
{
     da0:	b508      	push	{r3, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     da2:	2901      	cmp	r1, #1
     da4:	d104      	bne.n	db0 <events_ack_interrupt+0x10>
		bitpos = _events_find_bit_position(resource->channel,
     da6:	7800      	ldrb	r0, [r0, #0]
     da8:	310f      	adds	r1, #15
     daa:	4b08      	ldr	r3, [pc, #32]	; (dcc <events_ack_interrupt+0x2c>)
     dac:	4798      	blx	r3
     dae:	e005      	b.n	dbc <events_ack_interrupt+0x1c>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     db0:	2317      	movs	r3, #23
	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     db2:	2900      	cmp	r1, #0
     db4:	d107      	bne.n	dc6 <events_ack_interrupt+0x26>
		bitpos = _events_find_bit_position(resource->channel,
     db6:	7800      	ldrb	r0, [r0, #0]
     db8:	4b04      	ldr	r3, [pc, #16]	; (dcc <events_ack_interrupt+0x2c>)
     dba:	4798      	blx	r3
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	_events_inst.interrupt_flag_ack_buffer |= bitpos;
     dbc:	4a04      	ldr	r2, [pc, #16]	; (dd0 <events_ack_interrupt+0x30>)
     dbe:	68d3      	ldr	r3, [r2, #12]
     dc0:	4318      	orrs	r0, r3
     dc2:	60d0      	str	r0, [r2, #12]

	return STATUS_OK;
     dc4:	2300      	movs	r3, #0
}
     dc6:	1c18      	adds	r0, r3, #0
     dc8:	bd08      	pop	{r3, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	00000e11 	.word	0x00000e11
     dd0:	20000000 	.word	0x20000000

00000dd4 <EVSYS_Handler>:

void EVSYS_Handler(void)
{
     dd4:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     dd6:	4b0c      	ldr	r3, [pc, #48]	; (e08 <EVSYS_Handler+0x34>)
     dd8:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     dda:	2184      	movs	r1, #132	; 0x84
     ddc:	05c9      	lsls	r1, r1, #23
     dde:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     de0:	6898      	ldr	r0, [r3, #8]
     de2:	4302      	orrs	r2, r0
     de4:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     de6:	4b09      	ldr	r3, [pc, #36]	; (e0c <EVSYS_Handler+0x38>)
     de8:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     dea:	2c00      	cmp	r4, #0
     dec:	d005      	beq.n	dfa <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     dee:	6820      	ldr	r0, [r4, #0]
     df0:	6863      	ldr	r3, [r4, #4]
     df2:	4798      	blx	r3
		current_hook = current_hook->next;
     df4:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
     df6:	2c00      	cmp	r4, #0
     df8:	d1f9      	bne.n	dee <EVSYS_Handler+0x1a>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     dfa:	4b03      	ldr	r3, [pc, #12]	; (e08 <EVSYS_Handler+0x34>)
     dfc:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     dfe:	689a      	ldr	r2, [r3, #8]
     e00:	438a      	bics	r2, r1
     e02:	609a      	str	r2, [r3, #8]
}
     e04:	bd10      	pop	{r4, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	20000000 	.word	0x20000000
     e0c:	0fff0fff 	.word	0x0fff0fff

00000e10 <_events_find_bit_position>:
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	pos = 0x01UL << (start_offset + channel);
     e10:	1808      	adds	r0, r1, r0
     e12:	2301      	movs	r3, #1
     e14:	4083      	lsls	r3, r0
     e16:	1c18      	adds	r0, r3, #0

	return pos;
}
     e18:	4770      	bx	lr
     e1a:	46c0      	nop			; (mov r8, r8)

00000e1c <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     e1c:	4906      	ldr	r1, [pc, #24]	; (e38 <_system_events_init+0x1c>)
     e1e:	69cb      	ldr	r3, [r1, #28]
     e20:	2201      	movs	r2, #1
     e22:	4313      	orrs	r3, r2
     e24:	61cb      	str	r3, [r1, #28]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     e26:	2384      	movs	r3, #132	; 0x84
     e28:	05db      	lsls	r3, r3, #23
     e2a:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     e2c:	1c19      	adds	r1, r3, #0
     e2e:	780b      	ldrb	r3, [r1, #0]
     e30:	4213      	tst	r3, r2
     e32:	d1fc      	bne.n	e2e <_system_events_init+0x12>
	}
}
     e34:	4770      	bx	lr
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	40000800 	.word	0x40000800

00000e3c <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     e3c:	2301      	movs	r3, #1
     e3e:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     e40:	2300      	movs	r3, #0
     e42:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     e44:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     e46:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     e48:	7103      	strb	r3, [r0, #4]
	config->on_demand    = false;
     e4a:	7143      	strb	r3, [r0, #5]
}
     e4c:	4770      	bx	lr
     e4e:	46c0      	nop			; (mov r8, r8)

00000e50 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     e50:	b570      	push	{r4, r5, r6, lr}
     e52:	b082      	sub	sp, #8
     e54:	1c06      	adds	r6, r0, #0
     e56:	1c0d      	adds	r5, r1, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e58:	4b28      	ldr	r3, [pc, #160]	; (efc <events_allocate+0xac>)
     e5a:	4798      	blx	r3
	uint32_t tmp;
	bool allocated = false;

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;
     e5c:	4b28      	ldr	r3, [pc, #160]	; (f00 <events_allocate+0xb0>)
     e5e:	681b      	ldr	r3, [r3, #0]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {

		if(!(tmp & 0x00000001)) {
     e60:	07da      	lsls	r2, r3, #31
     e62:	d444      	bmi.n	eee <events_allocate+0x9e>
     e64:	e002      	b.n	e6c <events_allocate+0x1c>
     e66:	421a      	tst	r2, r3
     e68:	d110      	bne.n	e8c <events_allocate+0x3c>
     e6a:	e000      	b.n	e6e <events_allocate+0x1e>

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     e6c:	2400      	movs	r4, #0

		if(!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
     e6e:	4b24      	ldr	r3, [pc, #144]	; (f00 <events_allocate+0xb0>)
     e70:	6819      	ldr	r1, [r3, #0]
     e72:	2201      	movs	r2, #1
     e74:	40a2      	lsls	r2, r4
     e76:	430a      	orrs	r2, r1
     e78:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
     e7a:	791a      	ldrb	r2, [r3, #4]
     e7c:	3a01      	subs	r2, #1
     e7e:	711a      	strb	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e80:	4b20      	ldr	r3, [pc, #128]	; (f04 <events_allocate+0xb4>)
     e82:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     e84:	2014      	movs	r0, #20

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
     e86:	2cff      	cmp	r4, #255	; 0xff
     e88:	d106      	bne.n	e98 <events_allocate+0x48>
     e8a:	e034      	b.n	ef6 <events_allocate+0xa6>

			break;

		}

		tmp = tmp >> 1;
     e8c:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     e8e:	3401      	adds	r4, #1
     e90:	b2e4      	uxtb	r4, r4
     e92:	2c0c      	cmp	r4, #12
     e94:	d1e7      	bne.n	e66 <events_allocate+0x16>
     e96:	e026      	b.n	ee6 <events_allocate+0x96>

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
	}

	resource->channel = new_channel;
     e98:	7034      	strb	r4, [r6, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     e9a:	786b      	ldrb	r3, [r5, #1]
     e9c:	2b02      	cmp	r3, #2
     e9e:	d00a      	beq.n	eb6 <events_allocate+0x66>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator =
     ea0:	a901      	add	r1, sp, #4
     ea2:	78eb      	ldrb	r3, [r5, #3]
     ea4:	700b      	strb	r3, [r1, #0]
				(enum gclk_generator)config->clock_source;
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     ea6:	3406      	adds	r4, #6
     ea8:	b2e4      	uxtb	r4, r4
     eaa:	1c20      	adds	r0, r4, #0
     eac:	4b16      	ldr	r3, [pc, #88]	; (f08 <events_allocate+0xb8>)
     eae:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     eb0:	1c20      	adds	r0, r4, #0
     eb2:	4b16      	ldr	r3, [pc, #88]	; (f0c <events_allocate+0xbc>)
     eb4:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     eb6:	7928      	ldrb	r0, [r5, #4]
     eb8:	0380      	lsls	r0, r0, #14
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
     eba:	78aa      	ldrb	r2, [r5, #2]
     ebc:	217f      	movs	r1, #127	; 0x7f
     ebe:	4011      	ands	r1, r2
     ec0:	4301      	orrs	r1, r0
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
     ec2:	796a      	ldrb	r2, [r5, #5]
     ec4:	03d2      	lsls	r2, r2, #15
     ec6:	4311      	orrs	r1, r2
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
			EVSYS_CHANNEL_PATH(config->path)                                 |
     ec8:	786b      	ldrb	r3, [r5, #1]
     eca:	021b      	lsls	r3, r3, #8
     ecc:	22c0      	movs	r2, #192	; 0xc0
     ece:	0092      	lsls	r2, r2, #2
     ed0:	4013      	ands	r3, r2
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     ed2:	4319      	orrs	r1, r3
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     ed4:	782b      	ldrb	r3, [r5, #0]
     ed6:	029b      	lsls	r3, r3, #10
     ed8:	22c0      	movs	r2, #192	; 0xc0
     eda:	0112      	lsls	r2, r2, #4
     edc:	4013      	ands	r3, r2

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
     ede:	430b      	orrs	r3, r1
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
     ee0:	6073      	str	r3, [r6, #4]
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
     ee2:	2000      	movs	r0, #0
     ee4:	e007      	b.n	ef6 <events_allocate+0xa6>
     ee6:	4b07      	ldr	r3, [pc, #28]	; (f04 <events_allocate+0xb4>)
     ee8:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     eea:	2014      	movs	r0, #20
     eec:	e003      	b.n	ef6 <events_allocate+0xa6>

			break;

		}

		tmp = tmp >> 1;
     eee:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     ef0:	2401      	movs	r4, #1

		if(!(tmp & 0x00000001)) {
     ef2:	2201      	movs	r2, #1
     ef4:	e7b7      	b.n	e66 <events_allocate+0x16>
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
}
     ef6:	b002      	add	sp, #8
     ef8:	bd70      	pop	{r4, r5, r6, pc}
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	00000f4d 	.word	0x00000f4d
     f00:	20000000 	.word	0x20000000
     f04:	00000f8d 	.word	0x00000f8d
     f08:	0000261d 	.word	0x0000261d
     f0c:	000025b5 	.word	0x000025b5

00000f10 <events_is_busy>:

bool events_is_busy(struct events_resource *resource)
{
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
     f10:	2384      	movs	r3, #132	; 0x84
     f12:	05db      	lsls	r3, r3, #23
     f14:	68d9      	ldr	r1, [r3, #12]
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	pos = 0x01UL << (start_offset + channel);
     f16:	7802      	ldrb	r2, [r0, #0]
     f18:	3210      	adds	r2, #16
     f1a:	2301      	movs	r3, #1
     f1c:	4093      	lsls	r3, r2
     f1e:	1c18      	adds	r0, r3, #0

bool events_is_busy(struct events_resource *resource)
{
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
     f20:	4008      	ands	r0, r1
     f22:	1e43      	subs	r3, r0, #1
     f24:	4198      	sbcs	r0, r3
     f26:	b2c0      	uxtb	r0, r0
			_EVENTS_START_OFFSET_BUSY_BITS));
}
     f28:	4770      	bx	lr
     f2a:	46c0      	nop			; (mov r8, r8)

00000f2c <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER[user_id].reg = EVSYS_USER_CHANNEL(resource->channel + 1);
     f2c:	7803      	ldrb	r3, [r0, #0]
     f2e:	3301      	adds	r3, #1
     f30:	221f      	movs	r2, #31
     f32:	4013      	ands	r3, r2
     f34:	2284      	movs	r2, #132	; 0x84
     f36:	05d2      	lsls	r2, r2, #23
     f38:	3120      	adds	r1, #32
     f3a:	0089      	lsls	r1, r1, #2
     f3c:	508b      	str	r3, [r1, r2]

	/* Then configure the channel */
	EVSYS->CHANNEL[resource->channel].reg = resource->channel_reg;
     f3e:	7803      	ldrb	r3, [r0, #0]
     f40:	6841      	ldr	r1, [r0, #4]
     f42:	3308      	adds	r3, #8
     f44:	009b      	lsls	r3, r3, #2
     f46:	5099      	str	r1, [r3, r2]

	return STATUS_OK;
}
     f48:	2000      	movs	r0, #0
     f4a:	4770      	bx	lr

00000f4c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f4c:	4b0c      	ldr	r3, [pc, #48]	; (f80 <cpu_irq_enter_critical+0x34>)
     f4e:	681b      	ldr	r3, [r3, #0]
     f50:	2b00      	cmp	r3, #0
     f52:	d110      	bne.n	f76 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f54:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f58:	2b00      	cmp	r3, #0
     f5a:	d109      	bne.n	f70 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     f5c:	b672      	cpsid	i
     f5e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f62:	2200      	movs	r2, #0
     f64:	4b07      	ldr	r3, [pc, #28]	; (f84 <cpu_irq_enter_critical+0x38>)
     f66:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f68:	3201      	adds	r2, #1
     f6a:	4b07      	ldr	r3, [pc, #28]	; (f88 <cpu_irq_enter_critical+0x3c>)
     f6c:	701a      	strb	r2, [r3, #0]
     f6e:	e002      	b.n	f76 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f70:	2200      	movs	r2, #0
     f72:	4b05      	ldr	r3, [pc, #20]	; (f88 <cpu_irq_enter_critical+0x3c>)
     f74:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f76:	4a02      	ldr	r2, [pc, #8]	; (f80 <cpu_irq_enter_critical+0x34>)
     f78:	6813      	ldr	r3, [r2, #0]
     f7a:	3301      	adds	r3, #1
     f7c:	6013      	str	r3, [r2, #0]
}
     f7e:	4770      	bx	lr
     f80:	20000120 	.word	0x20000120
     f84:	20000014 	.word	0x20000014
     f88:	20000124 	.word	0x20000124

00000f8c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f8c:	4b08      	ldr	r3, [pc, #32]	; (fb0 <cpu_irq_leave_critical+0x24>)
     f8e:	681a      	ldr	r2, [r3, #0]
     f90:	3a01      	subs	r2, #1
     f92:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	2b00      	cmp	r3, #0
     f98:	d109      	bne.n	fae <cpu_irq_leave_critical+0x22>
     f9a:	4b06      	ldr	r3, [pc, #24]	; (fb4 <cpu_irq_leave_critical+0x28>)
     f9c:	781b      	ldrb	r3, [r3, #0]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d005      	beq.n	fae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     fa2:	2201      	movs	r2, #1
     fa4:	4b04      	ldr	r3, [pc, #16]	; (fb8 <cpu_irq_leave_critical+0x2c>)
     fa6:	701a      	strb	r2, [r3, #0]
     fa8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     fac:	b662      	cpsie	i
	}
}
     fae:	4770      	bx	lr
     fb0:	20000120 	.word	0x20000120
     fb4:	20000124 	.word	0x20000124
     fb8:	20000014 	.word	0x20000014

00000fbc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
     fbe:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     fc0:	ac01      	add	r4, sp, #4
     fc2:	2501      	movs	r5, #1
     fc4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     fc6:	2700      	movs	r7, #0
     fc8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     fca:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     fcc:	200f      	movs	r0, #15
     fce:	1c21      	adds	r1, r4, #0
     fd0:	4e06      	ldr	r6, [pc, #24]	; (fec <system_board_init+0x30>)
     fd2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     fd4:	2280      	movs	r2, #128	; 0x80
     fd6:	0212      	lsls	r2, r2, #8
     fd8:	2382      	movs	r3, #130	; 0x82
     fda:	05db      	lsls	r3, r3, #23
     fdc:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     fde:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     fe0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     fe2:	201c      	movs	r0, #28
     fe4:	1c21      	adds	r1, r4, #0
     fe6:	47b0      	blx	r6
}
     fe8:	b003      	add	sp, #12
     fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fec:	00001515 	.word	0x00001515

00000ff0 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
     ff0:	6803      	ldr	r3, [r0, #0]
     ff2:	4a0a      	ldr	r2, [pc, #40]	; (101c <_can_enable_peripheral_clock+0x2c>)
     ff4:	4293      	cmp	r3, r2
     ff6:	d106      	bne.n	1006 <_can_enable_peripheral_clock+0x16>
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
     ff8:	4a09      	ldr	r2, [pc, #36]	; (1020 <_can_enable_peripheral_clock+0x30>)
     ffa:	6913      	ldr	r3, [r2, #16]
     ffc:	2180      	movs	r1, #128	; 0x80
     ffe:	0049      	lsls	r1, r1, #1
    1000:	430b      	orrs	r3, r1
    1002:	6113      	str	r3, [r2, #16]
    1004:	e008      	b.n	1018 <_can_enable_peripheral_clock+0x28>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
    1006:	4a07      	ldr	r2, [pc, #28]	; (1024 <_can_enable_peripheral_clock+0x34>)
    1008:	4293      	cmp	r3, r2
    100a:	d105      	bne.n	1018 <_can_enable_peripheral_clock+0x28>
    100c:	4a04      	ldr	r2, [pc, #16]	; (1020 <_can_enable_peripheral_clock+0x30>)
    100e:	6913      	ldr	r3, [r2, #16]
    1010:	2180      	movs	r1, #128	; 0x80
    1012:	0089      	lsls	r1, r1, #2
    1014:	430b      	orrs	r3, r1
    1016:	6113      	str	r3, [r2, #16]
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
    1018:	4770      	bx	lr
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	42001c00 	.word	0x42001c00
    1020:	40000800 	.word	0x40000800
    1024:	42002000 	.word	0x42002000

00001028 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
    1028:	b538      	push	{r3, r4, r5, lr}
    102a:	1c0c      	adds	r4, r1, #0
    102c:	1c15      	adds	r5, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    102e:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
    1030:	4ba2      	ldr	r3, [pc, #648]	; (12bc <can_init+0x294>)
    1032:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1034:	4ba2      	ldr	r3, [pc, #648]	; (12c0 <can_init+0x298>)
    1036:	2200      	movs	r2, #0
    1038:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    103a:	782a      	ldrb	r2, [r5, #0]
    103c:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
    103e:	4ba1      	ldr	r3, [pc, #644]	; (12c4 <can_init+0x29c>)
    1040:	429c      	cmp	r4, r3
    1042:	d13d      	bne.n	10c0 <can_init+0x98>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
    1044:	201a      	movs	r0, #26
    1046:	499e      	ldr	r1, [pc, #632]	; (12c0 <can_init+0x298>)
    1048:	4b9f      	ldr	r3, [pc, #636]	; (12c8 <can_init+0x2a0>)
    104a:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    104c:	201a      	movs	r0, #26
    104e:	4b9f      	ldr	r3, [pc, #636]	; (12cc <can_init+0x2a4>)
    1050:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1052:	4b9c      	ldr	r3, [pc, #624]	; (12c4 <can_init+0x29c>)
    1054:	6999      	ldr	r1, [r3, #24]
    1056:	2202      	movs	r2, #2
    1058:	430a      	orrs	r2, r1
    105a:	619a      	str	r2, [r3, #24]
static struct can_extended_message_filter_element can1_rx_extended_filter[CONF_CAN1_RX_EXTENDED_ID_FILTER_NUM];

static void _can_message_memory_init(Can *hw)
{
	if (hw == CAN0) {
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    105c:	4a9c      	ldr	r2, [pc, #624]	; (12d0 <can_init+0x2a8>)
    105e:	0412      	lsls	r2, r2, #16
    1060:	0c12      	lsrs	r2, r2, #16
    1062:	2180      	movs	r1, #128	; 0x80
    1064:	0389      	lsls	r1, r1, #14
    1066:	430a      	orrs	r2, r1
    1068:	2184      	movs	r1, #132	; 0x84
    106a:	505a      	str	r2, [r3, r1]
				CAN_SIDFC_LSS(CONF_CAN0_RX_STANDARD_ID_FILTER_NUM);
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    106c:	4a99      	ldr	r2, [pc, #612]	; (12d4 <can_init+0x2ac>)
    106e:	0412      	lsls	r2, r2, #16
    1070:	0c12      	lsrs	r2, r2, #16
    1072:	2080      	movs	r0, #128	; 0x80
    1074:	0340      	lsls	r0, r0, #13
    1076:	4302      	orrs	r2, r0
    1078:	3104      	adds	r1, #4
    107a:	505a      	str	r2, [r3, r1]
				CAN_XIDFC_LSE(CONF_CAN0_RX_EXTENDED_ID_FILTER_NUM);
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    107c:	4996      	ldr	r1, [pc, #600]	; (12d8 <can_init+0x2b0>)
    107e:	0409      	lsls	r1, r1, #16
    1080:	0c09      	lsrs	r1, r1, #16
    1082:	4301      	orrs	r1, r0
    1084:	22a0      	movs	r2, #160	; 0xa0
    1086:	5099      	str	r1, [r3, r2]
				CAN_RXF0C_F0S(CONF_CAN0_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    1088:	4994      	ldr	r1, [pc, #592]	; (12dc <can_init+0x2b4>)
    108a:	0409      	lsls	r1, r1, #16
    108c:	0c09      	lsrs	r1, r1, #16
    108e:	4301      	orrs	r1, r0
    1090:	3210      	adds	r2, #16
    1092:	5099      	str	r1, [r3, r2]
				CAN_RXF1C_F1S(CONF_CAN0_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer) |
    1094:	4a92      	ldr	r2, [pc, #584]	; (12e0 <can_init+0x2b8>)
    1096:	0412      	lsls	r2, r2, #16
    1098:	0c12      	lsrs	r2, r2, #16
    109a:	4302      	orrs	r2, r0
    109c:	21ac      	movs	r1, #172	; 0xac
    109e:	505a      	str	r2, [r3, r1]
				CAN_RXF0C_F0S(CONF_CAN0_RX_BUFFER_NUM);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    10a0:	4a90      	ldr	r2, [pc, #576]	; (12e4 <can_init+0x2bc>)
    10a2:	0412      	lsls	r2, r2, #16
    10a4:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    10a6:	4990      	ldr	r1, [pc, #576]	; (12e8 <can_init+0x2c0>)
    10a8:	430a      	orrs	r2, r1
				CAN_RXF0C_F0S(CONF_CAN0_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
				CAN_RXF1C_F1S(CONF_CAN0_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer) |
				CAN_RXF0C_F0S(CONF_CAN0_RX_BUFFER_NUM);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    10aa:	21c0      	movs	r1, #192	; 0xc0
    10ac:	505a      	str	r2, [r3, r1]
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN0_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    10ae:	4a8f      	ldr	r2, [pc, #572]	; (12ec <can_init+0x2c4>)
    10b0:	0412      	lsls	r2, r2, #16
    10b2:	0c12      	lsrs	r2, r2, #16
    10b4:	2180      	movs	r1, #128	; 0x80
    10b6:	0309      	lsls	r1, r1, #12
    10b8:	430a      	orrs	r2, r1
    10ba:	21f0      	movs	r1, #240	; 0xf0
    10bc:	505a      	str	r2, [r3, r1]
    10be:	e040      	b.n	1142 <can_init+0x11a>
	gclk_chan_conf.source_generator = config->clock_source;

	if (hw == CAN0) {
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
    10c0:	4b8b      	ldr	r3, [pc, #556]	; (12f0 <can_init+0x2c8>)
    10c2:	429c      	cmp	r4, r3
    10c4:	d000      	beq.n	10c8 <can_init+0xa0>
    10c6:	e0f3      	b.n	12b0 <can_init+0x288>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    10c8:	201b      	movs	r0, #27
    10ca:	497d      	ldr	r1, [pc, #500]	; (12c0 <can_init+0x298>)
    10cc:	4b7e      	ldr	r3, [pc, #504]	; (12c8 <can_init+0x2a0>)
    10ce:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    10d0:	201b      	movs	r0, #27
    10d2:	4b7e      	ldr	r3, [pc, #504]	; (12cc <can_init+0x2a4>)
    10d4:	4798      	blx	r3
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    10d6:	4b86      	ldr	r3, [pc, #536]	; (12f0 <can_init+0x2c8>)
    10d8:	6999      	ldr	r1, [r3, #24]
    10da:	2202      	movs	r2, #2
    10dc:	430a      	orrs	r2, r1
    10de:	619a      	str	r2, [r3, #24]
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN0_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
				CAN_TXEFC_EFS(CONF_CAN0_TX_EVENT_FIFO);
	} else if (hw == CAN1) {
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    10e0:	4a84      	ldr	r2, [pc, #528]	; (12f4 <can_init+0x2cc>)
    10e2:	0412      	lsls	r2, r2, #16
    10e4:	0c12      	lsrs	r2, r2, #16
    10e6:	2180      	movs	r1, #128	; 0x80
    10e8:	0389      	lsls	r1, r1, #14
    10ea:	430a      	orrs	r2, r1
    10ec:	2184      	movs	r1, #132	; 0x84
    10ee:	505a      	str	r2, [r3, r1]
				CAN_SIDFC_LSS(CONF_CAN1_RX_STANDARD_ID_FILTER_NUM);
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    10f0:	4a81      	ldr	r2, [pc, #516]	; (12f8 <can_init+0x2d0>)
    10f2:	0412      	lsls	r2, r2, #16
    10f4:	0c12      	lsrs	r2, r2, #16
    10f6:	2080      	movs	r0, #128	; 0x80
    10f8:	0340      	lsls	r0, r0, #13
    10fa:	4302      	orrs	r2, r0
    10fc:	3104      	adds	r1, #4
    10fe:	505a      	str	r2, [r3, r1]
				CAN_XIDFC_LSE(CONF_CAN1_RX_EXTENDED_ID_FILTER_NUM);
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    1100:	497e      	ldr	r1, [pc, #504]	; (12fc <can_init+0x2d4>)
    1102:	0409      	lsls	r1, r1, #16
    1104:	0c09      	lsrs	r1, r1, #16
    1106:	4301      	orrs	r1, r0
    1108:	22a0      	movs	r2, #160	; 0xa0
    110a:	5099      	str	r1, [r3, r2]
				CAN_RXF0C_F0S(CONF_CAN1_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    110c:	497c      	ldr	r1, [pc, #496]	; (1300 <can_init+0x2d8>)
    110e:	0409      	lsls	r1, r1, #16
    1110:	0c09      	lsrs	r1, r1, #16
    1112:	4301      	orrs	r1, r0
    1114:	3210      	adds	r2, #16
    1116:	5099      	str	r1, [r3, r2]
				CAN_RXF1C_F1S(CONF_CAN1_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer) |
    1118:	4a7a      	ldr	r2, [pc, #488]	; (1304 <can_init+0x2dc>)
    111a:	0412      	lsls	r2, r2, #16
    111c:	0c12      	lsrs	r2, r2, #16
    111e:	4302      	orrs	r2, r0
    1120:	21ac      	movs	r1, #172	; 0xac
    1122:	505a      	str	r2, [r3, r1]
				CAN_RXF0C_F0S(CONF_CAN1_RX_BUFFER_NUM);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    1124:	4a78      	ldr	r2, [pc, #480]	; (1308 <can_init+0x2e0>)
    1126:	0412      	lsls	r2, r2, #16
    1128:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    112a:	496f      	ldr	r1, [pc, #444]	; (12e8 <can_init+0x2c0>)
    112c:	430a      	orrs	r2, r1
				CAN_RXF0C_F0S(CONF_CAN1_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
				CAN_RXF1C_F1S(CONF_CAN1_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer) |
				CAN_RXF0C_F0S(CONF_CAN1_RX_BUFFER_NUM);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    112e:	21c0      	movs	r1, #192	; 0xc0
    1130:	505a      	str	r2, [r3, r1]
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN1_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    1132:	4a76      	ldr	r2, [pc, #472]	; (130c <can_init+0x2e4>)
    1134:	0412      	lsls	r2, r2, #16
    1136:	0c12      	lsrs	r2, r2, #16
    1138:	2180      	movs	r1, #128	; 0x80
    113a:	0309      	lsls	r1, r1, #12
    113c:	430a      	orrs	r2, r1
    113e:	21f0      	movs	r1, #240	; 0xf0
    1140:	505a      	str	r2, [r3, r1]
	 * The corresponding setting value in register is 0/1//2/3/4/5/6/7.
	 * To simplify the calculation, seperate to two group 8/12/16/20/24 which
	 * increased with 4 and 32/48/64 which increased with 16.
	 */
	if (CONF_CAN_ELEMENT_DATA_SIZE <= 24) {
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
    1142:	2300      	movs	r3, #0
    1144:	22bc      	movs	r2, #188	; 0xbc
    1146:	50a3      	str	r3, [r4, r2]
				CAN_RXESC_F0DS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
				CAN_RXESC_F1DS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
    1148:	320c      	adds	r2, #12
    114a:	50a3      	str	r3, [r4, r2]
}

static void _can_set_configuration(Can *hw, struct can_config *config)
{
	/* Timing setting. */
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    114c:	4b70      	ldr	r3, [pc, #448]	; (1310 <can_init+0x2e8>)
    114e:	61e3      	str	r3, [r4, #28]
			CAN_NBTP_NSJW(CONF_CAN_NBTP_NSJW_VALUE) |
			CAN_NBTP_NTSEG1(CONF_CAN_NBTP_NTSEG1_VALUE) |
			CAN_NBTP_NTSEG2(CONF_CAN_NBTP_NTSEG2_VALUE);
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    1150:	4b70      	ldr	r3, [pc, #448]	; (1314 <can_init+0x2ec>)
    1152:	60e3      	str	r3, [r4, #12]
			CAN_DBTP_DSJW(CONF_CAN_DBTP_DSJW_VALUE) |
			CAN_DBTP_DTSEG1(CONF_CAN_DBTP_DTSEG1_VALUE) |
			CAN_DBTP_DTSEG2(CONF_CAN_DBTP_DTSEG2_VALUE);

	if (config->run_in_standby) {
    1154:	786b      	ldrb	r3, [r5, #1]
    1156:	2b00      	cmp	r3, #0
    1158:	d003      	beq.n	1162 <can_init+0x13a>
		hw->MRCFG.reg |= 0x01<<6;
    115a:	68a2      	ldr	r2, [r4, #8]
    115c:	2340      	movs	r3, #64	; 0x40
    115e:	4313      	orrs	r3, r2
    1160:	60a3      	str	r3, [r4, #8]
	}

	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    1162:	6963      	ldr	r3, [r4, #20]
    1164:	78aa      	ldrb	r2, [r5, #2]
    1166:	4313      	orrs	r3, r2
    1168:	6163      	str	r3, [r4, #20]

	if (config->transmit_pause) {
    116a:	78eb      	ldrb	r3, [r5, #3]
    116c:	2b00      	cmp	r3, #0
    116e:	d004      	beq.n	117a <can_init+0x152>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    1170:	69a3      	ldr	r3, [r4, #24]
    1172:	2280      	movs	r2, #128	; 0x80
    1174:	01d2      	lsls	r2, r2, #7
    1176:	4313      	orrs	r3, r2
    1178:	61a3      	str	r3, [r4, #24]
	}

	if (config->edge_filtering) {
    117a:	792b      	ldrb	r3, [r5, #4]
    117c:	2b00      	cmp	r3, #0
    117e:	d004      	beq.n	118a <can_init+0x162>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    1180:	69a3      	ldr	r3, [r4, #24]
    1182:	2280      	movs	r2, #128	; 0x80
    1184:	0192      	lsls	r2, r2, #6
    1186:	4313      	orrs	r3, r2
    1188:	61a3      	str	r3, [r4, #24]
	}

	if (config->protocol_exception_handling) {
    118a:	796b      	ldrb	r3, [r5, #5]
    118c:	2b00      	cmp	r3, #0
    118e:	d004      	beq.n	119a <can_init+0x172>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    1190:	69a3      	ldr	r3, [r4, #24]
    1192:	2280      	movs	r2, #128	; 0x80
    1194:	0152      	lsls	r2, r2, #5
    1196:	4313      	orrs	r3, r2
    1198:	61a3      	str	r3, [r4, #24]
	}

	if (!config->automatic_retransmission) {
    119a:	79ab      	ldrb	r3, [r5, #6]
    119c:	2b00      	cmp	r3, #0
    119e:	d103      	bne.n	11a8 <can_init+0x180>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    11a0:	69a2      	ldr	r2, [r4, #24]
    11a2:	3340      	adds	r3, #64	; 0x40
    11a4:	4313      	orrs	r3, r2
    11a6:	61a3      	str	r3, [r4, #24]
	}

	if (config->clock_stop_request) {
    11a8:	79eb      	ldrb	r3, [r5, #7]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d003      	beq.n	11b6 <can_init+0x18e>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    11ae:	69a2      	ldr	r2, [r4, #24]
    11b0:	2310      	movs	r3, #16
    11b2:	4313      	orrs	r3, r2
    11b4:	61a3      	str	r3, [r4, #24]
	}

	if (config->clock_stop_acknowledge) {
    11b6:	7a2b      	ldrb	r3, [r5, #8]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d003      	beq.n	11c4 <can_init+0x19c>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    11bc:	69a2      	ldr	r2, [r4, #24]
    11be:	2308      	movs	r3, #8
    11c0:	4313      	orrs	r3, r2
    11c2:	61a3      	str	r3, [r4, #24]
	}

	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    11c4:	7a6b      	ldrb	r3, [r5, #9]
    11c6:	041b      	lsls	r3, r3, #16
    11c8:	22f0      	movs	r2, #240	; 0xf0
    11ca:	0312      	lsls	r2, r2, #12
    11cc:	4013      	ands	r3, r2
    11ce:	2201      	movs	r2, #1
    11d0:	4313      	orrs	r3, r2
    11d2:	6223      	str	r3, [r4, #32]
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
			config->timeout_mode | config->timeout_enable;
    11d4:	7b6a      	ldrb	r2, [r5, #13]
	}

	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    11d6:	7b2b      	ldrb	r3, [r5, #12]
    11d8:	4313      	orrs	r3, r2
    11da:	896a      	ldrh	r2, [r5, #10]
    11dc:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
    11de:	4313      	orrs	r3, r2
	}

	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    11e0:	62a3      	str	r3, [r4, #40]	; 0x28
			config->timeout_mode | config->timeout_enable;

	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    11e2:	7bab      	ldrb	r3, [r5, #14]
    11e4:	021b      	lsls	r3, r3, #8
    11e6:	22fe      	movs	r2, #254	; 0xfe
    11e8:	01d2      	lsls	r2, r2, #7
    11ea:	4013      	ands	r3, r2
    11ec:	1c19      	adds	r1, r3, #0
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
    11ee:	7bea      	ldrb	r2, [r5, #15]
    11f0:	237f      	movs	r3, #127	; 0x7f
    11f2:	401a      	ands	r2, r3
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
			config->timeout_mode | config->timeout_enable;

	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    11f4:	1c0b      	adds	r3, r1, #0
    11f6:	4313      	orrs	r3, r2
    11f8:	64a3      	str	r3, [r4, #72]	; 0x48
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);

	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
    11fa:	7c6b      	ldrb	r3, [r5, #17]
    11fc:	009b      	lsls	r3, r3, #2
    11fe:	210c      	movs	r1, #12
    1200:	4019      	ands	r1, r3
			config->timeout_mode | config->timeout_enable;

	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);

	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    1202:	7c2a      	ldrb	r2, [r5, #16]
    1204:	0112      	lsls	r2, r2, #4
    1206:	2330      	movs	r3, #48	; 0x30
    1208:	4013      	ands	r3, r2
    120a:	430b      	orrs	r3, r1
    120c:	2280      	movs	r2, #128	; 0x80
    120e:	50a3      	str	r3, [r4, r2]
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
	if (config->remote_frames_standard_reject) {
    1210:	7cab      	ldrb	r3, [r5, #18]
    1212:	2b00      	cmp	r3, #0
    1214:	d003      	beq.n	121e <can_init+0x1f6>
		hw->GFC.reg |= CAN_GFC_RRFS;
    1216:	58a1      	ldr	r1, [r4, r2]
    1218:	2302      	movs	r3, #2
    121a:	430b      	orrs	r3, r1
    121c:	50a3      	str	r3, [r4, r2]
	}
	if (config->remote_frames_extended_reject) {
    121e:	7ceb      	ldrb	r3, [r5, #19]
    1220:	2b00      	cmp	r3, #0
    1222:	d004      	beq.n	122e <can_init+0x206>
		hw->GFC.reg |= CAN_GFC_RRFE;
    1224:	2280      	movs	r2, #128	; 0x80
    1226:	58a1      	ldr	r1, [r4, r2]
    1228:	2301      	movs	r3, #1
    122a:	430b      	orrs	r3, r1
    122c:	50a3      	str	r3, [r4, r2]
	}

	hw->XIDAM.reg = config->extended_id_mask;
    122e:	2390      	movs	r3, #144	; 0x90
    1230:	696a      	ldr	r2, [r5, #20]
    1232:	50e2      	str	r2, [r4, r3]

	if (config->rx_fifo_0_overwrite) {
    1234:	7e2b      	ldrb	r3, [r5, #24]
    1236:	2b00      	cmp	r3, #0
    1238:	d005      	beq.n	1246 <can_init+0x21e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    123a:	22a0      	movs	r2, #160	; 0xa0
    123c:	58a3      	ldr	r3, [r4, r2]
    123e:	2180      	movs	r1, #128	; 0x80
    1240:	0609      	lsls	r1, r1, #24
    1242:	430b      	orrs	r3, r1
    1244:	50a3      	str	r3, [r4, r2]
	}
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    1246:	20a0      	movs	r0, #160	; 0xa0
    1248:	5822      	ldr	r2, [r4, r0]
    124a:	7e6b      	ldrb	r3, [r5, #25]
    124c:	061b      	lsls	r3, r3, #24
    124e:	21fe      	movs	r1, #254	; 0xfe
    1250:	05c9      	lsls	r1, r1, #23
    1252:	400b      	ands	r3, r1
    1254:	4313      	orrs	r3, r2
    1256:	5023      	str	r3, [r4, r0]

	if (config->rx_fifo_1_overwrite) {
    1258:	7eab      	ldrb	r3, [r5, #26]
    125a:	2b00      	cmp	r3, #0
    125c:	d005      	beq.n	126a <can_init+0x242>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    125e:	22b0      	movs	r2, #176	; 0xb0
    1260:	58a3      	ldr	r3, [r4, r2]
    1262:	2180      	movs	r1, #128	; 0x80
    1264:	0609      	lsls	r1, r1, #24
    1266:	430b      	orrs	r3, r1
    1268:	50a3      	str	r3, [r4, r2]
	}
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    126a:	20b0      	movs	r0, #176	; 0xb0
    126c:	5822      	ldr	r2, [r4, r0]
    126e:	7eeb      	ldrb	r3, [r5, #27]
    1270:	061b      	lsls	r3, r3, #24
    1272:	21fe      	movs	r1, #254	; 0xfe
    1274:	05c9      	lsls	r1, r1, #23
    1276:	400b      	ands	r3, r1
    1278:	4313      	orrs	r3, r2
    127a:	5023      	str	r3, [r4, r0]

	if (config->tx_queue_mode) {
    127c:	7f2b      	ldrb	r3, [r5, #28]
    127e:	2b00      	cmp	r3, #0
    1280:	d005      	beq.n	128e <can_init+0x266>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    1282:	22c0      	movs	r2, #192	; 0xc0
    1284:	58a3      	ldr	r3, [r4, r2]
    1286:	2180      	movs	r1, #128	; 0x80
    1288:	05c9      	lsls	r1, r1, #23
    128a:	430b      	orrs	r3, r1
    128c:	50a3      	str	r3, [r4, r2]
	}

	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    128e:	20f0      	movs	r0, #240	; 0xf0
    1290:	5822      	ldr	r2, [r4, r0]
    1292:	7f6b      	ldrb	r3, [r5, #29]
    1294:	061b      	lsls	r3, r3, #24
    1296:	21fc      	movs	r1, #252	; 0xfc
    1298:	0589      	lsls	r1, r1, #22
    129a:	400b      	ands	r3, r1
    129c:	4313      	orrs	r3, r2
    129e:	5023      	str	r3, [r4, r0]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    12a0:	2303      	movs	r3, #3
    12a2:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    12a4:	3b04      	subs	r3, #4
    12a6:	22e0      	movs	r2, #224	; 0xe0
    12a8:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    12aa:	3204      	adds	r2, #4
    12ac:	50a3      	str	r3, [r4, r2]
    12ae:	e004      	b.n	12ba <can_init+0x292>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    12b0:	69a2      	ldr	r2, [r4, #24]
    12b2:	2302      	movs	r3, #2
    12b4:	4313      	orrs	r3, r2
    12b6:	61a3      	str	r3, [r4, #24]
    12b8:	e743      	b.n	1142 <can_init+0x11a>

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
}
    12ba:	bd38      	pop	{r3, r4, r5, pc}
    12bc:	00000ff1 	.word	0x00000ff1
    12c0:	20000b2c 	.word	0x20000b2c
    12c4:	42001c00 	.word	0x42001c00
    12c8:	0000261d 	.word	0x0000261d
    12cc:	000025b5 	.word	0x000025b5
    12d0:	200005a8 	.word	0x200005a8
    12d4:	200004a8 	.word	0x200004a8
    12d8:	200009a8 	.word	0x200009a8
    12dc:	20000128 	.word	0x20000128
    12e0:	20000828 	.word	0x20000828
    12e4:	200006a8 	.word	0x200006a8
    12e8:	04040000 	.word	0x04040000
    12ec:	20000968 	.word	0x20000968
    12f0:	42002000 	.word	0x42002000
    12f4:	20000528 	.word	0x20000528
    12f8:	20000428 	.word	0x20000428
    12fc:	20000228 	.word	0x20000228
    1300:	20000328 	.word	0x20000328
    1304:	20000728 	.word	0x20000728
    1308:	20000628 	.word	0x20000628
    130c:	20000928 	.word	0x20000928
    1310:	06050a03 	.word	0x06050a03
    1314:	00050a33 	.word	0x00050a33

00001318 <can_start>:

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    1318:	6802      	ldr	r2, [r0, #0]
    131a:	6993      	ldr	r3, [r2, #24]
    131c:	2101      	movs	r1, #1
    131e:	438b      	bics	r3, r1
    1320:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    1322:	6801      	ldr	r1, [r0, #0]
    1324:	2201      	movs	r2, #1
    1326:	698b      	ldr	r3, [r1, #24]
    1328:	421a      	tst	r2, r3
    132a:	d1fc      	bne.n	1326 <can_start+0xe>
}
    132c:	4770      	bx	lr
    132e:	46c0      	nop			; (mov r8, r8)

00001330 <can_set_rx_standand_filter>:
}

enum status_code can_set_rx_standand_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
    1330:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    1332:	6803      	ldr	r3, [r0, #0]
    1334:	4809      	ldr	r0, [pc, #36]	; (135c <can_set_rx_standand_filter+0x2c>)
    1336:	4283      	cmp	r3, r0
    1338:	d105      	bne.n	1346 <can_set_rx_standand_filter+0x16>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    133a:	6809      	ldr	r1, [r1, #0]
    133c:	0092      	lsls	r2, r2, #2
    133e:	4b08      	ldr	r3, [pc, #32]	; (1360 <can_set_rx_standand_filter+0x30>)
    1340:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1342:	2000      	movs	r0, #0
    1344:	e008      	b.n	1358 <can_set_rx_standand_filter+0x28>
	} else if (module_inst->hw == CAN1) {
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1346:	2017      	movs	r0, #23
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1348:	4c06      	ldr	r4, [pc, #24]	; (1364 <can_set_rx_standand_filter+0x34>)
    134a:	42a3      	cmp	r3, r4
    134c:	d104      	bne.n	1358 <can_set_rx_standand_filter+0x28>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    134e:	6809      	ldr	r1, [r1, #0]
    1350:	0092      	lsls	r2, r2, #2
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <can_set_rx_standand_filter+0x38>)
    1354:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1356:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    1358:	bd10      	pop	{r4, pc}
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	42001c00 	.word	0x42001c00
    1360:	200005a8 	.word	0x200005a8
    1364:	42002000 	.word	0x42002000
    1368:	20000528 	.word	0x20000528

0000136c <can_set_rx_extended_filter>:

enum status_code can_set_rx_extended_filter(
		struct can_module *const module_inst,
		struct can_extended_message_filter_element *et_filter, uint32_t index)
{
    136c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    136e:	6803      	ldr	r3, [r0, #0]
    1370:	480c      	ldr	r0, [pc, #48]	; (13a4 <can_set_rx_extended_filter+0x38>)
    1372:	4283      	cmp	r3, r0
    1374:	d108      	bne.n	1388 <can_set_rx_extended_filter+0x1c>
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
    1376:	6808      	ldr	r0, [r1, #0]
    1378:	4b0b      	ldr	r3, [pc, #44]	; (13a8 <can_set_rx_extended_filter+0x3c>)
    137a:	00d2      	lsls	r2, r2, #3
    137c:	50d0      	str	r0, [r2, r3]
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
    137e:	6849      	ldr	r1, [r1, #4]
    1380:	189a      	adds	r2, r3, r2
    1382:	6051      	str	r1, [r2, #4]
		return STATUS_OK;
    1384:	2000      	movs	r0, #0
    1386:	e00b      	b.n	13a0 <can_set_rx_extended_filter+0x34>
	} else if (module_inst->hw == CAN1) {
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1388:	2017      	movs	r0, #23
{
	if (module_inst->hw == CAN0) {
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    138a:	4c08      	ldr	r4, [pc, #32]	; (13ac <can_set_rx_extended_filter+0x40>)
    138c:	42a3      	cmp	r3, r4
    138e:	d107      	bne.n	13a0 <can_set_rx_extended_filter+0x34>
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
    1390:	6808      	ldr	r0, [r1, #0]
    1392:	4b07      	ldr	r3, [pc, #28]	; (13b0 <can_set_rx_extended_filter+0x44>)
    1394:	00d2      	lsls	r2, r2, #3
    1396:	50d0      	str	r0, [r2, r3]
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
    1398:	6849      	ldr	r1, [r1, #4]
    139a:	189a      	adds	r2, r3, r2
    139c:	6051      	str	r1, [r2, #4]
		return STATUS_OK;
    139e:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    13a0:	bd10      	pop	{r4, pc}
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	42001c00 	.word	0x42001c00
    13a8:	200004a8 	.word	0x200004a8
    13ac:	42002000 	.word	0x42002000
    13b0:	20000428 	.word	0x20000428

000013b4 <can_get_rx_buffer_element>:

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    13b4:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    13b6:	6803      	ldr	r3, [r0, #0]
    13b8:	4c0d      	ldr	r4, [pc, #52]	; (13f0 <can_get_rx_buffer_element+0x3c>)
    13ba:	42a3      	cmp	r3, r4
    13bc:	d109      	bne.n	13d2 <can_get_rx_buffer_element+0x1e>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    13be:	0112      	lsls	r2, r2, #4
    13c0:	4b0c      	ldr	r3, [pc, #48]	; (13f4 <can_get_rx_buffer_element+0x40>)
    13c2:	189a      	adds	r2, r3, r2
    13c4:	1c08      	adds	r0, r1, #0
    13c6:	1c11      	adds	r1, r2, #0
    13c8:	2210      	movs	r2, #16
    13ca:	4b0b      	ldr	r3, [pc, #44]	; (13f8 <can_get_rx_buffer_element+0x44>)
    13cc:	4798      	blx	r3
		return STATUS_OK;
    13ce:	2000      	movs	r0, #0
    13d0:	e00c      	b.n	13ec <can_get_rx_buffer_element+0x38>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    13d2:	2017      	movs	r0, #23
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    13d4:	4c09      	ldr	r4, [pc, #36]	; (13fc <can_get_rx_buffer_element+0x48>)
    13d6:	42a3      	cmp	r3, r4
    13d8:	d108      	bne.n	13ec <can_get_rx_buffer_element+0x38>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    13da:	0112      	lsls	r2, r2, #4
    13dc:	4b08      	ldr	r3, [pc, #32]	; (1400 <can_get_rx_buffer_element+0x4c>)
    13de:	189a      	adds	r2, r3, r2
    13e0:	1c08      	adds	r0, r1, #0
    13e2:	1c11      	adds	r1, r2, #0
    13e4:	2210      	movs	r2, #16
    13e6:	4b04      	ldr	r3, [pc, #16]	; (13f8 <can_get_rx_buffer_element+0x44>)
    13e8:	4798      	blx	r3
		return STATUS_OK;
    13ea:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    13ec:	bd10      	pop	{r4, pc}
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	42001c00 	.word	0x42001c00
    13f4:	20000828 	.word	0x20000828
    13f8:	00002aad 	.word	0x00002aad
    13fc:	42002000 	.word	0x42002000
    1400:	20000728 	.word	0x20000728

00001404 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
    1404:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    1406:	6803      	ldr	r3, [r0, #0]
    1408:	4c0d      	ldr	r4, [pc, #52]	; (1440 <can_get_rx_fifo_0_element+0x3c>)
    140a:	42a3      	cmp	r3, r4
    140c:	d109      	bne.n	1422 <can_get_rx_fifo_0_element+0x1e>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    140e:	0112      	lsls	r2, r2, #4
    1410:	4b0c      	ldr	r3, [pc, #48]	; (1444 <can_get_rx_fifo_0_element+0x40>)
    1412:	189a      	adds	r2, r3, r2
    1414:	1c08      	adds	r0, r1, #0
    1416:	1c11      	adds	r1, r2, #0
    1418:	2210      	movs	r2, #16
    141a:	4b0b      	ldr	r3, [pc, #44]	; (1448 <can_get_rx_fifo_0_element+0x44>)
    141c:	4798      	blx	r3
		return STATUS_OK;
    141e:	2000      	movs	r0, #0
    1420:	e00c      	b.n	143c <can_get_rx_fifo_0_element+0x38>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1422:	2017      	movs	r0, #23
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1424:	4c09      	ldr	r4, [pc, #36]	; (144c <can_get_rx_fifo_0_element+0x48>)
    1426:	42a3      	cmp	r3, r4
    1428:	d108      	bne.n	143c <can_get_rx_fifo_0_element+0x38>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    142a:	0112      	lsls	r2, r2, #4
    142c:	4b08      	ldr	r3, [pc, #32]	; (1450 <can_get_rx_fifo_0_element+0x4c>)
    142e:	189a      	adds	r2, r3, r2
    1430:	1c08      	adds	r0, r1, #0
    1432:	1c11      	adds	r1, r2, #0
    1434:	2210      	movs	r2, #16
    1436:	4b04      	ldr	r3, [pc, #16]	; (1448 <can_get_rx_fifo_0_element+0x44>)
    1438:	4798      	blx	r3
		return STATUS_OK;
    143a:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    143c:	bd10      	pop	{r4, pc}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	42001c00 	.word	0x42001c00
    1444:	200009a8 	.word	0x200009a8
    1448:	00002aad 	.word	0x00002aad
    144c:	42002000 	.word	0x42002000
    1450:	20000228 	.word	0x20000228

00001454 <can_get_rx_fifo_1_element>:

enum status_code can_get_rx_fifo_1_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
    1454:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    1456:	6803      	ldr	r3, [r0, #0]
    1458:	4c0d      	ldr	r4, [pc, #52]	; (1490 <can_get_rx_fifo_1_element+0x3c>)
    145a:	42a3      	cmp	r3, r4
    145c:	d109      	bne.n	1472 <can_get_rx_fifo_1_element+0x1e>
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    145e:	0112      	lsls	r2, r2, #4
    1460:	4b0c      	ldr	r3, [pc, #48]	; (1494 <can_get_rx_fifo_1_element+0x40>)
    1462:	189a      	adds	r2, r3, r2
    1464:	1c08      	adds	r0, r1, #0
    1466:	1c11      	adds	r1, r2, #0
    1468:	2210      	movs	r2, #16
    146a:	4b0b      	ldr	r3, [pc, #44]	; (1498 <can_get_rx_fifo_1_element+0x44>)
    146c:	4798      	blx	r3
		return STATUS_OK;
    146e:	2000      	movs	r0, #0
    1470:	e00c      	b.n	148c <can_get_rx_fifo_1_element+0x38>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1472:	2017      	movs	r0, #23
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1474:	4c09      	ldr	r4, [pc, #36]	; (149c <can_get_rx_fifo_1_element+0x48>)
    1476:	42a3      	cmp	r3, r4
    1478:	d108      	bne.n	148c <can_get_rx_fifo_1_element+0x38>
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    147a:	0112      	lsls	r2, r2, #4
    147c:	4b08      	ldr	r3, [pc, #32]	; (14a0 <can_get_rx_fifo_1_element+0x4c>)
    147e:	189a      	adds	r2, r3, r2
    1480:	1c08      	adds	r0, r1, #0
    1482:	1c11      	adds	r1, r2, #0
    1484:	2210      	movs	r2, #16
    1486:	4b04      	ldr	r3, [pc, #16]	; (1498 <can_get_rx_fifo_1_element+0x44>)
    1488:	4798      	blx	r3
		return STATUS_OK;
    148a:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    148c:	bd10      	pop	{r4, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	42001c00 	.word	0x42001c00
    1494:	20000128 	.word	0x20000128
    1498:	00002aad 	.word	0x00002aad
    149c:	42002000 	.word	0x42002000
    14a0:	20000328 	.word	0x20000328

000014a4 <can_set_tx_buffer_element>:

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
    14a4:	b530      	push	{r4, r5, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
    14a6:	6803      	ldr	r3, [r0, #0]
    14a8:	4816      	ldr	r0, [pc, #88]	; (1504 <can_set_tx_buffer_element+0x60>)
    14aa:	4283      	cmp	r3, r0
    14ac:	d112      	bne.n	14d4 <can_set_tx_buffer_element+0x30>
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
    14ae:	6808      	ldr	r0, [r1, #0]
    14b0:	4b15      	ldr	r3, [pc, #84]	; (1508 <can_set_tx_buffer_element+0x64>)
    14b2:	0112      	lsls	r2, r2, #4
    14b4:	50d0      	str	r0, [r2, r3]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
    14b6:	6848      	ldr	r0, [r1, #4]
    14b8:	189b      	adds	r3, r3, r2
    14ba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    14bc:	2300      	movs	r3, #0
    14be:	4d12      	ldr	r5, [pc, #72]	; (1508 <can_set_tx_buffer_element+0x64>)
    14c0:	18c8      	adds	r0, r1, r3
			can0_tx_buffer[index].data[i] = tx_element->data[i];
    14c2:	7a04      	ldrb	r4, [r0, #8]
    14c4:	1898      	adds	r0, r3, r2
    14c6:	1828      	adds	r0, r5, r0
    14c8:	7204      	strb	r4, [r0, #8]
{
	uint32_t i;
	if (module_inst->hw == CAN0) {
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    14ca:	3301      	adds	r3, #1
    14cc:	2b08      	cmp	r3, #8
    14ce:	d1f7      	bne.n	14c0 <can_set_tx_buffer_element+0x1c>
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
    14d0:	2000      	movs	r0, #0
    14d2:	e015      	b.n	1500 <can_set_tx_buffer_element+0x5c>
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    14d4:	2017      	movs	r0, #23
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    14d6:	4c0d      	ldr	r4, [pc, #52]	; (150c <can_set_tx_buffer_element+0x68>)
    14d8:	42a3      	cmp	r3, r4
    14da:	d111      	bne.n	1500 <can_set_tx_buffer_element+0x5c>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
    14dc:	6808      	ldr	r0, [r1, #0]
    14de:	4b0c      	ldr	r3, [pc, #48]	; (1510 <can_set_tx_buffer_element+0x6c>)
    14e0:	0112      	lsls	r2, r2, #4
    14e2:	50d0      	str	r0, [r2, r3]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
    14e4:	6848      	ldr	r0, [r1, #4]
    14e6:	189b      	adds	r3, r3, r2
    14e8:	6058      	str	r0, [r3, #4]
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    14ea:	2300      	movs	r3, #0
    14ec:	4d08      	ldr	r5, [pc, #32]	; (1510 <can_set_tx_buffer_element+0x6c>)
    14ee:	18c8      	adds	r0, r1, r3
			can1_tx_buffer[index].data[i] = tx_element->data[i];
    14f0:	7a04      	ldrb	r4, [r0, #8]
    14f2:	1898      	adds	r0, r3, r2
    14f4:	1828      	adds	r0, r5, r0
    14f6:	7204      	strb	r4, [r0, #8]
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b08      	cmp	r3, #8
    14fc:	d1f7      	bne.n	14ee <can_set_tx_buffer_element+0x4a>
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
    14fe:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    1500:	bd30      	pop	{r4, r5, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	42001c00 	.word	0x42001c00
    1508:	200006a8 	.word	0x200006a8
    150c:	42002000 	.word	0x42002000
    1510:	20000628 	.word	0x20000628

00001514 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1514:	b500      	push	{lr}
    1516:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1518:	ab01      	add	r3, sp, #4
    151a:	2280      	movs	r2, #128	; 0x80
    151c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    151e:	780a      	ldrb	r2, [r1, #0]
    1520:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1522:	784a      	ldrb	r2, [r1, #1]
    1524:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1526:	788a      	ldrb	r2, [r1, #2]
    1528:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    152a:	1c19      	adds	r1, r3, #0
    152c:	4b01      	ldr	r3, [pc, #4]	; (1534 <port_pin_set_config+0x20>)
    152e:	4798      	blx	r3
}
    1530:	b003      	add	sp, #12
    1532:	bd00      	pop	{pc}
    1534:	00002719 	.word	0x00002719

00001538 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1538:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    153a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    153c:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    153e:	4281      	cmp	r1, r0
    1540:	d30c      	bcc.n	155c <_sercom_get_sync_baud_val+0x24>
    1542:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    1544:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1546:	3301      	adds	r3, #1
    1548:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    154a:	4288      	cmp	r0, r1
    154c:	d9fa      	bls.n	1544 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    154e:	3b01      	subs	r3, #1
    1550:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1552:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1554:	2bff      	cmp	r3, #255	; 0xff
    1556:	d801      	bhi.n	155c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    1558:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    155a:	2400      	movs	r4, #0
	}
}
    155c:	1c20      	adds	r0, r4, #0
    155e:	bd10      	pop	{r4, pc}

00001560 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1560:	b5f0      	push	{r4, r5, r6, r7, lr}
    1562:	465f      	mov	r7, fp
    1564:	4656      	mov	r6, sl
    1566:	464d      	mov	r5, r9
    1568:	4644      	mov	r4, r8
    156a:	b4f0      	push	{r4, r5, r6, r7}
    156c:	b089      	sub	sp, #36	; 0x24
    156e:	1c1c      	adds	r4, r3, #0
    1570:	ab12      	add	r3, sp, #72	; 0x48
    1572:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1574:	1c06      	adds	r6, r0, #0
    1576:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1578:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    157a:	428e      	cmp	r6, r1
    157c:	d900      	bls.n	1580 <_sercom_get_async_baud_val+0x20>
    157e:	e0c7      	b.n	1710 <_sercom_get_async_baud_val+0x1b0>
    1580:	1c25      	adds	r5, r4, #0
    1582:	9207      	str	r2, [sp, #28]
    1584:	1c0c      	adds	r4, r1, #0
    1586:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1588:	2d00      	cmp	r5, #0
    158a:	d151      	bne.n	1630 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    158c:	1c18      	adds	r0, r3, #0
    158e:	2100      	movs	r1, #0
    1590:	2300      	movs	r3, #0
    1592:	4d63      	ldr	r5, [pc, #396]	; (1720 <_sercom_get_async_baud_val+0x1c0>)
    1594:	47a8      	blx	r5
    1596:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    1598:	1c26      	adds	r6, r4, #0
    159a:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    159c:	2300      	movs	r3, #0
    159e:	2400      	movs	r4, #0
    15a0:	9302      	str	r3, [sp, #8]
    15a2:	9403      	str	r4, [sp, #12]
    15a4:	2200      	movs	r2, #0
    15a6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    15a8:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    15aa:	2120      	movs	r1, #32
    15ac:	468c      	mov	ip, r1
    15ae:	391f      	subs	r1, #31
    15b0:	9600      	str	r6, [sp, #0]
    15b2:	9701      	str	r7, [sp, #4]
    15b4:	2420      	movs	r4, #32
    15b6:	4264      	negs	r4, r4
    15b8:	1904      	adds	r4, r0, r4
    15ba:	d403      	bmi.n	15c4 <_sercom_get_async_baud_val+0x64>
    15bc:	1c0d      	adds	r5, r1, #0
    15be:	40a5      	lsls	r5, r4
    15c0:	46a8      	mov	r8, r5
    15c2:	e004      	b.n	15ce <_sercom_get_async_baud_val+0x6e>
    15c4:	4664      	mov	r4, ip
    15c6:	1a24      	subs	r4, r4, r0
    15c8:	1c0d      	adds	r5, r1, #0
    15ca:	40e5      	lsrs	r5, r4
    15cc:	46a8      	mov	r8, r5
    15ce:	1c0c      	adds	r4, r1, #0
    15d0:	4084      	lsls	r4, r0
    15d2:	46a1      	mov	r9, r4

		r = r << 1;
    15d4:	1c14      	adds	r4, r2, #0
    15d6:	1c1d      	adds	r5, r3, #0
    15d8:	18a4      	adds	r4, r4, r2
    15da:	415d      	adcs	r5, r3
    15dc:	1c22      	adds	r2, r4, #0
    15de:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    15e0:	465e      	mov	r6, fp
    15e2:	4647      	mov	r7, r8
    15e4:	423e      	tst	r6, r7
    15e6:	d003      	beq.n	15f0 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    15e8:	1c0e      	adds	r6, r1, #0
    15ea:	4326      	orrs	r6, r4
    15ec:	1c32      	adds	r2, r6, #0
    15ee:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    15f0:	9c01      	ldr	r4, [sp, #4]
    15f2:	429c      	cmp	r4, r3
    15f4:	d810      	bhi.n	1618 <_sercom_get_async_baud_val+0xb8>
    15f6:	d102      	bne.n	15fe <_sercom_get_async_baud_val+0x9e>
    15f8:	9c00      	ldr	r4, [sp, #0]
    15fa:	4294      	cmp	r4, r2
    15fc:	d80c      	bhi.n	1618 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    15fe:	9c00      	ldr	r4, [sp, #0]
    1600:	9d01      	ldr	r5, [sp, #4]
    1602:	1b12      	subs	r2, r2, r4
    1604:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1606:	464d      	mov	r5, r9
    1608:	9e02      	ldr	r6, [sp, #8]
    160a:	9f03      	ldr	r7, [sp, #12]
    160c:	4335      	orrs	r5, r6
    160e:	1c3c      	adds	r4, r7, #0
    1610:	4646      	mov	r6, r8
    1612:	4334      	orrs	r4, r6
    1614:	9502      	str	r5, [sp, #8]
    1616:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    1618:	3801      	subs	r0, #1
    161a:	d2cb      	bcs.n	15b4 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    161c:	2200      	movs	r2, #0
    161e:	2301      	movs	r3, #1
    1620:	9802      	ldr	r0, [sp, #8]
    1622:	9903      	ldr	r1, [sp, #12]
    1624:	1a12      	subs	r2, r2, r0
    1626:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1628:	0c11      	lsrs	r1, r2, #16
    162a:	041b      	lsls	r3, r3, #16
    162c:	4319      	orrs	r1, r3
    162e:	e06c      	b.n	170a <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    1630:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1632:	2d01      	cmp	r5, #1
    1634:	d169      	bne.n	170a <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    1636:	0f61      	lsrs	r1, r4, #29
    1638:	1c0f      	adds	r7, r1, #0
    163a:	00e1      	lsls	r1, r4, #3
    163c:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    163e:	1c18      	adds	r0, r3, #0
    1640:	2100      	movs	r1, #0
    1642:	2300      	movs	r3, #0
    1644:	4c36      	ldr	r4, [pc, #216]	; (1720 <_sercom_get_async_baud_val+0x1c0>)
    1646:	47a0      	blx	r4
    1648:	1c04      	adds	r4, r0, #0
    164a:	1c0d      	adds	r5, r1, #0
    164c:	2300      	movs	r3, #0
    164e:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1650:	3320      	adds	r3, #32
    1652:	469b      	mov	fp, r3
    1654:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    1656:	4663      	mov	r3, ip
    1658:	9305      	str	r3, [sp, #20]
    165a:	46b9      	mov	r9, r7
    165c:	466b      	mov	r3, sp
    165e:	7d1b      	ldrb	r3, [r3, #20]
    1660:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1662:	2300      	movs	r3, #0
    1664:	469c      	mov	ip, r3
    1666:	2000      	movs	r0, #0
    1668:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    166a:	223f      	movs	r2, #63	; 0x3f
    166c:	9400      	str	r4, [sp, #0]
    166e:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    1670:	2320      	movs	r3, #32
    1672:	425b      	negs	r3, r3
    1674:	18d3      	adds	r3, r2, r3
    1676:	d403      	bmi.n	1680 <_sercom_get_async_baud_val+0x120>
    1678:	1c34      	adds	r4, r6, #0
    167a:	409c      	lsls	r4, r3
    167c:	1c23      	adds	r3, r4, #0
    167e:	e004      	b.n	168a <_sercom_get_async_baud_val+0x12a>
    1680:	465b      	mov	r3, fp
    1682:	1a9b      	subs	r3, r3, r2
    1684:	1c34      	adds	r4, r6, #0
    1686:	40dc      	lsrs	r4, r3
    1688:	1c23      	adds	r3, r4, #0
    168a:	1c37      	adds	r7, r6, #0
    168c:	4097      	lsls	r7, r2

		r = r << 1;
    168e:	1c04      	adds	r4, r0, #0
    1690:	1c0d      	adds	r5, r1, #0
    1692:	1824      	adds	r4, r4, r0
    1694:	414d      	adcs	r5, r1
    1696:	1c20      	adds	r0, r4, #0
    1698:	1c29      	adds	r1, r5, #0
    169a:	9002      	str	r0, [sp, #8]
    169c:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    169e:	4644      	mov	r4, r8
    16a0:	403c      	ands	r4, r7
    16a2:	46a2      	mov	sl, r4
    16a4:	464c      	mov	r4, r9
    16a6:	4023      	ands	r3, r4
    16a8:	4654      	mov	r4, sl
    16aa:	4323      	orrs	r3, r4
    16ac:	d005      	beq.n	16ba <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    16ae:	9b02      	ldr	r3, [sp, #8]
    16b0:	9c03      	ldr	r4, [sp, #12]
    16b2:	1c1d      	adds	r5, r3, #0
    16b4:	4335      	orrs	r5, r6
    16b6:	1c28      	adds	r0, r5, #0
    16b8:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    16ba:	9b01      	ldr	r3, [sp, #4]
    16bc:	428b      	cmp	r3, r1
    16be:	d80a      	bhi.n	16d6 <_sercom_get_async_baud_val+0x176>
    16c0:	d102      	bne.n	16c8 <_sercom_get_async_baud_val+0x168>
    16c2:	9b00      	ldr	r3, [sp, #0]
    16c4:	4283      	cmp	r3, r0
    16c6:	d806      	bhi.n	16d6 <_sercom_get_async_baud_val+0x176>
			r = r - d;
    16c8:	9b00      	ldr	r3, [sp, #0]
    16ca:	9c01      	ldr	r4, [sp, #4]
    16cc:	1ac0      	subs	r0, r0, r3
    16ce:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    16d0:	4663      	mov	r3, ip
    16d2:	433b      	orrs	r3, r7
    16d4:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    16d6:	3a01      	subs	r2, #1
    16d8:	d2ca      	bcs.n	1670 <_sercom_get_async_baud_val+0x110>
    16da:	9c00      	ldr	r4, [sp, #0]
    16dc:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    16de:	4662      	mov	r2, ip
    16e0:	9905      	ldr	r1, [sp, #20]
    16e2:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    16e4:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    16e6:	4a0f      	ldr	r2, [pc, #60]	; (1724 <_sercom_get_async_baud_val+0x1c4>)
    16e8:	4293      	cmp	r3, r2
    16ea:	d908      	bls.n	16fe <_sercom_get_async_baud_val+0x19e>
    16ec:	9a06      	ldr	r2, [sp, #24]
    16ee:	3201      	adds	r2, #1
    16f0:	b2d2      	uxtb	r2, r2
    16f2:	9206      	str	r2, [sp, #24]
    16f4:	1c0a      	adds	r2, r1, #0
    16f6:	3201      	adds	r2, #1
    16f8:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    16fa:	2a08      	cmp	r2, #8
    16fc:	d1ae      	bne.n	165c <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16fe:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    1700:	9a06      	ldr	r2, [sp, #24]
    1702:	2a08      	cmp	r2, #8
    1704:	d004      	beq.n	1710 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    1706:	0351      	lsls	r1, r2, #13
    1708:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    170a:	9b07      	ldr	r3, [sp, #28]
    170c:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    170e:	2500      	movs	r5, #0
}
    1710:	1c28      	adds	r0, r5, #0
    1712:	b009      	add	sp, #36	; 0x24
    1714:	bc3c      	pop	{r2, r3, r4, r5}
    1716:	4690      	mov	r8, r2
    1718:	4699      	mov	r9, r3
    171a:	46a2      	mov	sl, r4
    171c:	46ab      	mov	fp, r5
    171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1720:	00002a0d 	.word	0x00002a0d
    1724:	00001fff 	.word	0x00001fff

00001728 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1728:	b510      	push	{r4, lr}
    172a:	b082      	sub	sp, #8
    172c:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    172e:	4b0e      	ldr	r3, [pc, #56]	; (1768 <sercom_set_gclk_generator+0x40>)
    1730:	781b      	ldrb	r3, [r3, #0]
    1732:	2b00      	cmp	r3, #0
    1734:	d001      	beq.n	173a <sercom_set_gclk_generator+0x12>
    1736:	2900      	cmp	r1, #0
    1738:	d00d      	beq.n	1756 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    173a:	a901      	add	r1, sp, #4
    173c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    173e:	2012      	movs	r0, #18
    1740:	4b0a      	ldr	r3, [pc, #40]	; (176c <sercom_set_gclk_generator+0x44>)
    1742:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1744:	2012      	movs	r0, #18
    1746:	4b0a      	ldr	r3, [pc, #40]	; (1770 <sercom_set_gclk_generator+0x48>)
    1748:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    174a:	4b07      	ldr	r3, [pc, #28]	; (1768 <sercom_set_gclk_generator+0x40>)
    174c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    174e:	2201      	movs	r2, #1
    1750:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1752:	2000      	movs	r0, #0
    1754:	e006      	b.n	1764 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    1756:	4b04      	ldr	r3, [pc, #16]	; (1768 <sercom_set_gclk_generator+0x40>)
    1758:	785b      	ldrb	r3, [r3, #1]
    175a:	4283      	cmp	r3, r0
    175c:	d001      	beq.n	1762 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    175e:	201d      	movs	r0, #29
    1760:	e000      	b.n	1764 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    1762:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1764:	b002      	add	sp, #8
    1766:	bd10      	pop	{r4, pc}
    1768:	20000aa8 	.word	0x20000aa8
    176c:	0000261d 	.word	0x0000261d
    1770:	000025b5 	.word	0x000025b5

00001774 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1774:	4b44      	ldr	r3, [pc, #272]	; (1888 <_sercom_get_default_pad+0x114>)
    1776:	4298      	cmp	r0, r3
    1778:	d033      	beq.n	17e2 <_sercom_get_default_pad+0x6e>
    177a:	d806      	bhi.n	178a <_sercom_get_default_pad+0x16>
    177c:	4b43      	ldr	r3, [pc, #268]	; (188c <_sercom_get_default_pad+0x118>)
    177e:	4298      	cmp	r0, r3
    1780:	d00d      	beq.n	179e <_sercom_get_default_pad+0x2a>
    1782:	4b43      	ldr	r3, [pc, #268]	; (1890 <_sercom_get_default_pad+0x11c>)
    1784:	4298      	cmp	r0, r3
    1786:	d01b      	beq.n	17c0 <_sercom_get_default_pad+0x4c>
    1788:	e06f      	b.n	186a <_sercom_get_default_pad+0xf6>
    178a:	4b42      	ldr	r3, [pc, #264]	; (1894 <_sercom_get_default_pad+0x120>)
    178c:	4298      	cmp	r0, r3
    178e:	d04a      	beq.n	1826 <_sercom_get_default_pad+0xb2>
    1790:	4b41      	ldr	r3, [pc, #260]	; (1898 <_sercom_get_default_pad+0x124>)
    1792:	4298      	cmp	r0, r3
    1794:	d058      	beq.n	1848 <_sercom_get_default_pad+0xd4>
    1796:	4b41      	ldr	r3, [pc, #260]	; (189c <_sercom_get_default_pad+0x128>)
    1798:	4298      	cmp	r0, r3
    179a:	d166      	bne.n	186a <_sercom_get_default_pad+0xf6>
    179c:	e032      	b.n	1804 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    179e:	2901      	cmp	r1, #1
    17a0:	d006      	beq.n	17b0 <_sercom_get_default_pad+0x3c>
    17a2:	2900      	cmp	r1, #0
    17a4:	d063      	beq.n	186e <_sercom_get_default_pad+0xfa>
    17a6:	2902      	cmp	r1, #2
    17a8:	d006      	beq.n	17b8 <_sercom_get_default_pad+0x44>
    17aa:	2903      	cmp	r1, #3
    17ac:	d006      	beq.n	17bc <_sercom_get_default_pad+0x48>
    17ae:	e001      	b.n	17b4 <_sercom_get_default_pad+0x40>
    17b0:	483b      	ldr	r0, [pc, #236]	; (18a0 <_sercom_get_default_pad+0x12c>)
    17b2:	e067      	b.n	1884 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    17b4:	2000      	movs	r0, #0
    17b6:	e065      	b.n	1884 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17b8:	483a      	ldr	r0, [pc, #232]	; (18a4 <_sercom_get_default_pad+0x130>)
    17ba:	e063      	b.n	1884 <_sercom_get_default_pad+0x110>
    17bc:	483a      	ldr	r0, [pc, #232]	; (18a8 <_sercom_get_default_pad+0x134>)
    17be:	e061      	b.n	1884 <_sercom_get_default_pad+0x110>
    17c0:	2901      	cmp	r1, #1
    17c2:	d006      	beq.n	17d2 <_sercom_get_default_pad+0x5e>
    17c4:	2900      	cmp	r1, #0
    17c6:	d054      	beq.n	1872 <_sercom_get_default_pad+0xfe>
    17c8:	2902      	cmp	r1, #2
    17ca:	d006      	beq.n	17da <_sercom_get_default_pad+0x66>
    17cc:	2903      	cmp	r1, #3
    17ce:	d006      	beq.n	17de <_sercom_get_default_pad+0x6a>
    17d0:	e001      	b.n	17d6 <_sercom_get_default_pad+0x62>
    17d2:	4836      	ldr	r0, [pc, #216]	; (18ac <_sercom_get_default_pad+0x138>)
    17d4:	e056      	b.n	1884 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    17d6:	2000      	movs	r0, #0
    17d8:	e054      	b.n	1884 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17da:	4835      	ldr	r0, [pc, #212]	; (18b0 <_sercom_get_default_pad+0x13c>)
    17dc:	e052      	b.n	1884 <_sercom_get_default_pad+0x110>
    17de:	4835      	ldr	r0, [pc, #212]	; (18b4 <_sercom_get_default_pad+0x140>)
    17e0:	e050      	b.n	1884 <_sercom_get_default_pad+0x110>
    17e2:	2901      	cmp	r1, #1
    17e4:	d006      	beq.n	17f4 <_sercom_get_default_pad+0x80>
    17e6:	2900      	cmp	r1, #0
    17e8:	d045      	beq.n	1876 <_sercom_get_default_pad+0x102>
    17ea:	2902      	cmp	r1, #2
    17ec:	d006      	beq.n	17fc <_sercom_get_default_pad+0x88>
    17ee:	2903      	cmp	r1, #3
    17f0:	d006      	beq.n	1800 <_sercom_get_default_pad+0x8c>
    17f2:	e001      	b.n	17f8 <_sercom_get_default_pad+0x84>
    17f4:	4830      	ldr	r0, [pc, #192]	; (18b8 <_sercom_get_default_pad+0x144>)
    17f6:	e045      	b.n	1884 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    17f8:	2000      	movs	r0, #0
    17fa:	e043      	b.n	1884 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17fc:	482f      	ldr	r0, [pc, #188]	; (18bc <_sercom_get_default_pad+0x148>)
    17fe:	e041      	b.n	1884 <_sercom_get_default_pad+0x110>
    1800:	482f      	ldr	r0, [pc, #188]	; (18c0 <_sercom_get_default_pad+0x14c>)
    1802:	e03f      	b.n	1884 <_sercom_get_default_pad+0x110>
    1804:	2901      	cmp	r1, #1
    1806:	d006      	beq.n	1816 <_sercom_get_default_pad+0xa2>
    1808:	2900      	cmp	r1, #0
    180a:	d036      	beq.n	187a <_sercom_get_default_pad+0x106>
    180c:	2902      	cmp	r1, #2
    180e:	d006      	beq.n	181e <_sercom_get_default_pad+0xaa>
    1810:	2903      	cmp	r1, #3
    1812:	d006      	beq.n	1822 <_sercom_get_default_pad+0xae>
    1814:	e001      	b.n	181a <_sercom_get_default_pad+0xa6>
    1816:	482b      	ldr	r0, [pc, #172]	; (18c4 <_sercom_get_default_pad+0x150>)
    1818:	e034      	b.n	1884 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    181a:	2000      	movs	r0, #0
    181c:	e032      	b.n	1884 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    181e:	482a      	ldr	r0, [pc, #168]	; (18c8 <_sercom_get_default_pad+0x154>)
    1820:	e030      	b.n	1884 <_sercom_get_default_pad+0x110>
    1822:	482a      	ldr	r0, [pc, #168]	; (18cc <_sercom_get_default_pad+0x158>)
    1824:	e02e      	b.n	1884 <_sercom_get_default_pad+0x110>
    1826:	2901      	cmp	r1, #1
    1828:	d006      	beq.n	1838 <_sercom_get_default_pad+0xc4>
    182a:	2900      	cmp	r1, #0
    182c:	d027      	beq.n	187e <_sercom_get_default_pad+0x10a>
    182e:	2902      	cmp	r1, #2
    1830:	d006      	beq.n	1840 <_sercom_get_default_pad+0xcc>
    1832:	2903      	cmp	r1, #3
    1834:	d006      	beq.n	1844 <_sercom_get_default_pad+0xd0>
    1836:	e001      	b.n	183c <_sercom_get_default_pad+0xc8>
    1838:	4825      	ldr	r0, [pc, #148]	; (18d0 <_sercom_get_default_pad+0x15c>)
    183a:	e023      	b.n	1884 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    183c:	2000      	movs	r0, #0
    183e:	e021      	b.n	1884 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1840:	4824      	ldr	r0, [pc, #144]	; (18d4 <_sercom_get_default_pad+0x160>)
    1842:	e01f      	b.n	1884 <_sercom_get_default_pad+0x110>
    1844:	4824      	ldr	r0, [pc, #144]	; (18d8 <_sercom_get_default_pad+0x164>)
    1846:	e01d      	b.n	1884 <_sercom_get_default_pad+0x110>
    1848:	2901      	cmp	r1, #1
    184a:	d006      	beq.n	185a <_sercom_get_default_pad+0xe6>
    184c:	2900      	cmp	r1, #0
    184e:	d018      	beq.n	1882 <_sercom_get_default_pad+0x10e>
    1850:	2902      	cmp	r1, #2
    1852:	d006      	beq.n	1862 <_sercom_get_default_pad+0xee>
    1854:	2903      	cmp	r1, #3
    1856:	d006      	beq.n	1866 <_sercom_get_default_pad+0xf2>
    1858:	e001      	b.n	185e <_sercom_get_default_pad+0xea>
    185a:	4820      	ldr	r0, [pc, #128]	; (18dc <_sercom_get_default_pad+0x168>)
    185c:	e012      	b.n	1884 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    185e:	2000      	movs	r0, #0
    1860:	e010      	b.n	1884 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1862:	481f      	ldr	r0, [pc, #124]	; (18e0 <_sercom_get_default_pad+0x16c>)
    1864:	e00e      	b.n	1884 <_sercom_get_default_pad+0x110>
    1866:	481f      	ldr	r0, [pc, #124]	; (18e4 <_sercom_get_default_pad+0x170>)
    1868:	e00c      	b.n	1884 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    186a:	2000      	movs	r0, #0
    186c:	e00a      	b.n	1884 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    186e:	481e      	ldr	r0, [pc, #120]	; (18e8 <_sercom_get_default_pad+0x174>)
    1870:	e008      	b.n	1884 <_sercom_get_default_pad+0x110>
    1872:	481e      	ldr	r0, [pc, #120]	; (18ec <_sercom_get_default_pad+0x178>)
    1874:	e006      	b.n	1884 <_sercom_get_default_pad+0x110>
    1876:	481e      	ldr	r0, [pc, #120]	; (18f0 <_sercom_get_default_pad+0x17c>)
    1878:	e004      	b.n	1884 <_sercom_get_default_pad+0x110>
    187a:	481e      	ldr	r0, [pc, #120]	; (18f4 <_sercom_get_default_pad+0x180>)
    187c:	e002      	b.n	1884 <_sercom_get_default_pad+0x110>
    187e:	481e      	ldr	r0, [pc, #120]	; (18f8 <_sercom_get_default_pad+0x184>)
    1880:	e000      	b.n	1884 <_sercom_get_default_pad+0x110>
    1882:	481e      	ldr	r0, [pc, #120]	; (18fc <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
    1884:	4770      	bx	lr
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	42000c00 	.word	0x42000c00
    188c:	42000400 	.word	0x42000400
    1890:	42000800 	.word	0x42000800
    1894:	42001400 	.word	0x42001400
    1898:	42001800 	.word	0x42001800
    189c:	42001000 	.word	0x42001000
    18a0:	00050003 	.word	0x00050003
    18a4:	00060003 	.word	0x00060003
    18a8:	00070003 	.word	0x00070003
    18ac:	00110002 	.word	0x00110002
    18b0:	00120002 	.word	0x00120002
    18b4:	00130002 	.word	0x00130002
    18b8:	000d0002 	.word	0x000d0002
    18bc:	000e0002 	.word	0x000e0002
    18c0:	000f0002 	.word	0x000f0002
    18c4:	00170002 	.word	0x00170002
    18c8:	00180002 	.word	0x00180002
    18cc:	00190002 	.word	0x00190002
    18d0:	00290003 	.word	0x00290003
    18d4:	002a0003 	.word	0x002a0003
    18d8:	002b0003 	.word	0x002b0003
    18dc:	00230003 	.word	0x00230003
    18e0:	00200003 	.word	0x00200003
    18e4:	00210003 	.word	0x00210003
    18e8:	00040003 	.word	0x00040003
    18ec:	00100002 	.word	0x00100002
    18f0:	000c0002 	.word	0x000c0002
    18f4:	00160002 	.word	0x00160002
    18f8:	00280003 	.word	0x00280003
    18fc:	00220003 	.word	0x00220003

00001900 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1900:	b530      	push	{r4, r5, lr}
    1902:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1904:	4b0c      	ldr	r3, [pc, #48]	; (1938 <_sercom_get_sercom_inst_index+0x38>)
    1906:	466a      	mov	r2, sp
    1908:	cb32      	ldmia	r3!, {r1, r4, r5}
    190a:	c232      	stmia	r2!, {r1, r4, r5}
    190c:	cb32      	ldmia	r3!, {r1, r4, r5}
    190e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1910:	9b00      	ldr	r3, [sp, #0]
    1912:	4283      	cmp	r3, r0
    1914:	d006      	beq.n	1924 <_sercom_get_sercom_inst_index+0x24>
    1916:	2301      	movs	r3, #1
    1918:	009a      	lsls	r2, r3, #2
    191a:	4669      	mov	r1, sp
    191c:	5852      	ldr	r2, [r2, r1]
    191e:	4282      	cmp	r2, r0
    1920:	d103      	bne.n	192a <_sercom_get_sercom_inst_index+0x2a>
    1922:	e000      	b.n	1926 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1924:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    1926:	b2d8      	uxtb	r0, r3
    1928:	e003      	b.n	1932 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    192a:	3301      	adds	r3, #1
    192c:	2b06      	cmp	r3, #6
    192e:	d1f3      	bne.n	1918 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1930:	2000      	movs	r0, #0
}
    1932:	b007      	add	sp, #28
    1934:	bd30      	pop	{r4, r5, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	00004e68 	.word	0x00004e68

0000193c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    193c:	4770      	bx	lr
    193e:	46c0      	nop			; (mov r8, r8)

00001940 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1940:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1942:	4b0a      	ldr	r3, [pc, #40]	; (196c <_sercom_set_handler+0x2c>)
    1944:	781b      	ldrb	r3, [r3, #0]
    1946:	2b00      	cmp	r3, #0
    1948:	d10c      	bne.n	1964 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    194a:	4f09      	ldr	r7, [pc, #36]	; (1970 <_sercom_set_handler+0x30>)
    194c:	4e09      	ldr	r6, [pc, #36]	; (1974 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    194e:	4d0a      	ldr	r5, [pc, #40]	; (1978 <_sercom_set_handler+0x38>)
    1950:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1952:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1954:	195a      	adds	r2, r3, r5
    1956:	6014      	str	r4, [r2, #0]
    1958:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    195a:	2b18      	cmp	r3, #24
    195c:	d1f9      	bne.n	1952 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    195e:	2201      	movs	r2, #1
    1960:	4b02      	ldr	r3, [pc, #8]	; (196c <_sercom_set_handler+0x2c>)
    1962:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1964:	0080      	lsls	r0, r0, #2
    1966:	4b02      	ldr	r3, [pc, #8]	; (1970 <_sercom_set_handler+0x30>)
    1968:	50c1      	str	r1, [r0, r3]
}
    196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    196c:	20000aaa 	.word	0x20000aaa
    1970:	20000aac 	.word	0x20000aac
    1974:	0000193d 	.word	0x0000193d
    1978:	20000b30 	.word	0x20000b30

0000197c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    197c:	b510      	push	{r4, lr}
    197e:	b082      	sub	sp, #8
    1980:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1982:	4668      	mov	r0, sp
    1984:	4905      	ldr	r1, [pc, #20]	; (199c <_sercom_get_interrupt_vector+0x20>)
    1986:	2206      	movs	r2, #6
    1988:	4b05      	ldr	r3, [pc, #20]	; (19a0 <_sercom_get_interrupt_vector+0x24>)
    198a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    198c:	1c20      	adds	r0, r4, #0
    198e:	4b05      	ldr	r3, [pc, #20]	; (19a4 <_sercom_get_interrupt_vector+0x28>)
    1990:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1992:	466b      	mov	r3, sp
    1994:	5618      	ldrsb	r0, [r3, r0]
}
    1996:	b002      	add	sp, #8
    1998:	bd10      	pop	{r4, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	00004e80 	.word	0x00004e80
    19a0:	00002aad 	.word	0x00002aad
    19a4:	00001901 	.word	0x00001901

000019a8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    19a8:	b508      	push	{r3, lr}
    19aa:	4b02      	ldr	r3, [pc, #8]	; (19b4 <SERCOM0_Handler+0xc>)
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	2000      	movs	r0, #0
    19b0:	4798      	blx	r3
    19b2:	bd08      	pop	{r3, pc}
    19b4:	20000aac 	.word	0x20000aac

000019b8 <SERCOM1_Handler>:
    19b8:	b508      	push	{r3, lr}
    19ba:	4b02      	ldr	r3, [pc, #8]	; (19c4 <SERCOM1_Handler+0xc>)
    19bc:	685b      	ldr	r3, [r3, #4]
    19be:	2001      	movs	r0, #1
    19c0:	4798      	blx	r3
    19c2:	bd08      	pop	{r3, pc}
    19c4:	20000aac 	.word	0x20000aac

000019c8 <SERCOM2_Handler>:
    19c8:	b508      	push	{r3, lr}
    19ca:	4b02      	ldr	r3, [pc, #8]	; (19d4 <SERCOM2_Handler+0xc>)
    19cc:	689b      	ldr	r3, [r3, #8]
    19ce:	2002      	movs	r0, #2
    19d0:	4798      	blx	r3
    19d2:	bd08      	pop	{r3, pc}
    19d4:	20000aac 	.word	0x20000aac

000019d8 <SERCOM3_Handler>:
    19d8:	b508      	push	{r3, lr}
    19da:	4b02      	ldr	r3, [pc, #8]	; (19e4 <SERCOM3_Handler+0xc>)
    19dc:	68db      	ldr	r3, [r3, #12]
    19de:	2003      	movs	r0, #3
    19e0:	4798      	blx	r3
    19e2:	bd08      	pop	{r3, pc}
    19e4:	20000aac 	.word	0x20000aac

000019e8 <SERCOM4_Handler>:
    19e8:	b508      	push	{r3, lr}
    19ea:	4b02      	ldr	r3, [pc, #8]	; (19f4 <SERCOM4_Handler+0xc>)
    19ec:	691b      	ldr	r3, [r3, #16]
    19ee:	2004      	movs	r0, #4
    19f0:	4798      	blx	r3
    19f2:	bd08      	pop	{r3, pc}
    19f4:	20000aac 	.word	0x20000aac

000019f8 <SERCOM5_Handler>:
    19f8:	b508      	push	{r3, lr}
    19fa:	4b02      	ldr	r3, [pc, #8]	; (1a04 <SERCOM5_Handler+0xc>)
    19fc:	695b      	ldr	r3, [r3, #20]
    19fe:	2005      	movs	r0, #5
    1a00:	4798      	blx	r3
    1a02:	bd08      	pop	{r3, pc}
    1a04:	20000aac 	.word	0x20000aac

00001a08 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a0a:	465f      	mov	r7, fp
    1a0c:	4656      	mov	r6, sl
    1a0e:	464d      	mov	r5, r9
    1a10:	4644      	mov	r4, r8
    1a12:	b4f0      	push	{r4, r5, r6, r7}
    1a14:	b091      	sub	sp, #68	; 0x44
    1a16:	1c05      	adds	r5, r0, #0
    1a18:	1c0c      	adds	r4, r1, #0
    1a1a:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1a1c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a1e:	1c08      	adds	r0, r1, #0
    1a20:	4bce      	ldr	r3, [pc, #824]	; (1d5c <usart_init+0x354>)
    1a22:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a24:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1a26:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a28:	07d2      	lsls	r2, r2, #31
    1a2a:	d500      	bpl.n	1a2e <usart_init+0x26>
    1a2c:	e18e      	b.n	1d4c <usart_init+0x344>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a2e:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1a30:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a32:	0792      	lsls	r2, r2, #30
    1a34:	d500      	bpl.n	1a38 <usart_init+0x30>
    1a36:	e189      	b.n	1d4c <usart_init+0x344>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1a38:	49c9      	ldr	r1, [pc, #804]	; (1d60 <usart_init+0x358>)
    1a3a:	69ca      	ldr	r2, [r1, #28]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1a3c:	1c47      	adds	r7, r0, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1a3e:	3b1b      	subs	r3, #27
    1a40:	40bb      	lsls	r3, r7
    1a42:	4313      	orrs	r3, r2
    1a44:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1a46:	a90f      	add	r1, sp, #60	; 0x3c
    1a48:	2735      	movs	r7, #53	; 0x35
    1a4a:	5df3      	ldrb	r3, [r6, r7]
    1a4c:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a4e:	3013      	adds	r0, #19

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1a50:	b2c3      	uxtb	r3, r0
    1a52:	9302      	str	r3, [sp, #8]
    1a54:	1c18      	adds	r0, r3, #0
    1a56:	4bc3      	ldr	r3, [pc, #780]	; (1d64 <usart_init+0x35c>)
    1a58:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1a5a:	9802      	ldr	r0, [sp, #8]
    1a5c:	4bc2      	ldr	r3, [pc, #776]	; (1d68 <usart_init+0x360>)
    1a5e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1a60:	5df0      	ldrb	r0, [r6, r7]
    1a62:	2100      	movs	r1, #0
    1a64:	4bc1      	ldr	r3, [pc, #772]	; (1d6c <usart_init+0x364>)
    1a66:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1a68:	7af3      	ldrb	r3, [r6, #11]
    1a6a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1a6c:	232c      	movs	r3, #44	; 0x2c
    1a6e:	5cf3      	ldrb	r3, [r6, r3]
    1a70:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1a72:	232d      	movs	r3, #45	; 0x2d
    1a74:	5cf3      	ldrb	r3, [r6, r3]
    1a76:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1a78:	7ef3      	ldrb	r3, [r6, #27]
    1a7a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1a7c:	2324      	movs	r3, #36	; 0x24
    1a7e:	5cf3      	ldrb	r3, [r6, r3]
    1a80:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a82:	682b      	ldr	r3, [r5, #0]
    1a84:	4698      	mov	r8, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a86:	1c18      	adds	r0, r3, #0
    1a88:	4bb4      	ldr	r3, [pc, #720]	; (1d5c <usart_init+0x354>)
    1a8a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a8c:	3013      	adds	r0, #19
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1a8e:	2200      	movs	r2, #0
    1a90:	230e      	movs	r3, #14
    1a92:	a906      	add	r1, sp, #24
    1a94:	468c      	mov	ip, r1
    1a96:	4463      	add	r3, ip
    1a98:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1a9a:	8a33      	ldrh	r3, [r6, #16]
    1a9c:	469a      	mov	sl, r3
    1a9e:	2380      	movs	r3, #128	; 0x80
    1aa0:	01db      	lsls	r3, r3, #7
    1aa2:	459a      	cmp	sl, r3
    1aa4:	d019      	beq.n	1ada <usart_init+0xd2>
    1aa6:	d804      	bhi.n	1ab2 <usart_init+0xaa>
    1aa8:	2380      	movs	r3, #128	; 0x80
    1aaa:	019b      	lsls	r3, r3, #6
    1aac:	459a      	cmp	sl, r3
    1aae:	d00a      	beq.n	1ac6 <usart_init+0xbe>
    1ab0:	e12d      	b.n	1d0e <usart_init+0x306>
    1ab2:	23c0      	movs	r3, #192	; 0xc0
    1ab4:	01db      	lsls	r3, r3, #7
    1ab6:	459a      	cmp	sl, r3
    1ab8:	d00a      	beq.n	1ad0 <usart_init+0xc8>
    1aba:	2380      	movs	r3, #128	; 0x80
    1abc:	021b      	lsls	r3, r3, #8
    1abe:	459a      	cmp	sl, r3
    1ac0:	d100      	bne.n	1ac4 <usart_init+0xbc>
    1ac2:	e129      	b.n	1d18 <usart_init+0x310>
    1ac4:	e123      	b.n	1d0e <usart_init+0x306>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1ac6:	2310      	movs	r3, #16
    1ac8:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1aca:	3b0f      	subs	r3, #15
    1acc:	9307      	str	r3, [sp, #28]
    1ace:	e127      	b.n	1d20 <usart_init+0x318>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1ad0:	2308      	movs	r3, #8
    1ad2:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1ad4:	3b07      	subs	r3, #7
    1ad6:	9307      	str	r3, [sp, #28]
    1ad8:	e122      	b.n	1d20 <usart_init+0x318>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1ada:	6833      	ldr	r3, [r6, #0]
    1adc:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1ade:	68f3      	ldr	r3, [r6, #12]
    1ae0:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1ae2:	6973      	ldr	r3, [r6, #20]
    1ae4:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ae6:	7e33      	ldrb	r3, [r6, #24]
    1ae8:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1aea:	232e      	movs	r3, #46	; 0x2e
    1aec:	5cf3      	ldrb	r3, [r6, r3]
    1aee:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1af0:	6872      	ldr	r2, [r6, #4]
    1af2:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1af4:	2a00      	cmp	r2, #0
    1af6:	d015      	beq.n	1b24 <usart_init+0x11c>
    1af8:	2380      	movs	r3, #128	; 0x80
    1afa:	055b      	lsls	r3, r3, #21
    1afc:	429a      	cmp	r2, r3
    1afe:	d136      	bne.n	1b6e <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1b00:	232f      	movs	r3, #47	; 0x2f
    1b02:	5cf3      	ldrb	r3, [r6, r3]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d136      	bne.n	1b76 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1b08:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b0a:	4699      	mov	r9, r3
    1b0c:	b2c0      	uxtb	r0, r0
    1b0e:	4b98      	ldr	r3, [pc, #608]	; (1d70 <usart_init+0x368>)
    1b10:	4798      	blx	r3
    1b12:	1c01      	adds	r1, r0, #0
    1b14:	4648      	mov	r0, r9
    1b16:	220e      	movs	r2, #14
    1b18:	ab06      	add	r3, sp, #24
    1b1a:	469c      	mov	ip, r3
    1b1c:	4462      	add	r2, ip
    1b1e:	4b95      	ldr	r3, [pc, #596]	; (1d74 <usart_init+0x36c>)
    1b20:	4798      	blx	r3
    1b22:	e025      	b.n	1b70 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1b24:	2308      	movs	r3, #8
    1b26:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b28:	2300      	movs	r3, #0
    1b2a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1b2c:	232f      	movs	r3, #47	; 0x2f
    1b2e:	5cf3      	ldrb	r3, [r6, r3]
    1b30:	2b00      	cmp	r3, #0
    1b32:	d00b      	beq.n	1b4c <usart_init+0x144>
				status_code =
    1b34:	464b      	mov	r3, r9
    1b36:	9300      	str	r3, [sp, #0]
    1b38:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1b3a:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1b3c:	220e      	movs	r2, #14
    1b3e:	ab06      	add	r3, sp, #24
    1b40:	469c      	mov	ip, r3
    1b42:	4462      	add	r2, ip
    1b44:	9b07      	ldr	r3, [sp, #28]
    1b46:	4f8c      	ldr	r7, [pc, #560]	; (1d78 <usart_init+0x370>)
    1b48:	47b8      	blx	r7
    1b4a:	e011      	b.n	1b70 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1b4c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b4e:	1c1f      	adds	r7, r3, #0
    1b50:	b2c0      	uxtb	r0, r0
    1b52:	4b87      	ldr	r3, [pc, #540]	; (1d70 <usart_init+0x368>)
    1b54:	4798      	blx	r3
    1b56:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1b58:	464b      	mov	r3, r9
    1b5a:	9300      	str	r3, [sp, #0]
    1b5c:	1c38      	adds	r0, r7, #0
    1b5e:	220e      	movs	r2, #14
    1b60:	ab06      	add	r3, sp, #24
    1b62:	469c      	mov	ip, r3
    1b64:	4462      	add	r2, ip
    1b66:	9b07      	ldr	r3, [sp, #28]
    1b68:	4f83      	ldr	r7, [pc, #524]	; (1d78 <usart_init+0x370>)
    1b6a:	47b8      	blx	r7
    1b6c:	e000      	b.n	1b70 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    1b6e:	2000      	movs	r0, #0
    1b70:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1b72:	d000      	beq.n	1b76 <usart_init+0x16e>
    1b74:	e0ea      	b.n	1d4c <usart_init+0x344>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1b76:	7e73      	ldrb	r3, [r6, #25]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d002      	beq.n	1b82 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1b7c:	7eb3      	ldrb	r3, [r6, #26]
    1b7e:	4642      	mov	r2, r8
    1b80:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1b82:	682a      	ldr	r2, [r5, #0]
    1b84:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b86:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d1fc      	bne.n	1b86 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1b8c:	330e      	adds	r3, #14
    1b8e:	aa06      	add	r2, sp, #24
    1b90:	4694      	mov	ip, r2
    1b92:	4463      	add	r3, ip
    1b94:	881b      	ldrh	r3, [r3, #0]
    1b96:	4642      	mov	r2, r8
    1b98:	8193      	strh	r3, [r2, #12]
    1b9a:	9b02      	ldr	r3, [sp, #8]
    1b9c:	465a      	mov	r2, fp
    1b9e:	4313      	orrs	r3, r2
    1ba0:	9a03      	ldr	r2, [sp, #12]
    1ba2:	4313      	orrs	r3, r2
    1ba4:	433b      	orrs	r3, r7
    1ba6:	4652      	mov	r2, sl
    1ba8:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1baa:	9a04      	ldr	r2, [sp, #16]
    1bac:	0212      	lsls	r2, r2, #8
    1bae:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1bb0:	9a05      	ldr	r2, [sp, #20]
    1bb2:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    1bb4:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1bb6:	232f      	movs	r3, #47	; 0x2f
    1bb8:	5cf3      	ldrb	r3, [r6, r3]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d101      	bne.n	1bc2 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1bbe:	3304      	adds	r3, #4
    1bc0:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1bc2:	2324      	movs	r3, #36	; 0x24
    1bc4:	5cf3      	ldrb	r3, [r6, r3]
    1bc6:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1bc8:	7e72      	ldrb	r2, [r6, #25]
    1bca:	0293      	lsls	r3, r2, #10
    1bcc:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1bce:	2226      	movs	r2, #38	; 0x26
    1bd0:	5cb2      	ldrb	r2, [r6, r2]
    1bd2:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1bd4:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1bd6:	222c      	movs	r2, #44	; 0x2c
    1bd8:	5cb2      	ldrb	r2, [r6, r2]
    1bda:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1bdc:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1bde:	222d      	movs	r2, #45	; 0x2d
    1be0:	5cb2      	ldrb	r2, [r6, r2]
    1be2:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1be4:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1be6:	7af1      	ldrb	r1, [r6, #11]
    1be8:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1bea:	8933      	ldrh	r3, [r6, #8]
    1bec:	2bff      	cmp	r3, #255	; 0xff
    1bee:	d004      	beq.n	1bfa <usart_init+0x1f2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1bf0:	2280      	movs	r2, #128	; 0x80
    1bf2:	0452      	lsls	r2, r2, #17
    1bf4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1bf6:	4319      	orrs	r1, r3
    1bf8:	e005      	b.n	1c06 <usart_init+0x1fe>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1bfa:	7ef3      	ldrb	r3, [r6, #27]
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d002      	beq.n	1c06 <usart_init+0x1fe>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1c00:	2380      	movs	r3, #128	; 0x80
    1c02:	04db      	lsls	r3, r3, #19
    1c04:	431f      	orrs	r7, r3
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1c06:	4643      	mov	r3, r8
    1c08:	689a      	ldr	r2, [r3, #8]
						| config->lin_header_delay
    1c0a:	8c30      	ldrh	r0, [r6, #32]
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1c0c:	2307      	movs	r3, #7
    1c0e:	4013      	ands	r3, r2
						| config->lin_header_delay
    1c10:	4303      	orrs	r3, r0
						| config->lin_break_length;
    1c12:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    1c14:	4313      	orrs	r3, r2
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1c16:	4642      	mov	r2, r8
    1c18:	6093      	str	r3, [r2, #8]
						| config->lin_header_delay
						| config->lin_break_length;

	if (config->lin_node != LIN_INVALID_MODE) {
    1c1a:	69f3      	ldr	r3, [r6, #28]
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d002      	beq.n	1c26 <usart_init+0x21e>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1c20:	4a56      	ldr	r2, [pc, #344]	; (1d7c <usart_init+0x374>)
    1c22:	4017      	ands	r7, r2
		ctrla |= config->lin_node;
    1c24:	431f      	orrs	r7, r3
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1c26:	2334      	movs	r3, #52	; 0x34
    1c28:	5cf3      	ldrb	r3, [r6, r3]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d103      	bne.n	1c36 <usart_init+0x22e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1c2e:	4b54      	ldr	r3, [pc, #336]	; (1d80 <usart_init+0x378>)
    1c30:	789b      	ldrb	r3, [r3, #2]
    1c32:	079b      	lsls	r3, r3, #30
    1c34:	d501      	bpl.n	1c3a <usart_init+0x232>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1c36:	2380      	movs	r3, #128	; 0x80
    1c38:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1c3a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1c3c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d1fc      	bne.n	1c3c <usart_init+0x234>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1c42:	4643      	mov	r3, r8
    1c44:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1c46:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1c48:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d1fc      	bne.n	1c48 <usart_init+0x240>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1c4e:	4643      	mov	r3, r8
    1c50:	601f      	str	r7, [r3, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1c52:	681a      	ldr	r2, [r3, #0]
    1c54:	23f0      	movs	r3, #240	; 0xf0
    1c56:	051b      	lsls	r3, r3, #20
    1c58:	4013      	ands	r3, r2
    1c5a:	22e0      	movs	r2, #224	; 0xe0
    1c5c:	04d2      	lsls	r2, r2, #19
    1c5e:	4293      	cmp	r3, r2
    1c60:	d042      	beq.n	1ce8 <usart_init+0x2e0>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1c62:	4643      	mov	r3, r8
    1c64:	689b      	ldr	r3, [r3, #8]
    1c66:	2207      	movs	r2, #7
    1c68:	4393      	bics	r3, r2
    1c6a:	4642      	mov	r2, r8
    1c6c:	6093      	str	r3, [r2, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1c6e:	6892      	ldr	r2, [r2, #8]
    1c70:	2325      	movs	r3, #37	; 0x25
    1c72:	5cf3      	ldrb	r3, [r6, r3]
    1c74:	2107      	movs	r1, #7
    1c76:	400b      	ands	r3, r1
    1c78:	4313      	orrs	r3, r2
    1c7a:	4642      	mov	r2, r8
    1c7c:	6093      	str	r3, [r2, #8]
    1c7e:	e033      	b.n	1ce8 <usart_init+0x2e0>
    1c80:	b2f9      	uxtb	r1, r7
    1c82:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c84:	aa0a      	add	r2, sp, #40	; 0x28
    1c86:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1c88:	2800      	cmp	r0, #0
    1c8a:	d102      	bne.n	1c92 <usart_init+0x28a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1c8c:	1c20      	adds	r0, r4, #0
    1c8e:	4b3d      	ldr	r3, [pc, #244]	; (1d84 <usart_init+0x37c>)
    1c90:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1c92:	1c43      	adds	r3, r0, #1
    1c94:	d005      	beq.n	1ca2 <usart_init+0x29a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1c96:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1c98:	0c00      	lsrs	r0, r0, #16
    1c9a:	b2c0      	uxtb	r0, r0
    1c9c:	1c31      	adds	r1, r6, #0
    1c9e:	4b3a      	ldr	r3, [pc, #232]	; (1d88 <usart_init+0x380>)
    1ca0:	4798      	blx	r3
    1ca2:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1ca4:	2f04      	cmp	r7, #4
    1ca6:	d1eb      	bne.n	1c80 <usart_init+0x278>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1ca8:	2300      	movs	r3, #0
    1caa:	60eb      	str	r3, [r5, #12]
    1cac:	612b      	str	r3, [r5, #16]
    1cae:	616b      	str	r3, [r5, #20]
    1cb0:	61ab      	str	r3, [r5, #24]
    1cb2:	61eb      	str	r3, [r5, #28]
    1cb4:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1cb6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1cb8:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1cba:	2200      	movs	r2, #0
    1cbc:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1cbe:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1cc0:	3330      	adds	r3, #48	; 0x30
    1cc2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1cc4:	3301      	adds	r3, #1
    1cc6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1cc8:	3301      	adds	r3, #1
    1cca:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1ccc:	3301      	adds	r3, #1
    1cce:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1cd0:	6828      	ldr	r0, [r5, #0]
    1cd2:	4b22      	ldr	r3, [pc, #136]	; (1d5c <usart_init+0x354>)
    1cd4:	4798      	blx	r3
    1cd6:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1cd8:	492c      	ldr	r1, [pc, #176]	; (1d8c <usart_init+0x384>)
    1cda:	4b2d      	ldr	r3, [pc, #180]	; (1d90 <usart_init+0x388>)
    1cdc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1cde:	00a4      	lsls	r4, r4, #2
    1ce0:	4b2c      	ldr	r3, [pc, #176]	; (1d94 <usart_init+0x38c>)
    1ce2:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1ce4:	2300      	movs	r3, #0
    1ce6:	e031      	b.n	1d4c <usart_init+0x344>
    1ce8:	ab0e      	add	r3, sp, #56	; 0x38
    1cea:	2280      	movs	r2, #128	; 0x80
    1cec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1cee:	2200      	movs	r2, #0
    1cf0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1cf2:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1cf4:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    1cf6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1cf8:	930a      	str	r3, [sp, #40]	; 0x28
    1cfa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1cfc:	930b      	str	r3, [sp, #44]	; 0x2c
    1cfe:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1d00:	930c      	str	r3, [sp, #48]	; 0x30
    1d02:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1d04:	9302      	str	r3, [sp, #8]
    1d06:	930d      	str	r3, [sp, #52]	; 0x34
    1d08:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1d0a:	ae0e      	add	r6, sp, #56	; 0x38
    1d0c:	e7b8      	b.n	1c80 <usart_init+0x278>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1d0e:	2310      	movs	r3, #16
    1d10:	4699      	mov	r9, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d12:	2300      	movs	r3, #0
    1d14:	9307      	str	r3, [sp, #28]
    1d16:	e003      	b.n	1d20 <usart_init+0x318>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1d18:	2303      	movs	r3, #3
    1d1a:	4699      	mov	r9, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d1c:	2300      	movs	r3, #0
    1d1e:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1d20:	6833      	ldr	r3, [r6, #0]
    1d22:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1d24:	68f3      	ldr	r3, [r6, #12]
    1d26:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1d28:	6973      	ldr	r3, [r6, #20]
    1d2a:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d2c:	7e33      	ldrb	r3, [r6, #24]
    1d2e:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d30:	232e      	movs	r3, #46	; 0x2e
    1d32:	5cf3      	ldrb	r3, [r6, r3]
    1d34:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1d36:	6872      	ldr	r2, [r6, #4]
    1d38:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1d3a:	2a00      	cmp	r2, #0
    1d3c:	d100      	bne.n	1d40 <usart_init+0x338>
    1d3e:	e6f5      	b.n	1b2c <usart_init+0x124>
    1d40:	2380      	movs	r3, #128	; 0x80
    1d42:	055b      	lsls	r3, r3, #21
    1d44:	429a      	cmp	r2, r3
    1d46:	d100      	bne.n	1d4a <usart_init+0x342>
    1d48:	e6da      	b.n	1b00 <usart_init+0xf8>
    1d4a:	e714      	b.n	1b76 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1d4c:	1c18      	adds	r0, r3, #0
    1d4e:	b011      	add	sp, #68	; 0x44
    1d50:	bc3c      	pop	{r2, r3, r4, r5}
    1d52:	4690      	mov	r8, r2
    1d54:	4699      	mov	r9, r3
    1d56:	46a2      	mov	sl, r4
    1d58:	46ab      	mov	fp, r5
    1d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d5c:	00001901 	.word	0x00001901
    1d60:	40000800 	.word	0x40000800
    1d64:	0000261d 	.word	0x0000261d
    1d68:	000025b5 	.word	0x000025b5
    1d6c:	00001729 	.word	0x00001729
    1d70:	00002641 	.word	0x00002641
    1d74:	00001539 	.word	0x00001539
    1d78:	00001561 	.word	0x00001561
    1d7c:	f0ffffff 	.word	0xf0ffffff
    1d80:	41002000 	.word	0x41002000
    1d84:	00001775 	.word	0x00001775
    1d88:	00002719 	.word	0x00002719
    1d8c:	00001e35 	.word	0x00001e35
    1d90:	00001941 	.word	0x00001941
    1d94:	20000b30 	.word	0x20000b30

00001d98 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1d98:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d9a:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1d9c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1d9e:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1da0:	2c00      	cmp	r4, #0
    1da2:	d00d      	beq.n	1dc0 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1da4:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
    1da6:	b280      	uxth	r0, r0
		return STATUS_BUSY;
    1da8:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1daa:	2800      	cmp	r0, #0
    1dac:	d108      	bne.n	1dc0 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1dae:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1db0:	2a00      	cmp	r2, #0
    1db2:	d1fc      	bne.n	1dae <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1db4:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1db6:	2102      	movs	r1, #2
    1db8:	7e1a      	ldrb	r2, [r3, #24]
    1dba:	420a      	tst	r2, r1
    1dbc:	d0fc      	beq.n	1db8 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1dbe:	2200      	movs	r2, #0
}
    1dc0:	1c10      	adds	r0, r2, #0
    1dc2:	bd10      	pop	{r4, pc}

00001dc4 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1dc4:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dc6:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1dc8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1dca:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1dcc:	2a00      	cmp	r2, #0
    1dce:	d02f      	beq.n	1e30 <usart_read_wait+0x6c>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1dd0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1dd2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1dd4:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1dd6:	2a00      	cmp	r2, #0
    1dd8:	d12a      	bne.n	1e30 <usart_read_wait+0x6c>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1dda:	7e22      	ldrb	r2, [r4, #24]
    1ddc:	0752      	lsls	r2, r2, #29
    1dde:	d527      	bpl.n	1e30 <usart_read_wait+0x6c>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1de0:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1de2:	2b00      	cmp	r3, #0
    1de4:	d1fc      	bne.n	1de0 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1de6:	8b63      	ldrh	r3, [r4, #26]
    1de8:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1dea:	065a      	lsls	r2, r3, #25
    1dec:	d01d      	beq.n	1e2a <usart_read_wait+0x66>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1dee:	079a      	lsls	r2, r3, #30
    1df0:	d503      	bpl.n	1dfa <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1df2:	2302      	movs	r3, #2
    1df4:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    1df6:	3318      	adds	r3, #24
    1df8:	e01a      	b.n	1e30 <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1dfa:	075a      	lsls	r2, r3, #29
    1dfc:	d503      	bpl.n	1e06 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1dfe:	2304      	movs	r3, #4
    1e00:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    1e02:	331a      	adds	r3, #26
    1e04:	e014      	b.n	1e30 <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1e06:	07da      	lsls	r2, r3, #31
    1e08:	d503      	bpl.n	1e12 <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1e0a:	2301      	movs	r3, #1
    1e0c:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1e0e:	3312      	adds	r3, #18
    1e10:	e00e      	b.n	1e30 <usart_read_wait+0x6c>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1e12:	06da      	lsls	r2, r3, #27
    1e14:	d503      	bpl.n	1e1e <usart_read_wait+0x5a>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1e16:	2310      	movs	r3, #16
    1e18:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1e1a:	3332      	adds	r3, #50	; 0x32
    1e1c:	e008      	b.n	1e30 <usart_read_wait+0x6c>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1e1e:	069b      	lsls	r3, r3, #26
    1e20:	d503      	bpl.n	1e2a <usart_read_wait+0x66>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1e22:	2320      	movs	r3, #32
    1e24:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1e26:	3321      	adds	r3, #33	; 0x21
    1e28:	e002      	b.n	1e30 <usart_read_wait+0x6c>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1e2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1e2c:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1e2e:	2300      	movs	r3, #0
}
    1e30:	1c18      	adds	r0, r3, #0
    1e32:	bd10      	pop	{r4, pc}

00001e34 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1e36:	0080      	lsls	r0, r0, #2
    1e38:	4b61      	ldr	r3, [pc, #388]	; (1fc0 <_usart_interrupt_handler+0x18c>)
    1e3a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1e3c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1e3e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1e40:	2b00      	cmp	r3, #0
    1e42:	d1fc      	bne.n	1e3e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1e44:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1e46:	7da6      	ldrb	r6, [r4, #22]
    1e48:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    1e4a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1e4c:	5ceb      	ldrb	r3, [r5, r3]
    1e4e:	2230      	movs	r2, #48	; 0x30
    1e50:	5caf      	ldrb	r7, [r5, r2]
    1e52:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1e54:	07f3      	lsls	r3, r6, #31
    1e56:	d522      	bpl.n	1e9e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1e58:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e5a:	b29b      	uxth	r3, r3
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d01c      	beq.n	1e9a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1e62:	7813      	ldrb	r3, [r2, #0]
    1e64:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1e66:	1c51      	adds	r1, r2, #1
    1e68:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e6a:	7969      	ldrb	r1, [r5, #5]
    1e6c:	2901      	cmp	r1, #1
    1e6e:	d001      	beq.n	1e74 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e70:	b29b      	uxth	r3, r3
    1e72:	e004      	b.n	1e7e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1e74:	7851      	ldrb	r1, [r2, #1]
    1e76:	0209      	lsls	r1, r1, #8
    1e78:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1e7a:	3202      	adds	r2, #2
    1e7c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1e7e:	05db      	lsls	r3, r3, #23
    1e80:	0ddb      	lsrs	r3, r3, #23
    1e82:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1e84:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e86:	3b01      	subs	r3, #1
    1e88:	b29b      	uxth	r3, r3
    1e8a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d106      	bne.n	1e9e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e90:	3301      	adds	r3, #1
    1e92:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1e94:	3301      	adds	r3, #1
    1e96:	75a3      	strb	r3, [r4, #22]
    1e98:	e001      	b.n	1e9e <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e9a:	2301      	movs	r3, #1
    1e9c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1e9e:	07b3      	lsls	r3, r6, #30
    1ea0:	d509      	bpl.n	1eb6 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1ea2:	2302      	movs	r3, #2
    1ea4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1ea6:	2200      	movs	r2, #0
    1ea8:	3331      	adds	r3, #49	; 0x31
    1eaa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1eac:	07fb      	lsls	r3, r7, #31
    1eae:	d502      	bpl.n	1eb6 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1eb0:	1c28      	adds	r0, r5, #0
    1eb2:	68eb      	ldr	r3, [r5, #12]
    1eb4:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1eb6:	0773      	lsls	r3, r6, #29
    1eb8:	d563      	bpl.n	1f82 <_usart_interrupt_handler+0x14e>

		if (module->remaining_rx_buffer_length) {
    1eba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ebc:	b29b      	uxth	r3, r3
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	d05d      	beq.n	1f7e <_usart_interrupt_handler+0x14a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1ec2:	8b63      	ldrh	r3, [r4, #26]
    1ec4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1ec6:	071a      	lsls	r2, r3, #28
    1ec8:	d402      	bmi.n	1ed0 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1eca:	227f      	movs	r2, #127	; 0x7f
    1ecc:	4013      	ands	r3, r2
    1ece:	e001      	b.n	1ed4 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1ed0:	2277      	movs	r2, #119	; 0x77
    1ed2:	4013      	ands	r3, r2
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    1ed4:	065a      	lsls	r2, r3, #25
    1ed6:	d501      	bpl.n	1edc <_usart_interrupt_handler+0xa8>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    1ed8:	2240      	movs	r2, #64	; 0x40
    1eda:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1edc:	2b00      	cmp	r3, #0
    1ede:	d02c      	beq.n	1f3a <_usart_interrupt_handler+0x106>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1ee0:	079a      	lsls	r2, r3, #30
    1ee2:	d505      	bpl.n	1ef0 <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1ee4:	221a      	movs	r2, #26
    1ee6:	2332      	movs	r3, #50	; 0x32
    1ee8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1eea:	3b30      	subs	r3, #48	; 0x30
    1eec:	8363      	strh	r3, [r4, #26]
    1eee:	e01e      	b.n	1f2e <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1ef0:	075a      	lsls	r2, r3, #29
    1ef2:	d505      	bpl.n	1f00 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1ef4:	221e      	movs	r2, #30
    1ef6:	2332      	movs	r3, #50	; 0x32
    1ef8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1efa:	3b2e      	subs	r3, #46	; 0x2e
    1efc:	8363      	strh	r3, [r4, #26]
    1efe:	e016      	b.n	1f2e <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1f00:	07da      	lsls	r2, r3, #31
    1f02:	d505      	bpl.n	1f10 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1f04:	2213      	movs	r2, #19
    1f06:	2332      	movs	r3, #50	; 0x32
    1f08:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1f0a:	3b31      	subs	r3, #49	; 0x31
    1f0c:	8363      	strh	r3, [r4, #26]
    1f0e:	e00e      	b.n	1f2e <_usart_interrupt_handler+0xfa>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1f10:	06da      	lsls	r2, r3, #27
    1f12:	d505      	bpl.n	1f20 <_usart_interrupt_handler+0xec>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1f14:	2242      	movs	r2, #66	; 0x42
    1f16:	2332      	movs	r3, #50	; 0x32
    1f18:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1f1a:	3b22      	subs	r3, #34	; 0x22
    1f1c:	8363      	strh	r3, [r4, #26]
    1f1e:	e006      	b.n	1f2e <_usart_interrupt_handler+0xfa>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1f20:	069b      	lsls	r3, r3, #26
    1f22:	d504      	bpl.n	1f2e <_usart_interrupt_handler+0xfa>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1f24:	2241      	movs	r2, #65	; 0x41
    1f26:	2332      	movs	r3, #50	; 0x32
    1f28:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1f2a:	3b12      	subs	r3, #18
    1f2c:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1f2e:	077b      	lsls	r3, r7, #29
    1f30:	d527      	bpl.n	1f82 <_usart_interrupt_handler+0x14e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1f32:	1c28      	adds	r0, r5, #0
    1f34:	696b      	ldr	r3, [r5, #20]
    1f36:	4798      	blx	r3
    1f38:	e023      	b.n	1f82 <_usart_interrupt_handler+0x14e>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1f3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1f3c:	05db      	lsls	r3, r3, #23
    1f3e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1f40:	b2da      	uxtb	r2, r3
    1f42:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1f44:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1f46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1f48:	1c51      	adds	r1, r2, #1
    1f4a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f4c:	7969      	ldrb	r1, [r5, #5]
    1f4e:	2901      	cmp	r1, #1
    1f50:	d104      	bne.n	1f5c <_usart_interrupt_handler+0x128>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1f52:	0a1b      	lsrs	r3, r3, #8
    1f54:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1f58:	3301      	adds	r3, #1
    1f5a:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1f5c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1f5e:	3b01      	subs	r3, #1
    1f60:	b29b      	uxth	r3, r3
    1f62:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1f64:	2b00      	cmp	r3, #0
    1f66:	d10c      	bne.n	1f82 <_usart_interrupt_handler+0x14e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f68:	3304      	adds	r3, #4
    1f6a:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1f6c:	2200      	movs	r2, #0
    1f6e:	332e      	adds	r3, #46	; 0x2e
    1f70:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1f72:	07bb      	lsls	r3, r7, #30
    1f74:	d505      	bpl.n	1f82 <_usart_interrupt_handler+0x14e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1f76:	1c28      	adds	r0, r5, #0
    1f78:	692b      	ldr	r3, [r5, #16]
    1f7a:	4798      	blx	r3
    1f7c:	e001      	b.n	1f82 <_usart_interrupt_handler+0x14e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f7e:	2304      	movs	r3, #4
    1f80:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1f82:	06f3      	lsls	r3, r6, #27
    1f84:	d507      	bpl.n	1f96 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1f86:	2310      	movs	r3, #16
    1f88:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1f8a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1f8c:	06fb      	lsls	r3, r7, #27
    1f8e:	d502      	bpl.n	1f96 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1f90:	1c28      	adds	r0, r5, #0
    1f92:	69eb      	ldr	r3, [r5, #28]
    1f94:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1f96:	06b3      	lsls	r3, r6, #26
    1f98:	d507      	bpl.n	1faa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1f9a:	2320      	movs	r3, #32
    1f9c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1f9e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1fa0:	073b      	lsls	r3, r7, #28
    1fa2:	d502      	bpl.n	1faa <_usart_interrupt_handler+0x176>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1fa4:	1c28      	adds	r0, r5, #0
    1fa6:	69ab      	ldr	r3, [r5, #24]
    1fa8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1faa:	0733      	lsls	r3, r6, #28
    1fac:	d507      	bpl.n	1fbe <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1fae:	2308      	movs	r3, #8
    1fb0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1fb2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1fb4:	06bb      	lsls	r3, r7, #26
    1fb6:	d502      	bpl.n	1fbe <_usart_interrupt_handler+0x18a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1fb8:	6a2b      	ldr	r3, [r5, #32]
    1fba:	1c28      	adds	r0, r5, #0
    1fbc:	4798      	blx	r3
		}
	}
#endif
}
    1fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fc0:	20000b30 	.word	0x20000b30

00001fc4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1fc4:	b508      	push	{r3, lr}
	switch (clock_source) {
    1fc6:	2807      	cmp	r0, #7
    1fc8:	d803      	bhi.n	1fd2 <system_clock_source_get_hz+0xe>
    1fca:	0080      	lsls	r0, r0, #2
    1fcc:	4b0f      	ldr	r3, [pc, #60]	; (200c <STACK_SIZE+0xc>)
    1fce:	581b      	ldr	r3, [r3, r0]
    1fd0:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1fd2:	2000      	movs	r0, #0
    1fd4:	e018      	b.n	2008 <STACK_SIZE+0x8>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1fd6:	4b0e      	ldr	r3, [pc, #56]	; (2010 <STACK_SIZE+0x10>)
    1fd8:	6858      	ldr	r0, [r3, #4]
    1fda:	e015      	b.n	2008 <STACK_SIZE+0x8>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1fdc:	4b0d      	ldr	r3, [pc, #52]	; (2014 <STACK_SIZE+0x14>)
    1fde:	7d5b      	ldrb	r3, [r3, #21]
    1fe0:	210f      	movs	r1, #15
    1fe2:	4019      	ands	r1, r3
    1fe4:	3101      	adds	r1, #1
    1fe6:	480c      	ldr	r0, [pc, #48]	; (2018 <STACK_SIZE+0x18>)
    1fe8:	4b0c      	ldr	r3, [pc, #48]	; (201c <STACK_SIZE+0x1c>)
    1fea:	4798      	blx	r3
    1fec:	e00c      	b.n	2008 <STACK_SIZE+0x8>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1fee:	4b08      	ldr	r3, [pc, #32]	; (2010 <STACK_SIZE+0x10>)
    1ff0:	6898      	ldr	r0, [r3, #8]
    1ff2:	e009      	b.n	2008 <STACK_SIZE+0x8>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1ff4:	4b07      	ldr	r3, [pc, #28]	; (2014 <STACK_SIZE+0x14>)
    1ff6:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    1ff8:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1ffa:	079b      	lsls	r3, r3, #30
    1ffc:	d504      	bpl.n	2008 <STACK_SIZE+0x8>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1ffe:	4b04      	ldr	r3, [pc, #16]	; (2010 <STACK_SIZE+0x10>)
    2000:	6818      	ldr	r0, [r3, #0]
    2002:	e001      	b.n	2008 <STACK_SIZE+0x8>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2004:	2080      	movs	r0, #128	; 0x80
    2006:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    2008:	bd08      	pop	{r3, pc}
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	00004e88 	.word	0x00004e88
    2010:	20000ac4 	.word	0x20000ac4
    2014:	40001000 	.word	0x40001000
    2018:	02dc6c00 	.word	0x02dc6c00
    201c:	000028e9 	.word	0x000028e9

00002020 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2020:	b5f0      	push	{r4, r5, r6, r7, lr}
    2022:	4657      	mov	r7, sl
    2024:	464e      	mov	r6, r9
    2026:	4645      	mov	r5, r8
    2028:	b4e0      	push	{r5, r6, r7}
	OSC32KCTRL_OSC32K_Type temp = OSC32KCTRL->OSC32K;
    202a:	4e1c      	ldr	r6, [pc, #112]	; (209c <system_clock_source_osc32k_set_config+0x7c>)
    202c:	69b3      	ldr	r3, [r6, #24]
    202e:	469c      	mov	ip, r3


	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2030:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2032:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2034:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2036:	78c3      	ldrb	r3, [r0, #3]
    2038:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    203a:	7944      	ldrb	r4, [r0, #5]

	OSC32KCTRL->OSC32K  = temp;
    203c:	7883      	ldrb	r3, [r0, #2]
    203e:	2001      	movs	r0, #1
    2040:	4003      	ands	r3, r0
    2042:	009b      	lsls	r3, r3, #2
    2044:	469a      	mov	sl, r3
    2046:	2204      	movs	r2, #4
    2048:	4690      	mov	r8, r2
    204a:	4662      	mov	r2, ip
    204c:	4643      	mov	r3, r8
    204e:	439a      	bics	r2, r3
    2050:	1c13      	adds	r3, r2, #0
    2052:	4652      	mov	r2, sl
    2054:	431a      	orrs	r2, r3
    2056:	1c13      	adds	r3, r2, #0
    2058:	4001      	ands	r1, r0
    205a:	00c9      	lsls	r1, r1, #3
    205c:	2208      	movs	r2, #8
    205e:	4393      	bics	r3, r2
    2060:	430b      	orrs	r3, r1
    2062:	464a      	mov	r2, r9
    2064:	4002      	ands	r2, r0
    2066:	0192      	lsls	r2, r2, #6
    2068:	2140      	movs	r1, #64	; 0x40
    206a:	438b      	bics	r3, r1
    206c:	4313      	orrs	r3, r2
    206e:	4007      	ands	r7, r0
    2070:	01ff      	lsls	r7, r7, #7
    2072:	2280      	movs	r2, #128	; 0x80
    2074:	4393      	bics	r3, r2
    2076:	433b      	orrs	r3, r7
    2078:	3a79      	subs	r2, #121	; 0x79
    207a:	4015      	ands	r5, r2
    207c:	022d      	lsls	r5, r5, #8
    207e:	4f08      	ldr	r7, [pc, #32]	; (20a0 <system_clock_source_osc32k_set_config+0x80>)
    2080:	403b      	ands	r3, r7
    2082:	432b      	orrs	r3, r5
    2084:	4004      	ands	r4, r0
    2086:	0320      	lsls	r0, r4, #12
    2088:	4c06      	ldr	r4, [pc, #24]	; (20a4 <system_clock_source_osc32k_set_config+0x84>)
    208a:	401c      	ands	r4, r3
    208c:	4304      	orrs	r4, r0
    208e:	61b4      	str	r4, [r6, #24]
}
    2090:	bc1c      	pop	{r2, r3, r4}
    2092:	4690      	mov	r8, r2
    2094:	4699      	mov	r9, r3
    2096:	46a2      	mov	sl, r4
    2098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	40001400 	.word	0x40001400
    20a0:	fffff8ff 	.word	0xfffff8ff
    20a4:	ffffefff 	.word	0xffffefff

000020a8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    20a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20aa:	465f      	mov	r7, fp
    20ac:	4656      	mov	r6, sl
    20ae:	464d      	mov	r5, r9
    20b0:	4644      	mov	r4, r8
    20b2:	b4f0      	push	{r4, r5, r6, r7}
    20b4:	b083      	sub	sp, #12
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    20b6:	4f30      	ldr	r7, [pc, #192]	; (2178 <system_clock_source_xosc32k_set_config+0xd0>)
    20b8:	8abb      	ldrh	r3, [r7, #20]
    20ba:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    20bc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    20be:	7803      	ldrb	r3, [r0, #0]
    20c0:	425a      	negs	r2, r3
    20c2:	415a      	adcs	r2, r3
    20c4:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    20c6:	7883      	ldrb	r3, [r0, #2]
    20c8:	469b      	mov	fp, r3
	temp.bit.EN32K = config->enable_32khz_output;
    20ca:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    20cc:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    20ce:	7a02      	ldrb	r2, [r0, #8]
    20d0:	9200      	str	r2, [sp, #0]
	temp.bit.WRTLOCK  = config->write_once;
    20d2:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    20d4:	4a29      	ldr	r2, [pc, #164]	; (217c <system_clock_source_xosc32k_set_config+0xd4>)
    20d6:	6841      	ldr	r1, [r0, #4]
    20d8:	6091      	str	r1, [r2, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    20da:	7ac2      	ldrb	r2, [r0, #11]
    20dc:	0092      	lsls	r2, r2, #2
    20de:	4692      	mov	sl, r2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    20e0:	7b82      	ldrb	r2, [r0, #14]
    20e2:	0052      	lsls	r2, r2, #1
    20e4:	4691      	mov	r9, r2
    20e6:	4652      	mov	r2, sl
    20e8:	4649      	mov	r1, r9
    20ea:	430a      	orrs	r2, r1
    20ec:	4691      	mov	r9, r2

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;

	OSC32KCTRL->CFDCTRL.reg =
    20ee:	7b42      	ldrb	r2, [r0, #13]
    20f0:	4692      	mov	sl, r2
    20f2:	464a      	mov	r2, r9
    20f4:	4651      	mov	r1, sl
    20f6:	430a      	orrs	r2, r1
    20f8:	4669      	mov	r1, sp
    20fa:	71ca      	strb	r2, [r1, #7]
    20fc:	79ca      	ldrb	r2, [r1, #7]
    20fe:	75ba      	strb	r2, [r7, #22]
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);

	OSC32KCTRL->EVCTRL.reg =
    2100:	7b00      	ldrb	r0, [r0, #12]
    2102:	75f8      	strb	r0, [r7, #23]
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);

	OSC32KCTRL->XOSC32K = temp;
    2104:	2001      	movs	r0, #1
    2106:	4642      	mov	r2, r8
    2108:	0092      	lsls	r2, r2, #2
    210a:	4690      	mov	r8, r2
    210c:	2204      	movs	r2, #4
    210e:	4691      	mov	r9, r2
    2110:	4662      	mov	r2, ip
    2112:	4649      	mov	r1, r9
    2114:	438a      	bics	r2, r1
    2116:	4694      	mov	ip, r2
    2118:	4642      	mov	r2, r8
    211a:	4661      	mov	r1, ip
    211c:	430a      	orrs	r2, r1
    211e:	4694      	mov	ip, r2
    2120:	4003      	ands	r3, r0
    2122:	00db      	lsls	r3, r3, #3
    2124:	2208      	movs	r2, #8
    2126:	4690      	mov	r8, r2
    2128:	4662      	mov	r2, ip
    212a:	4641      	mov	r1, r8
    212c:	438a      	bics	r2, r1
    212e:	4313      	orrs	r3, r2
    2130:	4659      	mov	r1, fp
    2132:	4001      	ands	r1, r0
    2134:	0109      	lsls	r1, r1, #4
    2136:	2210      	movs	r2, #16
    2138:	4393      	bics	r3, r2
    213a:	430b      	orrs	r3, r1
    213c:	9a00      	ldr	r2, [sp, #0]
    213e:	4002      	ands	r2, r0
    2140:	0192      	lsls	r2, r2, #6
    2142:	2140      	movs	r1, #64	; 0x40
    2144:	438b      	bics	r3, r1
    2146:	4313      	orrs	r3, r2
    2148:	4006      	ands	r6, r0
    214a:	01f6      	lsls	r6, r6, #7
    214c:	2280      	movs	r2, #128	; 0x80
    214e:	4393      	bics	r3, r2
    2150:	4333      	orrs	r3, r6
    2152:	3a79      	subs	r2, #121	; 0x79
    2154:	4015      	ands	r5, r2
    2156:	022d      	lsls	r5, r5, #8
    2158:	4e09      	ldr	r6, [pc, #36]	; (2180 <system_clock_source_xosc32k_set_config+0xd8>)
    215a:	4033      	ands	r3, r6
    215c:	432b      	orrs	r3, r5
    215e:	4004      	ands	r4, r0
    2160:	0320      	lsls	r0, r4, #12
    2162:	4c08      	ldr	r4, [pc, #32]	; (2184 <system_clock_source_xosc32k_set_config+0xdc>)
    2164:	401c      	ands	r4, r3
    2166:	4304      	orrs	r4, r0
    2168:	82bc      	strh	r4, [r7, #20]
}
    216a:	b003      	add	sp, #12
    216c:	bc3c      	pop	{r2, r3, r4, r5}
    216e:	4690      	mov	r8, r2
    2170:	4699      	mov	r9, r3
    2172:	46a2      	mov	sl, r4
    2174:	46ab      	mov	fp, r5
    2176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2178:	40001400 	.word	0x40001400
    217c:	20000ac4 	.word	0x20000ac4
    2180:	fffff8ff 	.word	0xfffff8ff
    2184:	ffffefff 	.word	0xffffefff

00002188 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    2188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    218a:	1c04      	adds	r4, r0, #0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    218c:	68c1      	ldr	r1, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    218e:	7d03      	ldrb	r3, [r0, #20]
    2190:	2b01      	cmp	r3, #1
    2192:	d105      	bne.n	21a0 <system_clock_source_dpll_set_config+0x18>
		refclk = refclk / config->reference_divider;
    2194:	8a03      	ldrh	r3, [r0, #16]
    2196:	1c08      	adds	r0, r1, #0
    2198:	1c19      	adds	r1, r3, #0
    219a:	4b28      	ldr	r3, [pc, #160]	; (223c <system_clock_source_dpll_set_config+0xb4>)
    219c:	4798      	blx	r3
    219e:	1c01      	adds	r1, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    21a0:	68a3      	ldr	r3, [r4, #8]
    21a2:	0118      	lsls	r0, r3, #4
    21a4:	4b25      	ldr	r3, [pc, #148]	; (223c <system_clock_source_dpll_set_config+0xb4>)
    21a6:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    21a8:	260f      	movs	r6, #15
    21aa:	4006      	ands	r6, r0
	tmpldr = (tmpldr >> 4) - 1;
    21ac:	0900      	lsrs	r0, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
    21ae:	7863      	ldrb	r3, [r4, #1]
    21b0:	019a      	lsls	r2, r3, #6
    21b2:	7823      	ldrb	r3, [r4, #0]
    21b4:	01db      	lsls	r3, r3, #7
    21b6:	4313      	orrs	r3, r2
    21b8:	b2db      	uxtb	r3, r3
    21ba:	4a21      	ldr	r2, [pc, #132]	; (2240 <system_clock_source_dpll_set_config+0xb8>)
    21bc:	7713      	strb	r3, [r2, #28]
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    21be:	0431      	lsls	r1, r6, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    21c0:	1e43      	subs	r3, r0, #1
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    21c2:	051b      	lsls	r3, r3, #20
    21c4:	0d1b      	lsrs	r3, r3, #20
	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    21c6:	430b      	orrs	r3, r1

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
    21c8:	6213      	str	r3, [r2, #32]
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    21ca:	1c15      	adds	r5, r2, #0
    21cc:	212c      	movs	r1, #44	; 0x2c
    21ce:	2204      	movs	r2, #4
    21d0:	5c6b      	ldrb	r3, [r5, r1]
    21d2:	4213      	tst	r3, r2
    21d4:	d1fc      	bne.n	21d0 <system_clock_source_dpll_set_config+0x48>
	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    21d6:	78e1      	ldrb	r1, [r4, #3]
    21d8:	00c9      	lsls	r1, r1, #3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    21da:	78a3      	ldrb	r3, [r4, #2]
    21dc:	031b      	lsls	r3, r3, #12
    21de:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    21e0:	7923      	ldrb	r3, [r4, #4]
    21e2:	009b      	lsls	r3, r3, #2
    21e4:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    21e6:	7ca3      	ldrb	r3, [r4, #18]
    21e8:	2703      	movs	r7, #3
    21ea:	403b      	ands	r3, r7
    21ec:	4319      	orrs	r1, r3

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    21ee:	8a25      	ldrh	r5, [r4, #16]
    21f0:	042d      	lsls	r5, r5, #16
    21f2:	4a14      	ldr	r2, [pc, #80]	; (2244 <system_clock_source_dpll_set_config+0xbc>)
    21f4:	1c2b      	adds	r3, r5, #0
    21f6:	4013      	ands	r3, r2
    21f8:	4319      	orrs	r1, r3
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    21fa:	7ce3      	ldrb	r3, [r4, #19]
    21fc:	021b      	lsls	r3, r3, #8
    21fe:	22e0      	movs	r2, #224	; 0xe0
    2200:	00d2      	lsls	r2, r2, #3
    2202:	4013      	ands	r3, r2
    2204:	4319      	orrs	r1, r3
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    2206:	7d22      	ldrb	r2, [r4, #20]
    2208:	0112      	lsls	r2, r2, #4
    220a:	2330      	movs	r3, #48	; 0x30
    220c:	4013      	ands	r3, r2
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    220e:	430b      	orrs	r3, r1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
    2210:	4a0b      	ldr	r2, [pc, #44]	; (2240 <system_clock_source_dpll_set_config+0xb8>)
    2212:	6253      	str	r3, [r2, #36]	; 0x24
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    2214:	7d63      	ldrb	r3, [r4, #21]
    2216:	401f      	ands	r7, r3
    2218:	2328      	movs	r3, #40	; 0x28
    221a:	54d7      	strb	r7, [r2, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    221c:	1c15      	adds	r5, r2, #0
    221e:	212c      	movs	r1, #44	; 0x2c
    2220:	2208      	movs	r2, #8
    2222:	5c6b      	ldrb	r3, [r5, r1]
    2224:	4213      	tst	r3, r2
    2226:	d1fc      	bne.n	2222 <system_clock_source_dpll_set_config+0x9a>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    2228:	0100      	lsls	r0, r0, #4
    222a:	1836      	adds	r6, r6, r0
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
    222c:	68e3      	ldr	r3, [r4, #12]
    222e:	435e      	muls	r6, r3
			 (((tmpldr + 1) << 4) + tmpldrfrac)
			) >> (4 + config->prescaler);
    2230:	7d63      	ldrb	r3, [r4, #21]
    2232:	3304      	adds	r3, #4
    2234:	40de      	lsrs	r6, r3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
    2236:	4b04      	ldr	r3, [pc, #16]	; (2248 <system_clock_source_dpll_set_config+0xc0>)
    2238:	601e      	str	r6, [r3, #0]
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
			) >> (4 + config->prescaler);
}
    223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    223c:	000028e9 	.word	0x000028e9
    2240:	40001000 	.word	0x40001000
    2244:	07ff0000 	.word	0x07ff0000
    2248:	20000ac4 	.word	0x20000ac4

0000224c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    224c:	2807      	cmp	r0, #7
    224e:	d803      	bhi.n	2258 <system_clock_source_enable+0xc>
    2250:	0080      	lsls	r0, r0, #2
    2252:	4b18      	ldr	r3, [pc, #96]	; (22b4 <system_clock_source_enable+0x68>)
    2254:	581b      	ldr	r3, [r3, r0]
    2256:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2258:	2017      	movs	r0, #23
    225a:	e029      	b.n	22b0 <system_clock_source_enable+0x64>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC48M:
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    225c:	4a16      	ldr	r2, [pc, #88]	; (22b8 <system_clock_source_enable+0x6c>)
    225e:	7d11      	ldrb	r1, [r2, #20]
    2260:	2302      	movs	r3, #2
    2262:	430b      	orrs	r3, r1
    2264:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2266:	2000      	movs	r0, #0
    2268:	e022      	b.n	22b0 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    226a:	4a14      	ldr	r2, [pc, #80]	; (22bc <system_clock_source_enable+0x70>)
    226c:	6991      	ldr	r1, [r2, #24]
    226e:	2302      	movs	r3, #2
    2270:	430b      	orrs	r3, r1
    2272:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2274:	2000      	movs	r0, #0
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    2276:	e01b      	b.n	22b0 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2278:	4a0f      	ldr	r2, [pc, #60]	; (22b8 <system_clock_source_enable+0x6c>)
    227a:	8a11      	ldrh	r1, [r2, #16]
    227c:	2302      	movs	r3, #2
    227e:	430b      	orrs	r3, r1
    2280:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2282:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    2284:	e014      	b.n	22b0 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    2286:	4a0d      	ldr	r2, [pc, #52]	; (22bc <system_clock_source_enable+0x70>)
    2288:	8a91      	ldrh	r1, [r2, #20]
    228a:	2302      	movs	r3, #2
    228c:	430b      	orrs	r3, r1
    228e:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2290:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    2292:	e00d      	b.n	22b0 <system_clock_source_enable+0x64>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2294:	4a08      	ldr	r2, [pc, #32]	; (22b8 <system_clock_source_enable+0x6c>)
    2296:	7f11      	ldrb	r1, [r2, #28]
    2298:	2302      	movs	r3, #2
    229a:	430b      	orrs	r3, r1
    229c:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    229e:	1c10      	adds	r0, r2, #0
    22a0:	212c      	movs	r1, #44	; 0x2c
    22a2:	2202      	movs	r2, #2
    22a4:	5c43      	ldrb	r3, [r0, r1]
    22a6:	4213      	tst	r3, r2
    22a8:	d1fc      	bne.n	22a4 <system_clock_source_enable+0x58>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    22aa:	2000      	movs	r0, #0
    22ac:	e000      	b.n	22b0 <system_clock_source_enable+0x64>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    22ae:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    22b0:	4770      	bx	lr
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	00004ea8 	.word	0x00004ea8
    22b8:	40001000 	.word	0x40001000
    22bc:	40001400 	.word	0x40001400

000022c0 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    22c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22c2:	4647      	mov	r7, r8
    22c4:	b480      	push	{r7}
    22c6:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    22c8:	2203      	movs	r2, #3
    22ca:	4b4d      	ldr	r3, [pc, #308]	; (2400 <system_clock_init+0x140>)
    22cc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    22ce:	494d      	ldr	r1, [pc, #308]	; (2404 <system_clock_init+0x144>)
    22d0:	684b      	ldr	r3, [r1, #4]
    22d2:	321b      	adds	r2, #27
    22d4:	4393      	bics	r3, r2
    22d6:	3a18      	subs	r2, #24
    22d8:	4313      	orrs	r3, r2
    22da:	604b      	str	r3, [r1, #4]
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    22dc:	a80c      	add	r0, sp, #48	; 0x30
    22de:	2300      	movs	r3, #0
    22e0:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    22e2:	2280      	movs	r2, #128	; 0x80
    22e4:	0212      	lsls	r2, r2, #8
    22e6:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    22e8:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    22ea:	2201      	movs	r2, #1
    22ec:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    22ee:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    22f0:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    22f2:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    22f4:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    22f6:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    22f8:	2104      	movs	r1, #4
    22fa:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    22fc:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    22fe:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2300:	4b41      	ldr	r3, [pc, #260]	; (2408 <system_clock_init+0x148>)
    2302:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2304:	2005      	movs	r0, #5
    2306:	4b41      	ldr	r3, [pc, #260]	; (240c <system_clock_init+0x14c>)
    2308:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    230a:	4941      	ldr	r1, [pc, #260]	; (2410 <system_clock_init+0x150>)
    230c:	2201      	movs	r2, #1
    230e:	68cb      	ldr	r3, [r1, #12]
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2310:	421a      	tst	r2, r3
    2312:	d0fc      	beq.n	230e <system_clock_init+0x4e>
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    2314:	a80a      	add	r0, sp, #40	; 0x28
    2316:	2301      	movs	r3, #1
    2318:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    231a:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    231c:	2200      	movs	r2, #0
    231e:	70c2      	strb	r2, [r0, #3]
	config->on_demand           = true;
    2320:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2322:	3306      	adds	r3, #6
    2324:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2326:	7142      	strb	r2, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2328:	4b3a      	ldr	r3, [pc, #232]	; (2414 <system_clock_init+0x154>)
    232a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    232c:	2004      	movs	r0, #4
    232e:	4b37      	ldr	r3, [pc, #220]	; (240c <system_clock_init+0x14c>)
    2330:	4798      	blx	r3
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    2332:	4b39      	ldr	r3, [pc, #228]	; (2418 <system_clock_init+0x158>)
    2334:	7d19      	ldrb	r1, [r3, #20]
    2336:	2280      	movs	r2, #128	; 0x80
    2338:	430a      	orrs	r2, r1
    233a:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    233c:	2202      	movs	r2, #2
    233e:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    2340:	1c1a      	adds	r2, r3, #0
    2342:	6993      	ldr	r3, [r2, #24]
    2344:	2b00      	cmp	r3, #0
    2346:	d1fc      	bne.n	2342 <system_clock_init+0x82>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2348:	4b34      	ldr	r3, [pc, #208]	; (241c <system_clock_init+0x15c>)
    234a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    234c:	ac01      	add	r4, sp, #4
    234e:	2601      	movs	r6, #1
    2350:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2352:	2500      	movs	r5, #0
    2354:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    2356:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2358:	2305      	movs	r3, #5
    235a:	7023      	strb	r3, [r4, #0]
    235c:	7226      	strb	r6, [r4, #8]
    235e:	2001      	movs	r0, #1
    2360:	1c21      	adds	r1, r4, #0
    2362:	4b2f      	ldr	r3, [pc, #188]	; (2420 <system_clock_init+0x160>)
    2364:	4698      	mov	r8, r3
    2366:	4798      	blx	r3
    2368:	2001      	movs	r0, #1
    236a:	4f2e      	ldr	r7, [pc, #184]	; (2424 <system_clock_init+0x164>)
    236c:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    236e:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2370:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2372:	7265      	strb	r5, [r4, #9]
    2374:	2304      	movs	r3, #4
    2376:	7023      	strb	r3, [r4, #0]
    2378:	331c      	adds	r3, #28
    237a:	6063      	str	r3, [r4, #4]
    237c:	2002      	movs	r0, #2
    237e:	1c21      	adds	r1, r4, #0
    2380:	47c0      	blx	r8
    2382:	2002      	movs	r0, #2
    2384:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2386:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2388:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    238a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    238c:	7265      	strb	r5, [r4, #9]
    238e:	2307      	movs	r3, #7
    2390:	7023      	strb	r3, [r4, #0]
    2392:	2008      	movs	r0, #8
    2394:	1c21      	adds	r1, r4, #0
    2396:	47c0      	blx	r8
    2398:	2008      	movs	r0, #8
    239a:	47b8      	blx	r7
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
	config->lock_bypass         = false;
    239c:	a804      	add	r0, sp, #16
    239e:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    23a0:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    23a2:	7105      	strb	r5, [r0, #4]

	config->output_frequency    = 48000000;
    23a4:	4b20      	ldr	r3, [pc, #128]	; (2428 <system_clock_init+0x168>)
    23a6:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
    23a8:	8206      	strh	r6, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK;
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    23aa:	7545      	strb	r5, [r0, #21]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    23ac:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    23ae:	7485      	strb	r5, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    23b0:	7005      	strb	r5, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    23b2:	2301      	movs	r3, #1
    23b4:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    23b6:	7505      	strb	r5, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    23b8:	4b1c      	ldr	r3, [pc, #112]	; (242c <system_clock_init+0x16c>)
    23ba:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    23bc:	4b1c      	ldr	r3, [pc, #112]	; (2430 <system_clock_init+0x170>)
    23be:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    23c0:	2007      	movs	r0, #7
    23c2:	4b12      	ldr	r3, [pc, #72]	; (240c <system_clock_init+0x14c>)
    23c4:	4798      	blx	r3
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    23c6:	4814      	ldr	r0, [pc, #80]	; (2418 <system_clock_init+0x158>)
    23c8:	2130      	movs	r1, #48	; 0x30
    23ca:	2203      	movs	r2, #3
    23cc:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    23ce:	4013      	ands	r3, r2
    23d0:	2b03      	cmp	r3, #3
    23d2:	d1fb      	bne.n	23cc <system_clock_init+0x10c>
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    23d4:	3b02      	subs	r3, #2
    23d6:	4a17      	ldr	r2, [pc, #92]	; (2434 <system_clock_init+0x174>)
    23d8:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    23da:	a901      	add	r1, sp, #4
    23dc:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    23de:	2200      	movs	r2, #0
    23e0:	704a      	strb	r2, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    23e2:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    23e4:	3207      	adds	r2, #7
    23e6:	700a      	strb	r2, [r1, #0]
    23e8:	720b      	strb	r3, [r1, #8]
    23ea:	2000      	movs	r0, #0
    23ec:	4b0c      	ldr	r3, [pc, #48]	; (2420 <system_clock_init+0x160>)
    23ee:	4798      	blx	r3
    23f0:	2000      	movs	r0, #0
    23f2:	4b0c      	ldr	r3, [pc, #48]	; (2424 <system_clock_init+0x164>)
    23f4:	4798      	blx	r3
#endif

}
    23f6:	b010      	add	sp, #64	; 0x40
    23f8:	bc04      	pop	{r2}
    23fa:	4690      	mov	r8, r2
    23fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	40001800 	.word	0x40001800
    2404:	41004000 	.word	0x41004000
    2408:	000020a9 	.word	0x000020a9
    240c:	0000224d 	.word	0x0000224d
    2410:	40001400 	.word	0x40001400
    2414:	00002021 	.word	0x00002021
    2418:	40001000 	.word	0x40001000
    241c:	00002439 	.word	0x00002439
    2420:	0000245d 	.word	0x0000245d
    2424:	00002509 	.word	0x00002509
    2428:	02dc6c00 	.word	0x02dc6c00
    242c:	00007fff 	.word	0x00007fff
    2430:	00002189 	.word	0x00002189
    2434:	40000800 	.word	0x40000800

00002438 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    2438:	4a06      	ldr	r2, [pc, #24]	; (2454 <system_gclk_init+0x1c>)
    243a:	6951      	ldr	r1, [r2, #20]
    243c:	2380      	movs	r3, #128	; 0x80
    243e:	430b      	orrs	r3, r1
    2440:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    2442:	2201      	movs	r2, #1
    2444:	4b04      	ldr	r3, [pc, #16]	; (2458 <system_gclk_init+0x20>)
    2446:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2448:	1c19      	adds	r1, r3, #0
    244a:	780b      	ldrb	r3, [r1, #0]
    244c:	4213      	tst	r3, r2
    244e:	d1fc      	bne.n	244a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2450:	4770      	bx	lr
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	40000800 	.word	0x40000800
    2458:	40001c00 	.word	0x40001c00

0000245c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    245c:	b570      	push	{r4, r5, r6, lr}
    245e:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2460:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2462:	784b      	ldrb	r3, [r1, #1]
    2464:	2b00      	cmp	r3, #0
    2466:	d002      	beq.n	246e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2468:	2380      	movs	r3, #128	; 0x80
    246a:	00db      	lsls	r3, r3, #3
    246c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    246e:	7a4b      	ldrb	r3, [r1, #9]
    2470:	2b00      	cmp	r3, #0
    2472:	d002      	beq.n	247a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2474:	2380      	movs	r3, #128	; 0x80
    2476:	011b      	lsls	r3, r3, #4
    2478:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    247a:	684a      	ldr	r2, [r1, #4]
    247c:	2a01      	cmp	r2, #1
    247e:	d917      	bls.n	24b0 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2480:	1e53      	subs	r3, r2, #1
    2482:	421a      	tst	r2, r3
    2484:	d10f      	bne.n	24a6 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2486:	2a02      	cmp	r2, #2
    2488:	d906      	bls.n	2498 <system_gclk_gen_set_config+0x3c>
    248a:	2302      	movs	r3, #2
    248c:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    248e:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    2490:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2492:	429a      	cmp	r2, r3
    2494:	d8fb      	bhi.n	248e <system_gclk_gen_set_config+0x32>
    2496:	e000      	b.n	249a <system_gclk_gen_set_config+0x3e>
    2498:	2000      	movs	r0, #0
    249a:	2380      	movs	r3, #128	; 0x80
    249c:	015b      	lsls	r3, r3, #5
    249e:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    24a0:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    24a2:	4305      	orrs	r5, r0
    24a4:	e004      	b.n	24b0 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    24a6:	0412      	lsls	r2, r2, #16
    24a8:	2380      	movs	r3, #128	; 0x80
    24aa:	009b      	lsls	r3, r3, #2
    24ac:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    24ae:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    24b0:	7a0b      	ldrb	r3, [r1, #8]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d002      	beq.n	24bc <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    24b6:	2380      	movs	r3, #128	; 0x80
    24b8:	019b      	lsls	r3, r3, #6
    24ba:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    24bc:	2604      	movs	r6, #4
    24be:	40a6      	lsls	r6, r4
    24c0:	490d      	ldr	r1, [pc, #52]	; (24f8 <system_gclk_gen_set_config+0x9c>)
    24c2:	4a0e      	ldr	r2, [pc, #56]	; (24fc <system_gclk_gen_set_config+0xa0>)
    24c4:	684b      	ldr	r3, [r1, #4]
    24c6:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    24c8:	421e      	tst	r6, r3
    24ca:	d1fb      	bne.n	24c4 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    24cc:	4b0c      	ldr	r3, [pc, #48]	; (2500 <system_gclk_gen_set_config+0xa4>)
    24ce:	4798      	blx	r3
    24d0:	00a4      	lsls	r4, r4, #2
    24d2:	4b09      	ldr	r3, [pc, #36]	; (24f8 <system_gclk_gen_set_config+0x9c>)
    24d4:	469c      	mov	ip, r3
    24d6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    24d8:	6a20      	ldr	r0, [r4, #32]
    24da:	2380      	movs	r3, #128	; 0x80
    24dc:	005b      	lsls	r3, r3, #1
    24de:	4018      	ands	r0, r3
    24e0:	4328      	orrs	r0, r5
    24e2:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    24e4:	4661      	mov	r1, ip
    24e6:	4a05      	ldr	r2, [pc, #20]	; (24fc <system_gclk_gen_set_config+0xa0>)
    24e8:	684b      	ldr	r3, [r1, #4]
    24ea:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    24ec:	421e      	tst	r6, r3
    24ee:	d1fb      	bne.n	24e8 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    24f0:	4b04      	ldr	r3, [pc, #16]	; (2504 <system_gclk_gen_set_config+0xa8>)
    24f2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    24f4:	bd70      	pop	{r4, r5, r6, pc}
    24f6:	46c0      	nop			; (mov r8, r8)
    24f8:	40001c00 	.word	0x40001c00
    24fc:	000007fc 	.word	0x000007fc
    2500:	00000f4d 	.word	0x00000f4d
    2504:	00000f8d 	.word	0x00000f8d

00002508 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2508:	b510      	push	{r4, lr}
    250a:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    250c:	2204      	movs	r2, #4
    250e:	4082      	lsls	r2, r0
    2510:	4809      	ldr	r0, [pc, #36]	; (2538 <system_gclk_gen_enable+0x30>)
    2512:	490a      	ldr	r1, [pc, #40]	; (253c <system_gclk_gen_enable+0x34>)
    2514:	6843      	ldr	r3, [r0, #4]
    2516:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    2518:	421a      	tst	r2, r3
    251a:	d1fb      	bne.n	2514 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    251c:	4b08      	ldr	r3, [pc, #32]	; (2540 <system_gclk_gen_enable+0x38>)
    251e:	4798      	blx	r3
    2520:	00a4      	lsls	r4, r4, #2
    2522:	4b05      	ldr	r3, [pc, #20]	; (2538 <system_gclk_gen_enable+0x30>)
    2524:	469c      	mov	ip, r3
    2526:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2528:	6a23      	ldr	r3, [r4, #32]
    252a:	2280      	movs	r2, #128	; 0x80
    252c:	0052      	lsls	r2, r2, #1
    252e:	4313      	orrs	r3, r2
    2530:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2532:	4b04      	ldr	r3, [pc, #16]	; (2544 <system_gclk_gen_enable+0x3c>)
    2534:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2536:	bd10      	pop	{r4, pc}
    2538:	40001c00 	.word	0x40001c00
    253c:	000007fc 	.word	0x000007fc
    2540:	00000f4d 	.word	0x00000f4d
    2544:	00000f8d 	.word	0x00000f8d

00002548 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    254a:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    254c:	2204      	movs	r2, #4
    254e:	4082      	lsls	r2, r0
    2550:	4812      	ldr	r0, [pc, #72]	; (259c <system_gclk_gen_get_hz+0x54>)
    2552:	4913      	ldr	r1, [pc, #76]	; (25a0 <system_gclk_gen_get_hz+0x58>)
    2554:	6843      	ldr	r3, [r0, #4]
    2556:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    2558:	421a      	tst	r2, r3
    255a:	d1fb      	bne.n	2554 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    255c:	4b11      	ldr	r3, [pc, #68]	; (25a4 <system_gclk_gen_get_hz+0x5c>)
    255e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2560:	4f0e      	ldr	r7, [pc, #56]	; (259c <system_gclk_gen_get_hz+0x54>)
    2562:	3408      	adds	r4, #8
    2564:	00a4      	lsls	r4, r4, #2
    2566:	59e3      	ldr	r3, [r4, r7]
    2568:	2007      	movs	r0, #7
    256a:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    256c:	4b0e      	ldr	r3, [pc, #56]	; (25a8 <system_gclk_gen_get_hz+0x60>)
    256e:	4798      	blx	r3
    2570:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    2572:	59e5      	ldr	r5, [r4, r7]
    2574:	04ed      	lsls	r5, r5, #19
    2576:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2578:	59e4      	ldr	r4, [r4, r7]
    257a:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    257c:	4b0b      	ldr	r3, [pc, #44]	; (25ac <system_gclk_gen_get_hz+0x64>)
    257e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2580:	2d00      	cmp	r5, #0
    2582:	d107      	bne.n	2594 <system_gclk_gen_get_hz+0x4c>
    2584:	2c01      	cmp	r4, #1
    2586:	d907      	bls.n	2598 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    2588:	1c30      	adds	r0, r6, #0
    258a:	1c21      	adds	r1, r4, #0
    258c:	4b08      	ldr	r3, [pc, #32]	; (25b0 <system_gclk_gen_get_hz+0x68>)
    258e:	4798      	blx	r3
    2590:	1c06      	adds	r6, r0, #0
    2592:	e001      	b.n	2598 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2594:	3401      	adds	r4, #1
    2596:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    2598:	1c30      	adds	r0, r6, #0
    259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    259c:	40001c00 	.word	0x40001c00
    25a0:	000007fc 	.word	0x000007fc
    25a4:	00000f4d 	.word	0x00000f4d
    25a8:	00001fc5 	.word	0x00001fc5
    25ac:	00000f8d 	.word	0x00000f8d
    25b0:	000028e9 	.word	0x000028e9

000025b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    25b4:	b510      	push	{r4, lr}
    25b6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    25b8:	4b08      	ldr	r3, [pc, #32]	; (25dc <system_gclk_chan_enable+0x28>)
    25ba:	4798      	blx	r3
    25bc:	00a4      	lsls	r4, r4, #2
    25be:	4b08      	ldr	r3, [pc, #32]	; (25e0 <system_gclk_chan_enable+0x2c>)
    25c0:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    25c2:	2280      	movs	r2, #128	; 0x80
    25c4:	5881      	ldr	r1, [r0, r2]
    25c6:	2340      	movs	r3, #64	; 0x40
    25c8:	430b      	orrs	r3, r1
    25ca:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    25cc:	2180      	movs	r1, #128	; 0x80
    25ce:	3a40      	subs	r2, #64	; 0x40
    25d0:	5843      	ldr	r3, [r0, r1]
    25d2:	421a      	tst	r2, r3
    25d4:	d0fc      	beq.n	25d0 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    25d6:	4b03      	ldr	r3, [pc, #12]	; (25e4 <system_gclk_chan_enable+0x30>)
    25d8:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    25da:	bd10      	pop	{r4, pc}
    25dc:	00000f4d 	.word	0x00000f4d
    25e0:	40001c00 	.word	0x40001c00
    25e4:	00000f8d 	.word	0x00000f8d

000025e8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    25e8:	b510      	push	{r4, lr}
    25ea:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    25ec:	4b08      	ldr	r3, [pc, #32]	; (2610 <system_gclk_chan_disable+0x28>)
    25ee:	4798      	blx	r3
    25f0:	00a4      	lsls	r4, r4, #2
    25f2:	4b08      	ldr	r3, [pc, #32]	; (2614 <system_gclk_chan_disable+0x2c>)
    25f4:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    25f6:	2280      	movs	r2, #128	; 0x80
    25f8:	5883      	ldr	r3, [r0, r2]
    25fa:	2140      	movs	r1, #64	; 0x40
    25fc:	438b      	bics	r3, r1
    25fe:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    2600:	3140      	adds	r1, #64	; 0x40
    2602:	3a40      	subs	r2, #64	; 0x40
    2604:	5843      	ldr	r3, [r0, r1]
    2606:	421a      	tst	r2, r3
    2608:	d1fc      	bne.n	2604 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    260a:	4b03      	ldr	r3, [pc, #12]	; (2618 <system_gclk_chan_disable+0x30>)
    260c:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    260e:	bd10      	pop	{r4, pc}
    2610:	00000f4d 	.word	0x00000f4d
    2614:	40001c00 	.word	0x40001c00
    2618:	00000f8d 	.word	0x00000f8d

0000261c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    261c:	b538      	push	{r3, r4, r5, lr}
    261e:	1c04      	adds	r4, r0, #0
    2620:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2622:	4b05      	ldr	r3, [pc, #20]	; (2638 <system_gclk_chan_set_config+0x1c>)
    2624:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2626:	782b      	ldrb	r3, [r5, #0]
    2628:	220f      	movs	r2, #15
    262a:	4013      	ands	r3, r2
    262c:	3420      	adds	r4, #32
    262e:	00a4      	lsls	r4, r4, #2
    2630:	4a02      	ldr	r2, [pc, #8]	; (263c <system_gclk_chan_set_config+0x20>)
    2632:	50a3      	str	r3, [r4, r2]


}
    2634:	bd38      	pop	{r3, r4, r5, pc}
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	000025e9 	.word	0x000025e9
    263c:	40001c00 	.word	0x40001c00

00002640 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2640:	b510      	push	{r4, lr}
    2642:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2644:	4b06      	ldr	r3, [pc, #24]	; (2660 <system_gclk_chan_get_hz+0x20>)
    2646:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2648:	3420      	adds	r4, #32
    264a:	00a4      	lsls	r4, r4, #2
    264c:	4b05      	ldr	r3, [pc, #20]	; (2664 <system_gclk_chan_get_hz+0x24>)
    264e:	58e3      	ldr	r3, [r4, r3]
    2650:	240f      	movs	r4, #15
    2652:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2654:	4b04      	ldr	r3, [pc, #16]	; (2668 <system_gclk_chan_get_hz+0x28>)
    2656:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2658:	1c20      	adds	r0, r4, #0
    265a:	4b04      	ldr	r3, [pc, #16]	; (266c <system_gclk_chan_get_hz+0x2c>)
    265c:	4798      	blx	r3
}
    265e:	bd10      	pop	{r4, pc}
    2660:	00000f4d 	.word	0x00000f4d
    2664:	40001c00 	.word	0x40001c00
    2668:	00000f8d 	.word	0x00000f8d
    266c:	00002549 	.word	0x00002549

00002670 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2670:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2672:	78d3      	ldrb	r3, [r2, #3]
    2674:	2b00      	cmp	r3, #0
    2676:	d11e      	bne.n	26b6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2678:	7814      	ldrb	r4, [r2, #0]
    267a:	2c80      	cmp	r4, #128	; 0x80
    267c:	d004      	beq.n	2688 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    267e:	0624      	lsls	r4, r4, #24
    2680:	2380      	movs	r3, #128	; 0x80
    2682:	025b      	lsls	r3, r3, #9
    2684:	431c      	orrs	r4, r3
    2686:	e000      	b.n	268a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2688:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    268a:	7853      	ldrb	r3, [r2, #1]
    268c:	2502      	movs	r5, #2
    268e:	43ab      	bics	r3, r5
    2690:	d10a      	bne.n	26a8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2692:	7893      	ldrb	r3, [r2, #2]
    2694:	2b00      	cmp	r3, #0
    2696:	d103      	bne.n	26a0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2698:	2380      	movs	r3, #128	; 0x80
    269a:	029b      	lsls	r3, r3, #10
    269c:	431c      	orrs	r4, r3
    269e:	e002      	b.n	26a6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    26a0:	23c0      	movs	r3, #192	; 0xc0
    26a2:	02db      	lsls	r3, r3, #11
    26a4:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    26a6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    26a8:	7853      	ldrb	r3, [r2, #1]
    26aa:	3b01      	subs	r3, #1
    26ac:	2b01      	cmp	r3, #1
    26ae:	d812      	bhi.n	26d6 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    26b0:	4b18      	ldr	r3, [pc, #96]	; (2714 <_system_pinmux_config+0xa4>)
    26b2:	401c      	ands	r4, r3
    26b4:	e00f      	b.n	26d6 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    26b6:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    26b8:	040b      	lsls	r3, r1, #16
    26ba:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    26bc:	24a0      	movs	r4, #160	; 0xa0
    26be:	05e4      	lsls	r4, r4, #23
    26c0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26c2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    26c4:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    26c6:	24d0      	movs	r4, #208	; 0xd0
    26c8:	0624      	lsls	r4, r4, #24
    26ca:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26cc:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    26ce:	78d3      	ldrb	r3, [r2, #3]
    26d0:	2b00      	cmp	r3, #0
    26d2:	d018      	beq.n	2706 <_system_pinmux_config+0x96>
    26d4:	e01c      	b.n	2710 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    26d6:	040b      	lsls	r3, r1, #16
    26d8:	0c1b      	lsrs	r3, r3, #16
    26da:	25a0      	movs	r5, #160	; 0xa0
    26dc:	05ed      	lsls	r5, r5, #23
    26de:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    26e0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26e2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    26e4:	0c0b      	lsrs	r3, r1, #16
    26e6:	25d0      	movs	r5, #208	; 0xd0
    26e8:	062d      	lsls	r5, r5, #24
    26ea:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    26ec:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26ee:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    26f0:	78d3      	ldrb	r3, [r2, #3]
    26f2:	2b00      	cmp	r3, #0
    26f4:	d10c      	bne.n	2710 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    26f6:	0363      	lsls	r3, r4, #13
    26f8:	d505      	bpl.n	2706 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    26fa:	7893      	ldrb	r3, [r2, #2]
    26fc:	2b01      	cmp	r3, #1
    26fe:	d101      	bne.n	2704 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    2700:	6181      	str	r1, [r0, #24]
    2702:	e000      	b.n	2706 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2704:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2706:	7853      	ldrb	r3, [r2, #1]
    2708:	3b01      	subs	r3, #1
    270a:	2b01      	cmp	r3, #1
    270c:	d800      	bhi.n	2710 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    270e:	6081      	str	r1, [r0, #8]
		}
	}
}
    2710:	bd30      	pop	{r4, r5, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	fffbffff 	.word	0xfffbffff

00002718 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2718:	b508      	push	{r3, lr}
    271a:	1c03      	adds	r3, r0, #0
    271c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    271e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2720:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2722:	2900      	cmp	r1, #0
    2724:	d105      	bne.n	2732 <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
    2726:	0958      	lsrs	r0, r3, #5
    2728:	01c0      	lsls	r0, r0, #7
    272a:	2182      	movs	r1, #130	; 0x82
    272c:	05c9      	lsls	r1, r1, #23
    272e:	468c      	mov	ip, r1
    2730:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2732:	211f      	movs	r1, #31
    2734:	400b      	ands	r3, r1
    2736:	391e      	subs	r1, #30
    2738:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    273a:	4b01      	ldr	r3, [pc, #4]	; (2740 <system_pinmux_pin_set_config+0x28>)
    273c:	4798      	blx	r3
}
    273e:	bd08      	pop	{r3, pc}
    2740:	00002671 	.word	0x00002671

00002744 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2744:	4770      	bx	lr
    2746:	46c0      	nop			; (mov r8, r8)

00002748 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2748:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    274a:	4b05      	ldr	r3, [pc, #20]	; (2760 <system_init+0x18>)
    274c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    274e:	4b05      	ldr	r3, [pc, #20]	; (2764 <system_init+0x1c>)
    2750:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2752:	4b05      	ldr	r3, [pc, #20]	; (2768 <system_init+0x20>)
    2754:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2756:	4b05      	ldr	r3, [pc, #20]	; (276c <system_init+0x24>)
    2758:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    275a:	4b05      	ldr	r3, [pc, #20]	; (2770 <system_init+0x28>)
    275c:	4798      	blx	r3
}
    275e:	bd08      	pop	{r3, pc}
    2760:	000022c1 	.word	0x000022c1
    2764:	00000fbd 	.word	0x00000fbd
    2768:	00000e1d 	.word	0x00000e1d
    276c:	00002745 	.word	0x00002745
    2770:	00002745 	.word	0x00002745

00002774 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    2774:	e7fe      	b.n	2774 <Dummy_Handler>
    2776:	46c0      	nop			; (mov r8, r8)

00002778 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2778:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    277a:	4b1b      	ldr	r3, [pc, #108]	; (27e8 <Reset_Handler+0x70>)
    277c:	4a1b      	ldr	r2, [pc, #108]	; (27ec <Reset_Handler+0x74>)
    277e:	429a      	cmp	r2, r3
    2780:	d003      	beq.n	278a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    2782:	4b1b      	ldr	r3, [pc, #108]	; (27f0 <Reset_Handler+0x78>)
    2784:	4a18      	ldr	r2, [pc, #96]	; (27e8 <Reset_Handler+0x70>)
    2786:	429a      	cmp	r2, r3
    2788:	d304      	bcc.n	2794 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    278a:	4b1a      	ldr	r3, [pc, #104]	; (27f4 <Reset_Handler+0x7c>)
    278c:	4a1a      	ldr	r2, [pc, #104]	; (27f8 <Reset_Handler+0x80>)
    278e:	429a      	cmp	r2, r3
    2790:	d310      	bcc.n	27b4 <Reset_Handler+0x3c>
    2792:	e01e      	b.n	27d2 <Reset_Handler+0x5a>
    2794:	4a19      	ldr	r2, [pc, #100]	; (27fc <Reset_Handler+0x84>)
    2796:	4b16      	ldr	r3, [pc, #88]	; (27f0 <Reset_Handler+0x78>)
    2798:	3303      	adds	r3, #3
    279a:	1a9b      	subs	r3, r3, r2
    279c:	089b      	lsrs	r3, r3, #2
    279e:	3301      	adds	r3, #1
    27a0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    27a2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    27a4:	4810      	ldr	r0, [pc, #64]	; (27e8 <Reset_Handler+0x70>)
    27a6:	4911      	ldr	r1, [pc, #68]	; (27ec <Reset_Handler+0x74>)
    27a8:	588c      	ldr	r4, [r1, r2]
    27aa:	5084      	str	r4, [r0, r2]
    27ac:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    27ae:	429a      	cmp	r2, r3
    27b0:	d1fa      	bne.n	27a8 <Reset_Handler+0x30>
    27b2:	e7ea      	b.n	278a <Reset_Handler+0x12>
    27b4:	4a12      	ldr	r2, [pc, #72]	; (2800 <Reset_Handler+0x88>)
    27b6:	4b0f      	ldr	r3, [pc, #60]	; (27f4 <Reset_Handler+0x7c>)
    27b8:	3303      	adds	r3, #3
    27ba:	1a9b      	subs	r3, r3, r2
    27bc:	089b      	lsrs	r3, r3, #2
    27be:	3301      	adds	r3, #1
    27c0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27c2:	2200      	movs	r2, #0
                *pDest++ = 0;
    27c4:	480c      	ldr	r0, [pc, #48]	; (27f8 <Reset_Handler+0x80>)
    27c6:	2100      	movs	r1, #0
    27c8:	1814      	adds	r4, r2, r0
    27ca:	6021      	str	r1, [r4, #0]
    27cc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27ce:	429a      	cmp	r2, r3
    27d0:	d1fa      	bne.n	27c8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    27d2:	4a0c      	ldr	r2, [pc, #48]	; (2804 <Reset_Handler+0x8c>)
    27d4:	21ff      	movs	r1, #255	; 0xff
    27d6:	4b0c      	ldr	r3, [pc, #48]	; (2808 <Reset_Handler+0x90>)
    27d8:	438b      	bics	r3, r1
    27da:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    27dc:	4b0b      	ldr	r3, [pc, #44]	; (280c <Reset_Handler+0x94>)
    27de:	4798      	blx	r3

        /* Branch to main function */
        main();
    27e0:	4b0b      	ldr	r3, [pc, #44]	; (2810 <Reset_Handler+0x98>)
    27e2:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    27e4:	e7fe      	b.n	27e4 <Reset_Handler+0x6c>
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	20000000 	.word	0x20000000
    27ec:	000050ac 	.word	0x000050ac
    27f0:	20000080 	.word	0x20000080
    27f4:	20000b58 	.word	0x20000b58
    27f8:	20000080 	.word	0x20000080
    27fc:	20000004 	.word	0x20000004
    2800:	20000084 	.word	0x20000084
    2804:	e000ed00 	.word	0xe000ed00
    2808:	00000000 	.word	0x00000000
    280c:	00002a61 	.word	0x00002a61
    2810:	00000859 	.word	0x00000859

00002814 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2814:	b5f0      	push	{r4, r5, r6, r7, lr}
    2816:	4647      	mov	r7, r8
    2818:	b480      	push	{r7}
    281a:	1c0c      	adds	r4, r1, #0
    281c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    281e:	2800      	cmp	r0, #0
    2820:	d110      	bne.n	2844 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    2822:	2a00      	cmp	r2, #0
    2824:	dd0a      	ble.n	283c <_read+0x28>
    2826:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2828:	4e09      	ldr	r6, [pc, #36]	; (2850 <_read+0x3c>)
    282a:	4d0a      	ldr	r5, [pc, #40]	; (2854 <_read+0x40>)
    282c:	6830      	ldr	r0, [r6, #0]
    282e:	1c21      	adds	r1, r4, #0
    2830:	682b      	ldr	r3, [r5, #0]
    2832:	4798      	blx	r3
		ptr++;
    2834:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    2836:	42bc      	cmp	r4, r7
    2838:	d1f8      	bne.n	282c <_read+0x18>
    283a:	e001      	b.n	2840 <_read+0x2c>
    283c:	2300      	movs	r3, #0
    283e:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    2840:	4640      	mov	r0, r8
    2842:	e001      	b.n	2848 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    2844:	2001      	movs	r0, #1
    2846:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    2848:	bc04      	pop	{r2}
    284a:	4690      	mov	r8, r2
    284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	20000b50 	.word	0x20000b50
    2854:	20000b48 	.word	0x20000b48

00002858 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2858:	b5f0      	push	{r4, r5, r6, r7, lr}
    285a:	4647      	mov	r7, r8
    285c:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    285e:	3801      	subs	r0, #1
    2860:	2802      	cmp	r0, #2
    2862:	d815      	bhi.n	2890 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    2864:	2a00      	cmp	r2, #0
    2866:	d010      	beq.n	288a <_write+0x32>
    2868:	1c15      	adds	r5, r2, #0
    286a:	1c0e      	adds	r6, r1, #0
    286c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    286e:	4b0c      	ldr	r3, [pc, #48]	; (28a0 <_write+0x48>)
    2870:	4698      	mov	r8, r3
    2872:	4f0c      	ldr	r7, [pc, #48]	; (28a4 <_write+0x4c>)
    2874:	4643      	mov	r3, r8
    2876:	6818      	ldr	r0, [r3, #0]
    2878:	5d31      	ldrb	r1, [r6, r4]
    287a:	683b      	ldr	r3, [r7, #0]
    287c:	4798      	blx	r3
    287e:	2800      	cmp	r0, #0
    2880:	db09      	blt.n	2896 <_write+0x3e>
			return -1;
		}
		++nChars;
    2882:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    2884:	42a5      	cmp	r5, r4
    2886:	d1f5      	bne.n	2874 <_write+0x1c>
    2888:	e000      	b.n	288c <_write+0x34>
    288a:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    288c:	1c20      	adds	r0, r4, #0
    288e:	e004      	b.n	289a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    2890:	2001      	movs	r0, #1
    2892:	4240      	negs	r0, r0
    2894:	e001      	b.n	289a <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    2896:	2001      	movs	r0, #1
    2898:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    289a:	bc04      	pop	{r2}
    289c:	4690      	mov	r8, r2
    289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28a0:	20000b50 	.word	0x20000b50
    28a4:	20000b4c 	.word	0x20000b4c

000028a8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    28a8:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    28aa:	4a06      	ldr	r2, [pc, #24]	; (28c4 <_sbrk+0x1c>)
    28ac:	6812      	ldr	r2, [r2, #0]
    28ae:	2a00      	cmp	r2, #0
    28b0:	d102      	bne.n	28b8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    28b2:	4905      	ldr	r1, [pc, #20]	; (28c8 <_sbrk+0x20>)
    28b4:	4a03      	ldr	r2, [pc, #12]	; (28c4 <_sbrk+0x1c>)
    28b6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    28b8:	4a02      	ldr	r2, [pc, #8]	; (28c4 <_sbrk+0x1c>)
    28ba:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    28bc:	18c3      	adds	r3, r0, r3
    28be:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    28c0:	4770      	bx	lr
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	20000ad0 	.word	0x20000ad0
    28c8:	20002b58 	.word	0x20002b58

000028cc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    28cc:	2001      	movs	r0, #1
    28ce:	4240      	negs	r0, r0
    28d0:	4770      	bx	lr
    28d2:	46c0      	nop			; (mov r8, r8)

000028d4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    28d4:	2380      	movs	r3, #128	; 0x80
    28d6:	019b      	lsls	r3, r3, #6
    28d8:	604b      	str	r3, [r1, #4]

	return 0;
}
    28da:	2000      	movs	r0, #0
    28dc:	4770      	bx	lr
    28de:	46c0      	nop			; (mov r8, r8)

000028e0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28e0:	2001      	movs	r0, #1
    28e2:	4770      	bx	lr

000028e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28e4:	2000      	movs	r0, #0
    28e6:	4770      	bx	lr

000028e8 <__aeabi_uidiv>:
    28e8:	2200      	movs	r2, #0
    28ea:	0843      	lsrs	r3, r0, #1
    28ec:	428b      	cmp	r3, r1
    28ee:	d374      	bcc.n	29da <__aeabi_uidiv+0xf2>
    28f0:	0903      	lsrs	r3, r0, #4
    28f2:	428b      	cmp	r3, r1
    28f4:	d35f      	bcc.n	29b6 <__aeabi_uidiv+0xce>
    28f6:	0a03      	lsrs	r3, r0, #8
    28f8:	428b      	cmp	r3, r1
    28fa:	d344      	bcc.n	2986 <__aeabi_uidiv+0x9e>
    28fc:	0b03      	lsrs	r3, r0, #12
    28fe:	428b      	cmp	r3, r1
    2900:	d328      	bcc.n	2954 <__aeabi_uidiv+0x6c>
    2902:	0c03      	lsrs	r3, r0, #16
    2904:	428b      	cmp	r3, r1
    2906:	d30d      	bcc.n	2924 <__aeabi_uidiv+0x3c>
    2908:	22ff      	movs	r2, #255	; 0xff
    290a:	0209      	lsls	r1, r1, #8
    290c:	ba12      	rev	r2, r2
    290e:	0c03      	lsrs	r3, r0, #16
    2910:	428b      	cmp	r3, r1
    2912:	d302      	bcc.n	291a <__aeabi_uidiv+0x32>
    2914:	1212      	asrs	r2, r2, #8
    2916:	0209      	lsls	r1, r1, #8
    2918:	d065      	beq.n	29e6 <__aeabi_uidiv+0xfe>
    291a:	0b03      	lsrs	r3, r0, #12
    291c:	428b      	cmp	r3, r1
    291e:	d319      	bcc.n	2954 <__aeabi_uidiv+0x6c>
    2920:	e000      	b.n	2924 <__aeabi_uidiv+0x3c>
    2922:	0a09      	lsrs	r1, r1, #8
    2924:	0bc3      	lsrs	r3, r0, #15
    2926:	428b      	cmp	r3, r1
    2928:	d301      	bcc.n	292e <__aeabi_uidiv+0x46>
    292a:	03cb      	lsls	r3, r1, #15
    292c:	1ac0      	subs	r0, r0, r3
    292e:	4152      	adcs	r2, r2
    2930:	0b83      	lsrs	r3, r0, #14
    2932:	428b      	cmp	r3, r1
    2934:	d301      	bcc.n	293a <__aeabi_uidiv+0x52>
    2936:	038b      	lsls	r3, r1, #14
    2938:	1ac0      	subs	r0, r0, r3
    293a:	4152      	adcs	r2, r2
    293c:	0b43      	lsrs	r3, r0, #13
    293e:	428b      	cmp	r3, r1
    2940:	d301      	bcc.n	2946 <__aeabi_uidiv+0x5e>
    2942:	034b      	lsls	r3, r1, #13
    2944:	1ac0      	subs	r0, r0, r3
    2946:	4152      	adcs	r2, r2
    2948:	0b03      	lsrs	r3, r0, #12
    294a:	428b      	cmp	r3, r1
    294c:	d301      	bcc.n	2952 <__aeabi_uidiv+0x6a>
    294e:	030b      	lsls	r3, r1, #12
    2950:	1ac0      	subs	r0, r0, r3
    2952:	4152      	adcs	r2, r2
    2954:	0ac3      	lsrs	r3, r0, #11
    2956:	428b      	cmp	r3, r1
    2958:	d301      	bcc.n	295e <__aeabi_uidiv+0x76>
    295a:	02cb      	lsls	r3, r1, #11
    295c:	1ac0      	subs	r0, r0, r3
    295e:	4152      	adcs	r2, r2
    2960:	0a83      	lsrs	r3, r0, #10
    2962:	428b      	cmp	r3, r1
    2964:	d301      	bcc.n	296a <__aeabi_uidiv+0x82>
    2966:	028b      	lsls	r3, r1, #10
    2968:	1ac0      	subs	r0, r0, r3
    296a:	4152      	adcs	r2, r2
    296c:	0a43      	lsrs	r3, r0, #9
    296e:	428b      	cmp	r3, r1
    2970:	d301      	bcc.n	2976 <__aeabi_uidiv+0x8e>
    2972:	024b      	lsls	r3, r1, #9
    2974:	1ac0      	subs	r0, r0, r3
    2976:	4152      	adcs	r2, r2
    2978:	0a03      	lsrs	r3, r0, #8
    297a:	428b      	cmp	r3, r1
    297c:	d301      	bcc.n	2982 <__aeabi_uidiv+0x9a>
    297e:	020b      	lsls	r3, r1, #8
    2980:	1ac0      	subs	r0, r0, r3
    2982:	4152      	adcs	r2, r2
    2984:	d2cd      	bcs.n	2922 <__aeabi_uidiv+0x3a>
    2986:	09c3      	lsrs	r3, r0, #7
    2988:	428b      	cmp	r3, r1
    298a:	d301      	bcc.n	2990 <__aeabi_uidiv+0xa8>
    298c:	01cb      	lsls	r3, r1, #7
    298e:	1ac0      	subs	r0, r0, r3
    2990:	4152      	adcs	r2, r2
    2992:	0983      	lsrs	r3, r0, #6
    2994:	428b      	cmp	r3, r1
    2996:	d301      	bcc.n	299c <__aeabi_uidiv+0xb4>
    2998:	018b      	lsls	r3, r1, #6
    299a:	1ac0      	subs	r0, r0, r3
    299c:	4152      	adcs	r2, r2
    299e:	0943      	lsrs	r3, r0, #5
    29a0:	428b      	cmp	r3, r1
    29a2:	d301      	bcc.n	29a8 <__aeabi_uidiv+0xc0>
    29a4:	014b      	lsls	r3, r1, #5
    29a6:	1ac0      	subs	r0, r0, r3
    29a8:	4152      	adcs	r2, r2
    29aa:	0903      	lsrs	r3, r0, #4
    29ac:	428b      	cmp	r3, r1
    29ae:	d301      	bcc.n	29b4 <__aeabi_uidiv+0xcc>
    29b0:	010b      	lsls	r3, r1, #4
    29b2:	1ac0      	subs	r0, r0, r3
    29b4:	4152      	adcs	r2, r2
    29b6:	08c3      	lsrs	r3, r0, #3
    29b8:	428b      	cmp	r3, r1
    29ba:	d301      	bcc.n	29c0 <__aeabi_uidiv+0xd8>
    29bc:	00cb      	lsls	r3, r1, #3
    29be:	1ac0      	subs	r0, r0, r3
    29c0:	4152      	adcs	r2, r2
    29c2:	0883      	lsrs	r3, r0, #2
    29c4:	428b      	cmp	r3, r1
    29c6:	d301      	bcc.n	29cc <__aeabi_uidiv+0xe4>
    29c8:	008b      	lsls	r3, r1, #2
    29ca:	1ac0      	subs	r0, r0, r3
    29cc:	4152      	adcs	r2, r2
    29ce:	0843      	lsrs	r3, r0, #1
    29d0:	428b      	cmp	r3, r1
    29d2:	d301      	bcc.n	29d8 <__aeabi_uidiv+0xf0>
    29d4:	004b      	lsls	r3, r1, #1
    29d6:	1ac0      	subs	r0, r0, r3
    29d8:	4152      	adcs	r2, r2
    29da:	1a41      	subs	r1, r0, r1
    29dc:	d200      	bcs.n	29e0 <__aeabi_uidiv+0xf8>
    29de:	4601      	mov	r1, r0
    29e0:	4152      	adcs	r2, r2
    29e2:	4610      	mov	r0, r2
    29e4:	4770      	bx	lr
    29e6:	e7ff      	b.n	29e8 <__aeabi_uidiv+0x100>
    29e8:	b501      	push	{r0, lr}
    29ea:	2000      	movs	r0, #0
    29ec:	f000 f80c 	bl	2a08 <__aeabi_idiv0>
    29f0:	bd02      	pop	{r1, pc}
    29f2:	46c0      	nop			; (mov r8, r8)

000029f4 <__aeabi_uidivmod>:
    29f4:	2900      	cmp	r1, #0
    29f6:	d0f7      	beq.n	29e8 <__aeabi_uidiv+0x100>
    29f8:	b503      	push	{r0, r1, lr}
    29fa:	f7ff ff75 	bl	28e8 <__aeabi_uidiv>
    29fe:	bc0e      	pop	{r1, r2, r3}
    2a00:	4342      	muls	r2, r0
    2a02:	1a89      	subs	r1, r1, r2
    2a04:	4718      	bx	r3
    2a06:	46c0      	nop			; (mov r8, r8)

00002a08 <__aeabi_idiv0>:
    2a08:	4770      	bx	lr
    2a0a:	46c0      	nop			; (mov r8, r8)

00002a0c <__aeabi_lmul>:
    2a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a0e:	464f      	mov	r7, r9
    2a10:	4646      	mov	r6, r8
    2a12:	0405      	lsls	r5, r0, #16
    2a14:	0c2d      	lsrs	r5, r5, #16
    2a16:	1c2c      	adds	r4, r5, #0
    2a18:	b4c0      	push	{r6, r7}
    2a1a:	0417      	lsls	r7, r2, #16
    2a1c:	0c16      	lsrs	r6, r2, #16
    2a1e:	0c3f      	lsrs	r7, r7, #16
    2a20:	4699      	mov	r9, r3
    2a22:	0c03      	lsrs	r3, r0, #16
    2a24:	437c      	muls	r4, r7
    2a26:	4375      	muls	r5, r6
    2a28:	435f      	muls	r7, r3
    2a2a:	4373      	muls	r3, r6
    2a2c:	197d      	adds	r5, r7, r5
    2a2e:	0c26      	lsrs	r6, r4, #16
    2a30:	19ad      	adds	r5, r5, r6
    2a32:	469c      	mov	ip, r3
    2a34:	42af      	cmp	r7, r5
    2a36:	d903      	bls.n	2a40 <__aeabi_lmul+0x34>
    2a38:	2380      	movs	r3, #128	; 0x80
    2a3a:	025b      	lsls	r3, r3, #9
    2a3c:	4698      	mov	r8, r3
    2a3e:	44c4      	add	ip, r8
    2a40:	464b      	mov	r3, r9
    2a42:	4351      	muls	r1, r2
    2a44:	4343      	muls	r3, r0
    2a46:	0424      	lsls	r4, r4, #16
    2a48:	0c2e      	lsrs	r6, r5, #16
    2a4a:	0c24      	lsrs	r4, r4, #16
    2a4c:	042d      	lsls	r5, r5, #16
    2a4e:	4466      	add	r6, ip
    2a50:	192c      	adds	r4, r5, r4
    2a52:	1859      	adds	r1, r3, r1
    2a54:	1989      	adds	r1, r1, r6
    2a56:	1c20      	adds	r0, r4, #0
    2a58:	bc0c      	pop	{r2, r3}
    2a5a:	4690      	mov	r8, r2
    2a5c:	4699      	mov	r9, r3
    2a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002a60 <__libc_init_array>:
    2a60:	4b0e      	ldr	r3, [pc, #56]	; (2a9c <__libc_init_array+0x3c>)
    2a62:	b570      	push	{r4, r5, r6, lr}
    2a64:	2500      	movs	r5, #0
    2a66:	1c1e      	adds	r6, r3, #0
    2a68:	4c0d      	ldr	r4, [pc, #52]	; (2aa0 <__libc_init_array+0x40>)
    2a6a:	1ae4      	subs	r4, r4, r3
    2a6c:	10a4      	asrs	r4, r4, #2
    2a6e:	42a5      	cmp	r5, r4
    2a70:	d004      	beq.n	2a7c <__libc_init_array+0x1c>
    2a72:	00ab      	lsls	r3, r5, #2
    2a74:	58f3      	ldr	r3, [r6, r3]
    2a76:	4798      	blx	r3
    2a78:	3501      	adds	r5, #1
    2a7a:	e7f8      	b.n	2a6e <__libc_init_array+0xe>
    2a7c:	f002 fb06 	bl	508c <_init>
    2a80:	4b08      	ldr	r3, [pc, #32]	; (2aa4 <__libc_init_array+0x44>)
    2a82:	2500      	movs	r5, #0
    2a84:	1c1e      	adds	r6, r3, #0
    2a86:	4c08      	ldr	r4, [pc, #32]	; (2aa8 <__libc_init_array+0x48>)
    2a88:	1ae4      	subs	r4, r4, r3
    2a8a:	10a4      	asrs	r4, r4, #2
    2a8c:	42a5      	cmp	r5, r4
    2a8e:	d004      	beq.n	2a9a <__libc_init_array+0x3a>
    2a90:	00ab      	lsls	r3, r5, #2
    2a92:	58f3      	ldr	r3, [r6, r3]
    2a94:	4798      	blx	r3
    2a96:	3501      	adds	r5, #1
    2a98:	e7f8      	b.n	2a8c <__libc_init_array+0x2c>
    2a9a:	bd70      	pop	{r4, r5, r6, pc}
    2a9c:	00005098 	.word	0x00005098
    2aa0:	00005098 	.word	0x00005098
    2aa4:	00005098 	.word	0x00005098
    2aa8:	0000509c 	.word	0x0000509c

00002aac <memcpy>:
    2aac:	2300      	movs	r3, #0
    2aae:	b510      	push	{r4, lr}
    2ab0:	4293      	cmp	r3, r2
    2ab2:	d003      	beq.n	2abc <memcpy+0x10>
    2ab4:	5ccc      	ldrb	r4, [r1, r3]
    2ab6:	54c4      	strb	r4, [r0, r3]
    2ab8:	3301      	adds	r3, #1
    2aba:	e7f9      	b.n	2ab0 <memcpy+0x4>
    2abc:	bd10      	pop	{r4, pc}

00002abe <memset>:
    2abe:	1c03      	adds	r3, r0, #0
    2ac0:	1882      	adds	r2, r0, r2
    2ac2:	4293      	cmp	r3, r2
    2ac4:	d002      	beq.n	2acc <memset+0xe>
    2ac6:	7019      	strb	r1, [r3, #0]
    2ac8:	3301      	adds	r3, #1
    2aca:	e7fa      	b.n	2ac2 <memset+0x4>
    2acc:	4770      	bx	lr
	...

00002ad0 <iprintf>:
    2ad0:	b40f      	push	{r0, r1, r2, r3}
    2ad2:	4b0b      	ldr	r3, [pc, #44]	; (2b00 <iprintf+0x30>)
    2ad4:	b513      	push	{r0, r1, r4, lr}
    2ad6:	681c      	ldr	r4, [r3, #0]
    2ad8:	2c00      	cmp	r4, #0
    2ada:	d005      	beq.n	2ae8 <iprintf+0x18>
    2adc:	69a3      	ldr	r3, [r4, #24]
    2ade:	2b00      	cmp	r3, #0
    2ae0:	d102      	bne.n	2ae8 <iprintf+0x18>
    2ae2:	1c20      	adds	r0, r4, #0
    2ae4:	f000 fafc 	bl	30e0 <__sinit>
    2ae8:	ab05      	add	r3, sp, #20
    2aea:	1c20      	adds	r0, r4, #0
    2aec:	68a1      	ldr	r1, [r4, #8]
    2aee:	9a04      	ldr	r2, [sp, #16]
    2af0:	9301      	str	r3, [sp, #4]
    2af2:	f000 fccb 	bl	348c <_vfiprintf_r>
    2af6:	bc16      	pop	{r1, r2, r4}
    2af8:	bc08      	pop	{r3}
    2afa:	b004      	add	sp, #16
    2afc:	4718      	bx	r3
    2afe:	46c0      	nop			; (mov r8, r8)
    2b00:	20000078 	.word	0x20000078

00002b04 <_puts_r>:
    2b04:	b570      	push	{r4, r5, r6, lr}
    2b06:	1c05      	adds	r5, r0, #0
    2b08:	1c0e      	adds	r6, r1, #0
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d004      	beq.n	2b18 <_puts_r+0x14>
    2b0e:	6983      	ldr	r3, [r0, #24]
    2b10:	2b00      	cmp	r3, #0
    2b12:	d101      	bne.n	2b18 <_puts_r+0x14>
    2b14:	f000 fae4 	bl	30e0 <__sinit>
    2b18:	68ac      	ldr	r4, [r5, #8]
    2b1a:	89a3      	ldrh	r3, [r4, #12]
    2b1c:	071b      	lsls	r3, r3, #28
    2b1e:	d502      	bpl.n	2b26 <_puts_r+0x22>
    2b20:	6923      	ldr	r3, [r4, #16]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d119      	bne.n	2b5a <_puts_r+0x56>
    2b26:	1c28      	adds	r0, r5, #0
    2b28:	1c21      	adds	r1, r4, #0
    2b2a:	f000 f959 	bl	2de0 <__swsetup_r>
    2b2e:	2800      	cmp	r0, #0
    2b30:	d013      	beq.n	2b5a <_puts_r+0x56>
    2b32:	2001      	movs	r0, #1
    2b34:	4240      	negs	r0, r0
    2b36:	e045      	b.n	2bc4 <_puts_r+0xc0>
    2b38:	7831      	ldrb	r1, [r6, #0]
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	da1b      	bge.n	2b76 <_puts_r+0x72>
    2b3e:	69a2      	ldr	r2, [r4, #24]
    2b40:	4293      	cmp	r3, r2
    2b42:	da11      	bge.n	2b68 <_puts_r+0x64>
    2b44:	1c22      	adds	r2, r4, #0
    2b46:	1c28      	adds	r0, r5, #0
    2b48:	f000 f8f2 	bl	2d30 <__swbuf_r>
    2b4c:	3001      	adds	r0, #1
    2b4e:	4242      	negs	r2, r0
    2b50:	4142      	adcs	r2, r0
    2b52:	b2d0      	uxtb	r0, r2
    2b54:	2800      	cmp	r0, #0
    2b56:	d1ec      	bne.n	2b32 <_puts_r+0x2e>
    2b58:	3601      	adds	r6, #1
    2b5a:	68a3      	ldr	r3, [r4, #8]
    2b5c:	7832      	ldrb	r2, [r6, #0]
    2b5e:	3b01      	subs	r3, #1
    2b60:	60a3      	str	r3, [r4, #8]
    2b62:	2a00      	cmp	r2, #0
    2b64:	d1e8      	bne.n	2b38 <_puts_r+0x34>
    2b66:	e00c      	b.n	2b82 <_puts_r+0x7e>
    2b68:	6823      	ldr	r3, [r4, #0]
    2b6a:	7019      	strb	r1, [r3, #0]
    2b6c:	6823      	ldr	r3, [r4, #0]
    2b6e:	7819      	ldrb	r1, [r3, #0]
    2b70:	290a      	cmp	r1, #10
    2b72:	d103      	bne.n	2b7c <_puts_r+0x78>
    2b74:	e7e6      	b.n	2b44 <_puts_r+0x40>
    2b76:	6823      	ldr	r3, [r4, #0]
    2b78:	7019      	strb	r1, [r3, #0]
    2b7a:	6823      	ldr	r3, [r4, #0]
    2b7c:	3301      	adds	r3, #1
    2b7e:	6023      	str	r3, [r4, #0]
    2b80:	e7ea      	b.n	2b58 <_puts_r+0x54>
    2b82:	2b00      	cmp	r3, #0
    2b84:	da17      	bge.n	2bb6 <_puts_r+0xb2>
    2b86:	69a2      	ldr	r2, [r4, #24]
    2b88:	4293      	cmp	r3, r2
    2b8a:	db08      	blt.n	2b9e <_puts_r+0x9a>
    2b8c:	230a      	movs	r3, #10
    2b8e:	6822      	ldr	r2, [r4, #0]
    2b90:	7013      	strb	r3, [r2, #0]
    2b92:	6823      	ldr	r3, [r4, #0]
    2b94:	7819      	ldrb	r1, [r3, #0]
    2b96:	290a      	cmp	r1, #10
    2b98:	d111      	bne.n	2bbe <_puts_r+0xba>
    2b9a:	1c28      	adds	r0, r5, #0
    2b9c:	e001      	b.n	2ba2 <_puts_r+0x9e>
    2b9e:	1c28      	adds	r0, r5, #0
    2ba0:	210a      	movs	r1, #10
    2ba2:	1c22      	adds	r2, r4, #0
    2ba4:	f000 f8c4 	bl	2d30 <__swbuf_r>
    2ba8:	3001      	adds	r0, #1
    2baa:	4242      	negs	r2, r0
    2bac:	4142      	adcs	r2, r0
    2bae:	b2d0      	uxtb	r0, r2
    2bb0:	2800      	cmp	r0, #0
    2bb2:	d006      	beq.n	2bc2 <_puts_r+0xbe>
    2bb4:	e7bd      	b.n	2b32 <_puts_r+0x2e>
    2bb6:	230a      	movs	r3, #10
    2bb8:	6822      	ldr	r2, [r4, #0]
    2bba:	7013      	strb	r3, [r2, #0]
    2bbc:	6823      	ldr	r3, [r4, #0]
    2bbe:	3301      	adds	r3, #1
    2bc0:	6023      	str	r3, [r4, #0]
    2bc2:	200a      	movs	r0, #10
    2bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

00002bc8 <puts>:
    2bc8:	b508      	push	{r3, lr}
    2bca:	4b03      	ldr	r3, [pc, #12]	; (2bd8 <puts+0x10>)
    2bcc:	1c01      	adds	r1, r0, #0
    2bce:	6818      	ldr	r0, [r3, #0]
    2bd0:	f7ff ff98 	bl	2b04 <_puts_r>
    2bd4:	bd08      	pop	{r3, pc}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	20000078 	.word	0x20000078

00002bdc <iscanf>:
    2bdc:	b40f      	push	{r0, r1, r2, r3}
    2bde:	4b0b      	ldr	r3, [pc, #44]	; (2c0c <iscanf+0x30>)
    2be0:	b513      	push	{r0, r1, r4, lr}
    2be2:	681c      	ldr	r4, [r3, #0]
    2be4:	2c00      	cmp	r4, #0
    2be6:	d005      	beq.n	2bf4 <iscanf+0x18>
    2be8:	69a3      	ldr	r3, [r4, #24]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d102      	bne.n	2bf4 <iscanf+0x18>
    2bee:	1c20      	adds	r0, r4, #0
    2bf0:	f000 fa76 	bl	30e0 <__sinit>
    2bf4:	ab05      	add	r3, sp, #20
    2bf6:	1c20      	adds	r0, r4, #0
    2bf8:	6861      	ldr	r1, [r4, #4]
    2bfa:	9a04      	ldr	r2, [sp, #16]
    2bfc:	9301      	str	r3, [sp, #4]
    2bfe:	f001 f853 	bl	3ca8 <_vfiscanf_r>
    2c02:	bc16      	pop	{r1, r2, r4}
    2c04:	bc08      	pop	{r3}
    2c06:	b004      	add	sp, #16
    2c08:	4718      	bx	r3
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	20000078 	.word	0x20000078

00002c10 <setbuf>:
    2c10:	b508      	push	{r3, lr}
    2c12:	424a      	negs	r2, r1
    2c14:	414a      	adcs	r2, r1
    2c16:	2380      	movs	r3, #128	; 0x80
    2c18:	0052      	lsls	r2, r2, #1
    2c1a:	00db      	lsls	r3, r3, #3
    2c1c:	f000 f802 	bl	2c24 <setvbuf>
    2c20:	bd08      	pop	{r3, pc}
	...

00002c24 <setvbuf>:
    2c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c26:	1c1e      	adds	r6, r3, #0
    2c28:	4b3c      	ldr	r3, [pc, #240]	; (2d1c <setvbuf+0xf8>)
    2c2a:	1c04      	adds	r4, r0, #0
    2c2c:	681d      	ldr	r5, [r3, #0]
    2c2e:	1c0f      	adds	r7, r1, #0
    2c30:	9201      	str	r2, [sp, #4]
    2c32:	2d00      	cmp	r5, #0
    2c34:	d005      	beq.n	2c42 <setvbuf+0x1e>
    2c36:	69ab      	ldr	r3, [r5, #24]
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d102      	bne.n	2c42 <setvbuf+0x1e>
    2c3c:	1c28      	adds	r0, r5, #0
    2c3e:	f000 fa4f 	bl	30e0 <__sinit>
    2c42:	4b37      	ldr	r3, [pc, #220]	; (2d20 <setvbuf+0xfc>)
    2c44:	429c      	cmp	r4, r3
    2c46:	d101      	bne.n	2c4c <setvbuf+0x28>
    2c48:	686c      	ldr	r4, [r5, #4]
    2c4a:	e008      	b.n	2c5e <setvbuf+0x3a>
    2c4c:	4b35      	ldr	r3, [pc, #212]	; (2d24 <setvbuf+0x100>)
    2c4e:	429c      	cmp	r4, r3
    2c50:	d101      	bne.n	2c56 <setvbuf+0x32>
    2c52:	68ac      	ldr	r4, [r5, #8]
    2c54:	e003      	b.n	2c5e <setvbuf+0x3a>
    2c56:	4b34      	ldr	r3, [pc, #208]	; (2d28 <setvbuf+0x104>)
    2c58:	429c      	cmp	r4, r3
    2c5a:	d100      	bne.n	2c5e <setvbuf+0x3a>
    2c5c:	68ec      	ldr	r4, [r5, #12]
    2c5e:	9b01      	ldr	r3, [sp, #4]
    2c60:	2b02      	cmp	r3, #2
    2c62:	d858      	bhi.n	2d16 <setvbuf+0xf2>
    2c64:	2e00      	cmp	r6, #0
    2c66:	db56      	blt.n	2d16 <setvbuf+0xf2>
    2c68:	1c28      	adds	r0, r5, #0
    2c6a:	1c21      	adds	r1, r4, #0
    2c6c:	f000 f9b6 	bl	2fdc <_fflush_r>
    2c70:	2300      	movs	r3, #0
    2c72:	6063      	str	r3, [r4, #4]
    2c74:	61a3      	str	r3, [r4, #24]
    2c76:	89a3      	ldrh	r3, [r4, #12]
    2c78:	061b      	lsls	r3, r3, #24
    2c7a:	d503      	bpl.n	2c84 <setvbuf+0x60>
    2c7c:	1c28      	adds	r0, r5, #0
    2c7e:	6921      	ldr	r1, [r4, #16]
    2c80:	f000 fb3e 	bl	3300 <_free_r>
    2c84:	2283      	movs	r2, #131	; 0x83
    2c86:	89a3      	ldrh	r3, [r4, #12]
    2c88:	4393      	bics	r3, r2
    2c8a:	81a3      	strh	r3, [r4, #12]
    2c8c:	9b01      	ldr	r3, [sp, #4]
    2c8e:	2b02      	cmp	r3, #2
    2c90:	d013      	beq.n	2cba <setvbuf+0x96>
    2c92:	2f00      	cmp	r7, #0
    2c94:	d125      	bne.n	2ce2 <setvbuf+0xbe>
    2c96:	2e00      	cmp	r6, #0
    2c98:	d101      	bne.n	2c9e <setvbuf+0x7a>
    2c9a:	2680      	movs	r6, #128	; 0x80
    2c9c:	00f6      	lsls	r6, r6, #3
    2c9e:	1c30      	adds	r0, r6, #0
    2ca0:	f000 fb24 	bl	32ec <malloc>
    2ca4:	1e07      	subs	r7, r0, #0
    2ca6:	d118      	bne.n	2cda <setvbuf+0xb6>
    2ca8:	2080      	movs	r0, #128	; 0x80
    2caa:	00c0      	lsls	r0, r0, #3
    2cac:	f000 fb1e 	bl	32ec <malloc>
    2cb0:	1e07      	subs	r7, r0, #0
    2cb2:	d110      	bne.n	2cd6 <setvbuf+0xb2>
    2cb4:	2001      	movs	r0, #1
    2cb6:	4240      	negs	r0, r0
    2cb8:	e000      	b.n	2cbc <setvbuf+0x98>
    2cba:	2000      	movs	r0, #0
    2cbc:	2202      	movs	r2, #2
    2cbe:	89a3      	ldrh	r3, [r4, #12]
    2cc0:	4313      	orrs	r3, r2
    2cc2:	81a3      	strh	r3, [r4, #12]
    2cc4:	2300      	movs	r3, #0
    2cc6:	60a3      	str	r3, [r4, #8]
    2cc8:	1c23      	adds	r3, r4, #0
    2cca:	3347      	adds	r3, #71	; 0x47
    2ccc:	6023      	str	r3, [r4, #0]
    2cce:	6123      	str	r3, [r4, #16]
    2cd0:	2301      	movs	r3, #1
    2cd2:	6163      	str	r3, [r4, #20]
    2cd4:	e021      	b.n	2d1a <setvbuf+0xf6>
    2cd6:	2680      	movs	r6, #128	; 0x80
    2cd8:	00f6      	lsls	r6, r6, #3
    2cda:	2280      	movs	r2, #128	; 0x80
    2cdc:	89a3      	ldrh	r3, [r4, #12]
    2cde:	4313      	orrs	r3, r2
    2ce0:	81a3      	strh	r3, [r4, #12]
    2ce2:	9b01      	ldr	r3, [sp, #4]
    2ce4:	2b01      	cmp	r3, #1
    2ce6:	d105      	bne.n	2cf4 <setvbuf+0xd0>
    2ce8:	89a3      	ldrh	r3, [r4, #12]
    2cea:	9a01      	ldr	r2, [sp, #4]
    2cec:	431a      	orrs	r2, r3
    2cee:	4273      	negs	r3, r6
    2cf0:	81a2      	strh	r2, [r4, #12]
    2cf2:	61a3      	str	r3, [r4, #24]
    2cf4:	4b0d      	ldr	r3, [pc, #52]	; (2d2c <setvbuf+0x108>)
    2cf6:	2000      	movs	r0, #0
    2cf8:	62ab      	str	r3, [r5, #40]	; 0x28
    2cfa:	89a2      	ldrh	r2, [r4, #12]
    2cfc:	6027      	str	r7, [r4, #0]
    2cfe:	6127      	str	r7, [r4, #16]
    2d00:	6166      	str	r6, [r4, #20]
    2d02:	0713      	lsls	r3, r2, #28
    2d04:	d509      	bpl.n	2d1a <setvbuf+0xf6>
    2d06:	2303      	movs	r3, #3
    2d08:	401a      	ands	r2, r3
    2d0a:	4253      	negs	r3, r2
    2d0c:	4153      	adcs	r3, r2
    2d0e:	425b      	negs	r3, r3
    2d10:	401e      	ands	r6, r3
    2d12:	60a6      	str	r6, [r4, #8]
    2d14:	e001      	b.n	2d1a <setvbuf+0xf6>
    2d16:	2001      	movs	r0, #1
    2d18:	4240      	negs	r0, r0
    2d1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2d1c:	20000078 	.word	0x20000078
    2d20:	00004ed0 	.word	0x00004ed0
    2d24:	00004ef0 	.word	0x00004ef0
    2d28:	00004f10 	.word	0x00004f10
    2d2c:	0000305d 	.word	0x0000305d

00002d30 <__swbuf_r>:
    2d30:	b570      	push	{r4, r5, r6, lr}
    2d32:	1c05      	adds	r5, r0, #0
    2d34:	1c0e      	adds	r6, r1, #0
    2d36:	1c14      	adds	r4, r2, #0
    2d38:	2800      	cmp	r0, #0
    2d3a:	d004      	beq.n	2d46 <__swbuf_r+0x16>
    2d3c:	6983      	ldr	r3, [r0, #24]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d101      	bne.n	2d46 <__swbuf_r+0x16>
    2d42:	f000 f9cd 	bl	30e0 <__sinit>
    2d46:	4b23      	ldr	r3, [pc, #140]	; (2dd4 <__swbuf_r+0xa4>)
    2d48:	429c      	cmp	r4, r3
    2d4a:	d101      	bne.n	2d50 <__swbuf_r+0x20>
    2d4c:	686c      	ldr	r4, [r5, #4]
    2d4e:	e008      	b.n	2d62 <__swbuf_r+0x32>
    2d50:	4b21      	ldr	r3, [pc, #132]	; (2dd8 <__swbuf_r+0xa8>)
    2d52:	429c      	cmp	r4, r3
    2d54:	d101      	bne.n	2d5a <__swbuf_r+0x2a>
    2d56:	68ac      	ldr	r4, [r5, #8]
    2d58:	e003      	b.n	2d62 <__swbuf_r+0x32>
    2d5a:	4b20      	ldr	r3, [pc, #128]	; (2ddc <__swbuf_r+0xac>)
    2d5c:	429c      	cmp	r4, r3
    2d5e:	d100      	bne.n	2d62 <__swbuf_r+0x32>
    2d60:	68ec      	ldr	r4, [r5, #12]
    2d62:	69a3      	ldr	r3, [r4, #24]
    2d64:	60a3      	str	r3, [r4, #8]
    2d66:	89a3      	ldrh	r3, [r4, #12]
    2d68:	071b      	lsls	r3, r3, #28
    2d6a:	d50a      	bpl.n	2d82 <__swbuf_r+0x52>
    2d6c:	6923      	ldr	r3, [r4, #16]
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d007      	beq.n	2d82 <__swbuf_r+0x52>
    2d72:	6823      	ldr	r3, [r4, #0]
    2d74:	6922      	ldr	r2, [r4, #16]
    2d76:	b2f6      	uxtb	r6, r6
    2d78:	1a98      	subs	r0, r3, r2
    2d7a:	6963      	ldr	r3, [r4, #20]
    2d7c:	4298      	cmp	r0, r3
    2d7e:	db0f      	blt.n	2da0 <__swbuf_r+0x70>
    2d80:	e008      	b.n	2d94 <__swbuf_r+0x64>
    2d82:	1c28      	adds	r0, r5, #0
    2d84:	1c21      	adds	r1, r4, #0
    2d86:	f000 f82b 	bl	2de0 <__swsetup_r>
    2d8a:	2800      	cmp	r0, #0
    2d8c:	d0f1      	beq.n	2d72 <__swbuf_r+0x42>
    2d8e:	2001      	movs	r0, #1
    2d90:	4240      	negs	r0, r0
    2d92:	e01d      	b.n	2dd0 <__swbuf_r+0xa0>
    2d94:	1c28      	adds	r0, r5, #0
    2d96:	1c21      	adds	r1, r4, #0
    2d98:	f000 f920 	bl	2fdc <_fflush_r>
    2d9c:	2800      	cmp	r0, #0
    2d9e:	d1f6      	bne.n	2d8e <__swbuf_r+0x5e>
    2da0:	68a3      	ldr	r3, [r4, #8]
    2da2:	3001      	adds	r0, #1
    2da4:	3b01      	subs	r3, #1
    2da6:	60a3      	str	r3, [r4, #8]
    2da8:	6823      	ldr	r3, [r4, #0]
    2daa:	1c5a      	adds	r2, r3, #1
    2dac:	6022      	str	r2, [r4, #0]
    2dae:	701e      	strb	r6, [r3, #0]
    2db0:	6963      	ldr	r3, [r4, #20]
    2db2:	4298      	cmp	r0, r3
    2db4:	d005      	beq.n	2dc2 <__swbuf_r+0x92>
    2db6:	89a3      	ldrh	r3, [r4, #12]
    2db8:	1c30      	adds	r0, r6, #0
    2dba:	07db      	lsls	r3, r3, #31
    2dbc:	d508      	bpl.n	2dd0 <__swbuf_r+0xa0>
    2dbe:	2e0a      	cmp	r6, #10
    2dc0:	d106      	bne.n	2dd0 <__swbuf_r+0xa0>
    2dc2:	1c28      	adds	r0, r5, #0
    2dc4:	1c21      	adds	r1, r4, #0
    2dc6:	f000 f909 	bl	2fdc <_fflush_r>
    2dca:	2800      	cmp	r0, #0
    2dcc:	d1df      	bne.n	2d8e <__swbuf_r+0x5e>
    2dce:	1c30      	adds	r0, r6, #0
    2dd0:	bd70      	pop	{r4, r5, r6, pc}
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	00004ed0 	.word	0x00004ed0
    2dd8:	00004ef0 	.word	0x00004ef0
    2ddc:	00004f10 	.word	0x00004f10

00002de0 <__swsetup_r>:
    2de0:	4b35      	ldr	r3, [pc, #212]	; (2eb8 <__swsetup_r+0xd8>)
    2de2:	b570      	push	{r4, r5, r6, lr}
    2de4:	681d      	ldr	r5, [r3, #0]
    2de6:	1c06      	adds	r6, r0, #0
    2de8:	1c0c      	adds	r4, r1, #0
    2dea:	2d00      	cmp	r5, #0
    2dec:	d005      	beq.n	2dfa <__swsetup_r+0x1a>
    2dee:	69ab      	ldr	r3, [r5, #24]
    2df0:	2b00      	cmp	r3, #0
    2df2:	d102      	bne.n	2dfa <__swsetup_r+0x1a>
    2df4:	1c28      	adds	r0, r5, #0
    2df6:	f000 f973 	bl	30e0 <__sinit>
    2dfa:	4b30      	ldr	r3, [pc, #192]	; (2ebc <__swsetup_r+0xdc>)
    2dfc:	429c      	cmp	r4, r3
    2dfe:	d101      	bne.n	2e04 <__swsetup_r+0x24>
    2e00:	686c      	ldr	r4, [r5, #4]
    2e02:	e008      	b.n	2e16 <__swsetup_r+0x36>
    2e04:	4b2e      	ldr	r3, [pc, #184]	; (2ec0 <__swsetup_r+0xe0>)
    2e06:	429c      	cmp	r4, r3
    2e08:	d101      	bne.n	2e0e <__swsetup_r+0x2e>
    2e0a:	68ac      	ldr	r4, [r5, #8]
    2e0c:	e003      	b.n	2e16 <__swsetup_r+0x36>
    2e0e:	4b2d      	ldr	r3, [pc, #180]	; (2ec4 <__swsetup_r+0xe4>)
    2e10:	429c      	cmp	r4, r3
    2e12:	d100      	bne.n	2e16 <__swsetup_r+0x36>
    2e14:	68ec      	ldr	r4, [r5, #12]
    2e16:	89a3      	ldrh	r3, [r4, #12]
    2e18:	b29a      	uxth	r2, r3
    2e1a:	0711      	lsls	r1, r2, #28
    2e1c:	d423      	bmi.n	2e66 <__swsetup_r+0x86>
    2e1e:	06d1      	lsls	r1, r2, #27
    2e20:	d407      	bmi.n	2e32 <__swsetup_r+0x52>
    2e22:	2209      	movs	r2, #9
    2e24:	2001      	movs	r0, #1
    2e26:	6032      	str	r2, [r6, #0]
    2e28:	3237      	adds	r2, #55	; 0x37
    2e2a:	4313      	orrs	r3, r2
    2e2c:	81a3      	strh	r3, [r4, #12]
    2e2e:	4240      	negs	r0, r0
    2e30:	e040      	b.n	2eb4 <__swsetup_r+0xd4>
    2e32:	0753      	lsls	r3, r2, #29
    2e34:	d513      	bpl.n	2e5e <__swsetup_r+0x7e>
    2e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2e38:	2900      	cmp	r1, #0
    2e3a:	d008      	beq.n	2e4e <__swsetup_r+0x6e>
    2e3c:	1c23      	adds	r3, r4, #0
    2e3e:	3344      	adds	r3, #68	; 0x44
    2e40:	4299      	cmp	r1, r3
    2e42:	d002      	beq.n	2e4a <__swsetup_r+0x6a>
    2e44:	1c30      	adds	r0, r6, #0
    2e46:	f000 fa5b 	bl	3300 <_free_r>
    2e4a:	2300      	movs	r3, #0
    2e4c:	6363      	str	r3, [r4, #52]	; 0x34
    2e4e:	2224      	movs	r2, #36	; 0x24
    2e50:	89a3      	ldrh	r3, [r4, #12]
    2e52:	4393      	bics	r3, r2
    2e54:	81a3      	strh	r3, [r4, #12]
    2e56:	2300      	movs	r3, #0
    2e58:	6063      	str	r3, [r4, #4]
    2e5a:	6923      	ldr	r3, [r4, #16]
    2e5c:	6023      	str	r3, [r4, #0]
    2e5e:	2208      	movs	r2, #8
    2e60:	89a3      	ldrh	r3, [r4, #12]
    2e62:	4313      	orrs	r3, r2
    2e64:	81a3      	strh	r3, [r4, #12]
    2e66:	6923      	ldr	r3, [r4, #16]
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d10b      	bne.n	2e84 <__swsetup_r+0xa4>
    2e6c:	23a0      	movs	r3, #160	; 0xa0
    2e6e:	89a2      	ldrh	r2, [r4, #12]
    2e70:	009b      	lsls	r3, r3, #2
    2e72:	4013      	ands	r3, r2
    2e74:	2280      	movs	r2, #128	; 0x80
    2e76:	0092      	lsls	r2, r2, #2
    2e78:	4293      	cmp	r3, r2
    2e7a:	d003      	beq.n	2e84 <__swsetup_r+0xa4>
    2e7c:	1c30      	adds	r0, r6, #0
    2e7e:	1c21      	adds	r1, r4, #0
    2e80:	f000 f9dc 	bl	323c <__smakebuf_r>
    2e84:	2301      	movs	r3, #1
    2e86:	89a2      	ldrh	r2, [r4, #12]
    2e88:	4013      	ands	r3, r2
    2e8a:	d005      	beq.n	2e98 <__swsetup_r+0xb8>
    2e8c:	2300      	movs	r3, #0
    2e8e:	60a3      	str	r3, [r4, #8]
    2e90:	6963      	ldr	r3, [r4, #20]
    2e92:	425b      	negs	r3, r3
    2e94:	61a3      	str	r3, [r4, #24]
    2e96:	e003      	b.n	2ea0 <__swsetup_r+0xc0>
    2e98:	0791      	lsls	r1, r2, #30
    2e9a:	d400      	bmi.n	2e9e <__swsetup_r+0xbe>
    2e9c:	6963      	ldr	r3, [r4, #20]
    2e9e:	60a3      	str	r3, [r4, #8]
    2ea0:	2000      	movs	r0, #0
    2ea2:	6923      	ldr	r3, [r4, #16]
    2ea4:	4283      	cmp	r3, r0
    2ea6:	d105      	bne.n	2eb4 <__swsetup_r+0xd4>
    2ea8:	0613      	lsls	r3, r2, #24
    2eaa:	d503      	bpl.n	2eb4 <__swsetup_r+0xd4>
    2eac:	2340      	movs	r3, #64	; 0x40
    2eae:	431a      	orrs	r2, r3
    2eb0:	81a2      	strh	r2, [r4, #12]
    2eb2:	3801      	subs	r0, #1
    2eb4:	bd70      	pop	{r4, r5, r6, pc}
    2eb6:	46c0      	nop			; (mov r8, r8)
    2eb8:	20000078 	.word	0x20000078
    2ebc:	00004ed0 	.word	0x00004ed0
    2ec0:	00004ef0 	.word	0x00004ef0
    2ec4:	00004f10 	.word	0x00004f10

00002ec8 <__sflush_r>:
    2ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2eca:	898a      	ldrh	r2, [r1, #12]
    2ecc:	1c05      	adds	r5, r0, #0
    2ece:	1c0c      	adds	r4, r1, #0
    2ed0:	0713      	lsls	r3, r2, #28
    2ed2:	d45e      	bmi.n	2f92 <__sflush_r+0xca>
    2ed4:	684b      	ldr	r3, [r1, #4]
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	dc02      	bgt.n	2ee0 <__sflush_r+0x18>
    2eda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2edc:	2b00      	cmp	r3, #0
    2ede:	dd1a      	ble.n	2f16 <__sflush_r+0x4e>
    2ee0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2ee2:	2f00      	cmp	r7, #0
    2ee4:	d017      	beq.n	2f16 <__sflush_r+0x4e>
    2ee6:	2300      	movs	r3, #0
    2ee8:	682e      	ldr	r6, [r5, #0]
    2eea:	602b      	str	r3, [r5, #0]
    2eec:	2380      	movs	r3, #128	; 0x80
    2eee:	015b      	lsls	r3, r3, #5
    2ef0:	401a      	ands	r2, r3
    2ef2:	d001      	beq.n	2ef8 <__sflush_r+0x30>
    2ef4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2ef6:	e015      	b.n	2f24 <__sflush_r+0x5c>
    2ef8:	1c28      	adds	r0, r5, #0
    2efa:	6a21      	ldr	r1, [r4, #32]
    2efc:	2301      	movs	r3, #1
    2efe:	47b8      	blx	r7
    2f00:	1c02      	adds	r2, r0, #0
    2f02:	1c43      	adds	r3, r0, #1
    2f04:	d10e      	bne.n	2f24 <__sflush_r+0x5c>
    2f06:	682b      	ldr	r3, [r5, #0]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d00b      	beq.n	2f24 <__sflush_r+0x5c>
    2f0c:	2b1d      	cmp	r3, #29
    2f0e:	d001      	beq.n	2f14 <__sflush_r+0x4c>
    2f10:	2b16      	cmp	r3, #22
    2f12:	d102      	bne.n	2f1a <__sflush_r+0x52>
    2f14:	602e      	str	r6, [r5, #0]
    2f16:	2000      	movs	r0, #0
    2f18:	e05e      	b.n	2fd8 <__sflush_r+0x110>
    2f1a:	2140      	movs	r1, #64	; 0x40
    2f1c:	89a3      	ldrh	r3, [r4, #12]
    2f1e:	430b      	orrs	r3, r1
    2f20:	81a3      	strh	r3, [r4, #12]
    2f22:	e059      	b.n	2fd8 <__sflush_r+0x110>
    2f24:	89a3      	ldrh	r3, [r4, #12]
    2f26:	075b      	lsls	r3, r3, #29
    2f28:	d506      	bpl.n	2f38 <__sflush_r+0x70>
    2f2a:	6863      	ldr	r3, [r4, #4]
    2f2c:	1ad2      	subs	r2, r2, r3
    2f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f30:	2b00      	cmp	r3, #0
    2f32:	d001      	beq.n	2f38 <__sflush_r+0x70>
    2f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2f36:	1ad2      	subs	r2, r2, r3
    2f38:	2300      	movs	r3, #0
    2f3a:	1c28      	adds	r0, r5, #0
    2f3c:	6a21      	ldr	r1, [r4, #32]
    2f3e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2f40:	47b8      	blx	r7
    2f42:	89a3      	ldrh	r3, [r4, #12]
    2f44:	1c42      	adds	r2, r0, #1
    2f46:	d106      	bne.n	2f56 <__sflush_r+0x8e>
    2f48:	682a      	ldr	r2, [r5, #0]
    2f4a:	2a00      	cmp	r2, #0
    2f4c:	d003      	beq.n	2f56 <__sflush_r+0x8e>
    2f4e:	2a1d      	cmp	r2, #29
    2f50:	d001      	beq.n	2f56 <__sflush_r+0x8e>
    2f52:	2a16      	cmp	r2, #22
    2f54:	d119      	bne.n	2f8a <__sflush_r+0xc2>
    2f56:	2200      	movs	r2, #0
    2f58:	6062      	str	r2, [r4, #4]
    2f5a:	6922      	ldr	r2, [r4, #16]
    2f5c:	6022      	str	r2, [r4, #0]
    2f5e:	04db      	lsls	r3, r3, #19
    2f60:	d505      	bpl.n	2f6e <__sflush_r+0xa6>
    2f62:	1c43      	adds	r3, r0, #1
    2f64:	d102      	bne.n	2f6c <__sflush_r+0xa4>
    2f66:	682b      	ldr	r3, [r5, #0]
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d100      	bne.n	2f6e <__sflush_r+0xa6>
    2f6c:	6560      	str	r0, [r4, #84]	; 0x54
    2f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2f70:	602e      	str	r6, [r5, #0]
    2f72:	2900      	cmp	r1, #0
    2f74:	d0cf      	beq.n	2f16 <__sflush_r+0x4e>
    2f76:	1c23      	adds	r3, r4, #0
    2f78:	3344      	adds	r3, #68	; 0x44
    2f7a:	4299      	cmp	r1, r3
    2f7c:	d002      	beq.n	2f84 <__sflush_r+0xbc>
    2f7e:	1c28      	adds	r0, r5, #0
    2f80:	f000 f9be 	bl	3300 <_free_r>
    2f84:	2000      	movs	r0, #0
    2f86:	6360      	str	r0, [r4, #52]	; 0x34
    2f88:	e026      	b.n	2fd8 <__sflush_r+0x110>
    2f8a:	2240      	movs	r2, #64	; 0x40
    2f8c:	4313      	orrs	r3, r2
    2f8e:	81a3      	strh	r3, [r4, #12]
    2f90:	e022      	b.n	2fd8 <__sflush_r+0x110>
    2f92:	690f      	ldr	r7, [r1, #16]
    2f94:	2f00      	cmp	r7, #0
    2f96:	d0be      	beq.n	2f16 <__sflush_r+0x4e>
    2f98:	680b      	ldr	r3, [r1, #0]
    2f9a:	600f      	str	r7, [r1, #0]
    2f9c:	1bdb      	subs	r3, r3, r7
    2f9e:	9301      	str	r3, [sp, #4]
    2fa0:	2300      	movs	r3, #0
    2fa2:	0792      	lsls	r2, r2, #30
    2fa4:	d100      	bne.n	2fa8 <__sflush_r+0xe0>
    2fa6:	694b      	ldr	r3, [r1, #20]
    2fa8:	60a3      	str	r3, [r4, #8]
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	2b00      	cmp	r3, #0
    2fae:	ddb2      	ble.n	2f16 <__sflush_r+0x4e>
    2fb0:	1c28      	adds	r0, r5, #0
    2fb2:	6a21      	ldr	r1, [r4, #32]
    2fb4:	1c3a      	adds	r2, r7, #0
    2fb6:	9b01      	ldr	r3, [sp, #4]
    2fb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2fba:	47b0      	blx	r6
    2fbc:	2800      	cmp	r0, #0
    2fbe:	dc06      	bgt.n	2fce <__sflush_r+0x106>
    2fc0:	2240      	movs	r2, #64	; 0x40
    2fc2:	2001      	movs	r0, #1
    2fc4:	89a3      	ldrh	r3, [r4, #12]
    2fc6:	4240      	negs	r0, r0
    2fc8:	4313      	orrs	r3, r2
    2fca:	81a3      	strh	r3, [r4, #12]
    2fcc:	e004      	b.n	2fd8 <__sflush_r+0x110>
    2fce:	9b01      	ldr	r3, [sp, #4]
    2fd0:	183f      	adds	r7, r7, r0
    2fd2:	1a1b      	subs	r3, r3, r0
    2fd4:	9301      	str	r3, [sp, #4]
    2fd6:	e7e8      	b.n	2faa <__sflush_r+0xe2>
    2fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002fdc <_fflush_r>:
    2fdc:	b538      	push	{r3, r4, r5, lr}
    2fde:	690b      	ldr	r3, [r1, #16]
    2fe0:	1c05      	adds	r5, r0, #0
    2fe2:	1c0c      	adds	r4, r1, #0
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	d101      	bne.n	2fec <_fflush_r+0x10>
    2fe8:	2000      	movs	r0, #0
    2fea:	e01c      	b.n	3026 <_fflush_r+0x4a>
    2fec:	2800      	cmp	r0, #0
    2fee:	d004      	beq.n	2ffa <_fflush_r+0x1e>
    2ff0:	6983      	ldr	r3, [r0, #24]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d101      	bne.n	2ffa <_fflush_r+0x1e>
    2ff6:	f000 f873 	bl	30e0 <__sinit>
    2ffa:	4b0b      	ldr	r3, [pc, #44]	; (3028 <_fflush_r+0x4c>)
    2ffc:	429c      	cmp	r4, r3
    2ffe:	d101      	bne.n	3004 <_fflush_r+0x28>
    3000:	686c      	ldr	r4, [r5, #4]
    3002:	e008      	b.n	3016 <_fflush_r+0x3a>
    3004:	4b09      	ldr	r3, [pc, #36]	; (302c <_fflush_r+0x50>)
    3006:	429c      	cmp	r4, r3
    3008:	d101      	bne.n	300e <_fflush_r+0x32>
    300a:	68ac      	ldr	r4, [r5, #8]
    300c:	e003      	b.n	3016 <_fflush_r+0x3a>
    300e:	4b08      	ldr	r3, [pc, #32]	; (3030 <_fflush_r+0x54>)
    3010:	429c      	cmp	r4, r3
    3012:	d100      	bne.n	3016 <_fflush_r+0x3a>
    3014:	68ec      	ldr	r4, [r5, #12]
    3016:	220c      	movs	r2, #12
    3018:	5ea3      	ldrsh	r3, [r4, r2]
    301a:	2b00      	cmp	r3, #0
    301c:	d0e4      	beq.n	2fe8 <_fflush_r+0xc>
    301e:	1c28      	adds	r0, r5, #0
    3020:	1c21      	adds	r1, r4, #0
    3022:	f7ff ff51 	bl	2ec8 <__sflush_r>
    3026:	bd38      	pop	{r3, r4, r5, pc}
    3028:	00004ed0 	.word	0x00004ed0
    302c:	00004ef0 	.word	0x00004ef0
    3030:	00004f10 	.word	0x00004f10

00003034 <fflush>:
    3034:	b508      	push	{r3, lr}
    3036:	1e01      	subs	r1, r0, #0
    3038:	d105      	bne.n	3046 <fflush+0x12>
    303a:	4b05      	ldr	r3, [pc, #20]	; (3050 <fflush+0x1c>)
    303c:	4905      	ldr	r1, [pc, #20]	; (3054 <fflush+0x20>)
    303e:	6818      	ldr	r0, [r3, #0]
    3040:	f000 f8da 	bl	31f8 <_fwalk_reent>
    3044:	e003      	b.n	304e <fflush+0x1a>
    3046:	4b04      	ldr	r3, [pc, #16]	; (3058 <fflush+0x24>)
    3048:	6818      	ldr	r0, [r3, #0]
    304a:	f7ff ffc7 	bl	2fdc <_fflush_r>
    304e:	bd08      	pop	{r3, pc}
    3050:	00004ecc 	.word	0x00004ecc
    3054:	00002fdd 	.word	0x00002fdd
    3058:	20000078 	.word	0x20000078

0000305c <_cleanup_r>:
    305c:	b508      	push	{r3, lr}
    305e:	4902      	ldr	r1, [pc, #8]	; (3068 <_cleanup_r+0xc>)
    3060:	f000 f8ca 	bl	31f8 <_fwalk_reent>
    3064:	bd08      	pop	{r3, pc}
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	00002fdd 	.word	0x00002fdd

0000306c <std.isra.0>:
    306c:	2300      	movs	r3, #0
    306e:	b510      	push	{r4, lr}
    3070:	1c04      	adds	r4, r0, #0
    3072:	6003      	str	r3, [r0, #0]
    3074:	6043      	str	r3, [r0, #4]
    3076:	6083      	str	r3, [r0, #8]
    3078:	8181      	strh	r1, [r0, #12]
    307a:	6643      	str	r3, [r0, #100]	; 0x64
    307c:	81c2      	strh	r2, [r0, #14]
    307e:	6103      	str	r3, [r0, #16]
    3080:	6143      	str	r3, [r0, #20]
    3082:	6183      	str	r3, [r0, #24]
    3084:	1c19      	adds	r1, r3, #0
    3086:	2208      	movs	r2, #8
    3088:	305c      	adds	r0, #92	; 0x5c
    308a:	f7ff fd18 	bl	2abe <memset>
    308e:	4b05      	ldr	r3, [pc, #20]	; (30a4 <std.isra.0+0x38>)
    3090:	6224      	str	r4, [r4, #32]
    3092:	6263      	str	r3, [r4, #36]	; 0x24
    3094:	4b04      	ldr	r3, [pc, #16]	; (30a8 <std.isra.0+0x3c>)
    3096:	62a3      	str	r3, [r4, #40]	; 0x28
    3098:	4b04      	ldr	r3, [pc, #16]	; (30ac <std.isra.0+0x40>)
    309a:	62e3      	str	r3, [r4, #44]	; 0x2c
    309c:	4b04      	ldr	r3, [pc, #16]	; (30b0 <std.isra.0+0x44>)
    309e:	6323      	str	r3, [r4, #48]	; 0x30
    30a0:	bd10      	pop	{r4, pc}
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	0000416d 	.word	0x0000416d
    30a8:	00004195 	.word	0x00004195
    30ac:	000041cd 	.word	0x000041cd
    30b0:	000041f9 	.word	0x000041f9

000030b4 <__sfmoreglue>:
    30b4:	b570      	push	{r4, r5, r6, lr}
    30b6:	2568      	movs	r5, #104	; 0x68
    30b8:	1e4b      	subs	r3, r1, #1
    30ba:	435d      	muls	r5, r3
    30bc:	1c0e      	adds	r6, r1, #0
    30be:	1c29      	adds	r1, r5, #0
    30c0:	3174      	adds	r1, #116	; 0x74
    30c2:	f000 f963 	bl	338c <_malloc_r>
    30c6:	1e04      	subs	r4, r0, #0
    30c8:	d008      	beq.n	30dc <__sfmoreglue+0x28>
    30ca:	2100      	movs	r1, #0
    30cc:	1c2a      	adds	r2, r5, #0
    30ce:	6001      	str	r1, [r0, #0]
    30d0:	6046      	str	r6, [r0, #4]
    30d2:	300c      	adds	r0, #12
    30d4:	60a0      	str	r0, [r4, #8]
    30d6:	3268      	adds	r2, #104	; 0x68
    30d8:	f7ff fcf1 	bl	2abe <memset>
    30dc:	1c20      	adds	r0, r4, #0
    30de:	bd70      	pop	{r4, r5, r6, pc}

000030e0 <__sinit>:
    30e0:	6983      	ldr	r3, [r0, #24]
    30e2:	b513      	push	{r0, r1, r4, lr}
    30e4:	2b00      	cmp	r3, #0
    30e6:	d128      	bne.n	313a <__sinit+0x5a>
    30e8:	6483      	str	r3, [r0, #72]	; 0x48
    30ea:	64c3      	str	r3, [r0, #76]	; 0x4c
    30ec:	6503      	str	r3, [r0, #80]	; 0x50
    30ee:	4b13      	ldr	r3, [pc, #76]	; (313c <__sinit+0x5c>)
    30f0:	4a13      	ldr	r2, [pc, #76]	; (3140 <__sinit+0x60>)
    30f2:	681b      	ldr	r3, [r3, #0]
    30f4:	6282      	str	r2, [r0, #40]	; 0x28
    30f6:	9301      	str	r3, [sp, #4]
    30f8:	4298      	cmp	r0, r3
    30fa:	d101      	bne.n	3100 <__sinit+0x20>
    30fc:	2301      	movs	r3, #1
    30fe:	6183      	str	r3, [r0, #24]
    3100:	1c04      	adds	r4, r0, #0
    3102:	f000 f81f 	bl	3144 <__sfp>
    3106:	6060      	str	r0, [r4, #4]
    3108:	1c20      	adds	r0, r4, #0
    310a:	f000 f81b 	bl	3144 <__sfp>
    310e:	60a0      	str	r0, [r4, #8]
    3110:	1c20      	adds	r0, r4, #0
    3112:	f000 f817 	bl	3144 <__sfp>
    3116:	2104      	movs	r1, #4
    3118:	60e0      	str	r0, [r4, #12]
    311a:	2200      	movs	r2, #0
    311c:	6860      	ldr	r0, [r4, #4]
    311e:	f7ff ffa5 	bl	306c <std.isra.0>
    3122:	68a0      	ldr	r0, [r4, #8]
    3124:	2109      	movs	r1, #9
    3126:	2201      	movs	r2, #1
    3128:	f7ff ffa0 	bl	306c <std.isra.0>
    312c:	68e0      	ldr	r0, [r4, #12]
    312e:	2112      	movs	r1, #18
    3130:	2202      	movs	r2, #2
    3132:	f7ff ff9b 	bl	306c <std.isra.0>
    3136:	2301      	movs	r3, #1
    3138:	61a3      	str	r3, [r4, #24]
    313a:	bd13      	pop	{r0, r1, r4, pc}
    313c:	00004ecc 	.word	0x00004ecc
    3140:	0000305d 	.word	0x0000305d

00003144 <__sfp>:
    3144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3146:	4b1d      	ldr	r3, [pc, #116]	; (31bc <__sfp+0x78>)
    3148:	1c06      	adds	r6, r0, #0
    314a:	681d      	ldr	r5, [r3, #0]
    314c:	69ab      	ldr	r3, [r5, #24]
    314e:	2b00      	cmp	r3, #0
    3150:	d102      	bne.n	3158 <__sfp+0x14>
    3152:	1c28      	adds	r0, r5, #0
    3154:	f7ff ffc4 	bl	30e0 <__sinit>
    3158:	3548      	adds	r5, #72	; 0x48
    315a:	68ac      	ldr	r4, [r5, #8]
    315c:	686b      	ldr	r3, [r5, #4]
    315e:	3b01      	subs	r3, #1
    3160:	d405      	bmi.n	316e <__sfp+0x2a>
    3162:	220c      	movs	r2, #12
    3164:	5ea7      	ldrsh	r7, [r4, r2]
    3166:	2f00      	cmp	r7, #0
    3168:	d010      	beq.n	318c <__sfp+0x48>
    316a:	3468      	adds	r4, #104	; 0x68
    316c:	e7f7      	b.n	315e <__sfp+0x1a>
    316e:	682b      	ldr	r3, [r5, #0]
    3170:	2b00      	cmp	r3, #0
    3172:	d106      	bne.n	3182 <__sfp+0x3e>
    3174:	1c30      	adds	r0, r6, #0
    3176:	2104      	movs	r1, #4
    3178:	f7ff ff9c 	bl	30b4 <__sfmoreglue>
    317c:	6028      	str	r0, [r5, #0]
    317e:	2800      	cmp	r0, #0
    3180:	d001      	beq.n	3186 <__sfp+0x42>
    3182:	682d      	ldr	r5, [r5, #0]
    3184:	e7e9      	b.n	315a <__sfp+0x16>
    3186:	230c      	movs	r3, #12
    3188:	6033      	str	r3, [r6, #0]
    318a:	e016      	b.n	31ba <__sfp+0x76>
    318c:	2301      	movs	r3, #1
    318e:	1c20      	adds	r0, r4, #0
    3190:	425b      	negs	r3, r3
    3192:	81e3      	strh	r3, [r4, #14]
    3194:	3302      	adds	r3, #2
    3196:	81a3      	strh	r3, [r4, #12]
    3198:	6667      	str	r7, [r4, #100]	; 0x64
    319a:	6027      	str	r7, [r4, #0]
    319c:	60a7      	str	r7, [r4, #8]
    319e:	6067      	str	r7, [r4, #4]
    31a0:	6127      	str	r7, [r4, #16]
    31a2:	6167      	str	r7, [r4, #20]
    31a4:	61a7      	str	r7, [r4, #24]
    31a6:	305c      	adds	r0, #92	; 0x5c
    31a8:	1c39      	adds	r1, r7, #0
    31aa:	2208      	movs	r2, #8
    31ac:	f7ff fc87 	bl	2abe <memset>
    31b0:	1c20      	adds	r0, r4, #0
    31b2:	6367      	str	r7, [r4, #52]	; 0x34
    31b4:	63a7      	str	r7, [r4, #56]	; 0x38
    31b6:	64a7      	str	r7, [r4, #72]	; 0x48
    31b8:	64e7      	str	r7, [r4, #76]	; 0x4c
    31ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31bc:	00004ecc 	.word	0x00004ecc

000031c0 <_fwalk>:
    31c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31c2:	3048      	adds	r0, #72	; 0x48
    31c4:	1c04      	adds	r4, r0, #0
    31c6:	2600      	movs	r6, #0
    31c8:	9101      	str	r1, [sp, #4]
    31ca:	2c00      	cmp	r4, #0
    31cc:	d012      	beq.n	31f4 <_fwalk+0x34>
    31ce:	68a5      	ldr	r5, [r4, #8]
    31d0:	6867      	ldr	r7, [r4, #4]
    31d2:	3f01      	subs	r7, #1
    31d4:	d40c      	bmi.n	31f0 <_fwalk+0x30>
    31d6:	89ab      	ldrh	r3, [r5, #12]
    31d8:	2b01      	cmp	r3, #1
    31da:	d907      	bls.n	31ec <_fwalk+0x2c>
    31dc:	220e      	movs	r2, #14
    31de:	5eab      	ldrsh	r3, [r5, r2]
    31e0:	3301      	adds	r3, #1
    31e2:	d003      	beq.n	31ec <_fwalk+0x2c>
    31e4:	1c28      	adds	r0, r5, #0
    31e6:	9b01      	ldr	r3, [sp, #4]
    31e8:	4798      	blx	r3
    31ea:	4306      	orrs	r6, r0
    31ec:	3568      	adds	r5, #104	; 0x68
    31ee:	e7f0      	b.n	31d2 <_fwalk+0x12>
    31f0:	6824      	ldr	r4, [r4, #0]
    31f2:	e7ea      	b.n	31ca <_fwalk+0xa>
    31f4:	1c30      	adds	r0, r6, #0
    31f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000031f8 <_fwalk_reent>:
    31f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31fa:	1c04      	adds	r4, r0, #0
    31fc:	1c07      	adds	r7, r0, #0
    31fe:	2600      	movs	r6, #0
    3200:	9101      	str	r1, [sp, #4]
    3202:	3448      	adds	r4, #72	; 0x48
    3204:	2c00      	cmp	r4, #0
    3206:	d016      	beq.n	3236 <_fwalk_reent+0x3e>
    3208:	6863      	ldr	r3, [r4, #4]
    320a:	68a5      	ldr	r5, [r4, #8]
    320c:	9300      	str	r3, [sp, #0]
    320e:	9b00      	ldr	r3, [sp, #0]
    3210:	3b01      	subs	r3, #1
    3212:	9300      	str	r3, [sp, #0]
    3214:	d40d      	bmi.n	3232 <_fwalk_reent+0x3a>
    3216:	89ab      	ldrh	r3, [r5, #12]
    3218:	2b01      	cmp	r3, #1
    321a:	d908      	bls.n	322e <_fwalk_reent+0x36>
    321c:	220e      	movs	r2, #14
    321e:	5eab      	ldrsh	r3, [r5, r2]
    3220:	3301      	adds	r3, #1
    3222:	d004      	beq.n	322e <_fwalk_reent+0x36>
    3224:	1c38      	adds	r0, r7, #0
    3226:	1c29      	adds	r1, r5, #0
    3228:	9b01      	ldr	r3, [sp, #4]
    322a:	4798      	blx	r3
    322c:	4306      	orrs	r6, r0
    322e:	3568      	adds	r5, #104	; 0x68
    3230:	e7ed      	b.n	320e <_fwalk_reent+0x16>
    3232:	6824      	ldr	r4, [r4, #0]
    3234:	e7e6      	b.n	3204 <_fwalk_reent+0xc>
    3236:	1c30      	adds	r0, r6, #0
    3238:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000323c <__smakebuf_r>:
    323c:	b5f0      	push	{r4, r5, r6, r7, lr}
    323e:	898b      	ldrh	r3, [r1, #12]
    3240:	b091      	sub	sp, #68	; 0x44
    3242:	079b      	lsls	r3, r3, #30
    3244:	d506      	bpl.n	3254 <__smakebuf_r+0x18>
    3246:	1c0b      	adds	r3, r1, #0
    3248:	3347      	adds	r3, #71	; 0x47
    324a:	600b      	str	r3, [r1, #0]
    324c:	610b      	str	r3, [r1, #16]
    324e:	2301      	movs	r3, #1
    3250:	614b      	str	r3, [r1, #20]
    3252:	e045      	b.n	32e0 <__smakebuf_r+0xa4>
    3254:	1c0c      	adds	r4, r1, #0
    3256:	230e      	movs	r3, #14
    3258:	5ec9      	ldrsh	r1, [r1, r3]
    325a:	1c06      	adds	r6, r0, #0
    325c:	2900      	cmp	r1, #0
    325e:	da04      	bge.n	326a <__smakebuf_r+0x2e>
    3260:	2380      	movs	r3, #128	; 0x80
    3262:	89a5      	ldrh	r5, [r4, #12]
    3264:	401d      	ands	r5, r3
    3266:	d110      	bne.n	328a <__smakebuf_r+0x4e>
    3268:	e00c      	b.n	3284 <__smakebuf_r+0x48>
    326a:	aa01      	add	r2, sp, #4
    326c:	f001 f9b2 	bl	45d4 <_fstat_r>
    3270:	2800      	cmp	r0, #0
    3272:	dbf5      	blt.n	3260 <__smakebuf_r+0x24>
    3274:	23f0      	movs	r3, #240	; 0xf0
    3276:	9d02      	ldr	r5, [sp, #8]
    3278:	021b      	lsls	r3, r3, #8
    327a:	401d      	ands	r5, r3
    327c:	4b19      	ldr	r3, [pc, #100]	; (32e4 <__smakebuf_r+0xa8>)
    327e:	18ed      	adds	r5, r5, r3
    3280:	426b      	negs	r3, r5
    3282:	415d      	adcs	r5, r3
    3284:	2780      	movs	r7, #128	; 0x80
    3286:	00ff      	lsls	r7, r7, #3
    3288:	e001      	b.n	328e <__smakebuf_r+0x52>
    328a:	2500      	movs	r5, #0
    328c:	2740      	movs	r7, #64	; 0x40
    328e:	1c30      	adds	r0, r6, #0
    3290:	1c39      	adds	r1, r7, #0
    3292:	f000 f87b 	bl	338c <_malloc_r>
    3296:	2800      	cmp	r0, #0
    3298:	d10c      	bne.n	32b4 <__smakebuf_r+0x78>
    329a:	89a3      	ldrh	r3, [r4, #12]
    329c:	059a      	lsls	r2, r3, #22
    329e:	d41f      	bmi.n	32e0 <__smakebuf_r+0xa4>
    32a0:	2202      	movs	r2, #2
    32a2:	4313      	orrs	r3, r2
    32a4:	81a3      	strh	r3, [r4, #12]
    32a6:	1c23      	adds	r3, r4, #0
    32a8:	3347      	adds	r3, #71	; 0x47
    32aa:	6023      	str	r3, [r4, #0]
    32ac:	6123      	str	r3, [r4, #16]
    32ae:	2301      	movs	r3, #1
    32b0:	6163      	str	r3, [r4, #20]
    32b2:	e015      	b.n	32e0 <__smakebuf_r+0xa4>
    32b4:	2280      	movs	r2, #128	; 0x80
    32b6:	4b0c      	ldr	r3, [pc, #48]	; (32e8 <__smakebuf_r+0xac>)
    32b8:	62b3      	str	r3, [r6, #40]	; 0x28
    32ba:	89a3      	ldrh	r3, [r4, #12]
    32bc:	6020      	str	r0, [r4, #0]
    32be:	4313      	orrs	r3, r2
    32c0:	81a3      	strh	r3, [r4, #12]
    32c2:	6120      	str	r0, [r4, #16]
    32c4:	6167      	str	r7, [r4, #20]
    32c6:	2d00      	cmp	r5, #0
    32c8:	d00a      	beq.n	32e0 <__smakebuf_r+0xa4>
    32ca:	230e      	movs	r3, #14
    32cc:	5ee1      	ldrsh	r1, [r4, r3]
    32ce:	1c30      	adds	r0, r6, #0
    32d0:	f001 f992 	bl	45f8 <_isatty_r>
    32d4:	2800      	cmp	r0, #0
    32d6:	d003      	beq.n	32e0 <__smakebuf_r+0xa4>
    32d8:	2201      	movs	r2, #1
    32da:	89a3      	ldrh	r3, [r4, #12]
    32dc:	4313      	orrs	r3, r2
    32de:	81a3      	strh	r3, [r4, #12]
    32e0:	b011      	add	sp, #68	; 0x44
    32e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32e4:	ffffe000 	.word	0xffffe000
    32e8:	0000305d 	.word	0x0000305d

000032ec <malloc>:
    32ec:	b508      	push	{r3, lr}
    32ee:	4b03      	ldr	r3, [pc, #12]	; (32fc <malloc+0x10>)
    32f0:	1c01      	adds	r1, r0, #0
    32f2:	6818      	ldr	r0, [r3, #0]
    32f4:	f000 f84a 	bl	338c <_malloc_r>
    32f8:	bd08      	pop	{r3, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	20000078 	.word	0x20000078

00003300 <_free_r>:
    3300:	b530      	push	{r4, r5, lr}
    3302:	2900      	cmp	r1, #0
    3304:	d03e      	beq.n	3384 <_free_r+0x84>
    3306:	3904      	subs	r1, #4
    3308:	680b      	ldr	r3, [r1, #0]
    330a:	2b00      	cmp	r3, #0
    330c:	da00      	bge.n	3310 <_free_r+0x10>
    330e:	18c9      	adds	r1, r1, r3
    3310:	4a1d      	ldr	r2, [pc, #116]	; (3388 <_free_r+0x88>)
    3312:	6813      	ldr	r3, [r2, #0]
    3314:	1c14      	adds	r4, r2, #0
    3316:	2b00      	cmp	r3, #0
    3318:	d102      	bne.n	3320 <_free_r+0x20>
    331a:	604b      	str	r3, [r1, #4]
    331c:	6011      	str	r1, [r2, #0]
    331e:	e031      	b.n	3384 <_free_r+0x84>
    3320:	4299      	cmp	r1, r3
    3322:	d20d      	bcs.n	3340 <_free_r+0x40>
    3324:	6808      	ldr	r0, [r1, #0]
    3326:	180a      	adds	r2, r1, r0
    3328:	429a      	cmp	r2, r3
    332a:	d103      	bne.n	3334 <_free_r+0x34>
    332c:	6813      	ldr	r3, [r2, #0]
    332e:	18c3      	adds	r3, r0, r3
    3330:	600b      	str	r3, [r1, #0]
    3332:	6853      	ldr	r3, [r2, #4]
    3334:	604b      	str	r3, [r1, #4]
    3336:	6021      	str	r1, [r4, #0]
    3338:	e024      	b.n	3384 <_free_r+0x84>
    333a:	428a      	cmp	r2, r1
    333c:	d803      	bhi.n	3346 <_free_r+0x46>
    333e:	1c13      	adds	r3, r2, #0
    3340:	685a      	ldr	r2, [r3, #4]
    3342:	2a00      	cmp	r2, #0
    3344:	d1f9      	bne.n	333a <_free_r+0x3a>
    3346:	681d      	ldr	r5, [r3, #0]
    3348:	195c      	adds	r4, r3, r5
    334a:	428c      	cmp	r4, r1
    334c:	d10b      	bne.n	3366 <_free_r+0x66>
    334e:	6809      	ldr	r1, [r1, #0]
    3350:	1869      	adds	r1, r5, r1
    3352:	1858      	adds	r0, r3, r1
    3354:	6019      	str	r1, [r3, #0]
    3356:	4290      	cmp	r0, r2
    3358:	d114      	bne.n	3384 <_free_r+0x84>
    335a:	6810      	ldr	r0, [r2, #0]
    335c:	6852      	ldr	r2, [r2, #4]
    335e:	1809      	adds	r1, r1, r0
    3360:	6019      	str	r1, [r3, #0]
    3362:	605a      	str	r2, [r3, #4]
    3364:	e00e      	b.n	3384 <_free_r+0x84>
    3366:	428c      	cmp	r4, r1
    3368:	d902      	bls.n	3370 <_free_r+0x70>
    336a:	230c      	movs	r3, #12
    336c:	6003      	str	r3, [r0, #0]
    336e:	e009      	b.n	3384 <_free_r+0x84>
    3370:	6808      	ldr	r0, [r1, #0]
    3372:	180c      	adds	r4, r1, r0
    3374:	4294      	cmp	r4, r2
    3376:	d103      	bne.n	3380 <_free_r+0x80>
    3378:	6814      	ldr	r4, [r2, #0]
    337a:	6852      	ldr	r2, [r2, #4]
    337c:	1900      	adds	r0, r0, r4
    337e:	6008      	str	r0, [r1, #0]
    3380:	604a      	str	r2, [r1, #4]
    3382:	6059      	str	r1, [r3, #4]
    3384:	bd30      	pop	{r4, r5, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	20000ad8 	.word	0x20000ad8

0000338c <_malloc_r>:
    338c:	2303      	movs	r3, #3
    338e:	b570      	push	{r4, r5, r6, lr}
    3390:	1ccc      	adds	r4, r1, #3
    3392:	439c      	bics	r4, r3
    3394:	3408      	adds	r4, #8
    3396:	1c05      	adds	r5, r0, #0
    3398:	2c0c      	cmp	r4, #12
    339a:	d201      	bcs.n	33a0 <_malloc_r+0x14>
    339c:	240c      	movs	r4, #12
    339e:	e005      	b.n	33ac <_malloc_r+0x20>
    33a0:	2c00      	cmp	r4, #0
    33a2:	da03      	bge.n	33ac <_malloc_r+0x20>
    33a4:	230c      	movs	r3, #12
    33a6:	2000      	movs	r0, #0
    33a8:	602b      	str	r3, [r5, #0]
    33aa:	e042      	b.n	3432 <_malloc_r+0xa6>
    33ac:	428c      	cmp	r4, r1
    33ae:	d3f9      	bcc.n	33a4 <_malloc_r+0x18>
    33b0:	4a20      	ldr	r2, [pc, #128]	; (3434 <_malloc_r+0xa8>)
    33b2:	6813      	ldr	r3, [r2, #0]
    33b4:	1c10      	adds	r0, r2, #0
    33b6:	1c19      	adds	r1, r3, #0
    33b8:	2900      	cmp	r1, #0
    33ba:	d013      	beq.n	33e4 <_malloc_r+0x58>
    33bc:	680a      	ldr	r2, [r1, #0]
    33be:	1b12      	subs	r2, r2, r4
    33c0:	d40d      	bmi.n	33de <_malloc_r+0x52>
    33c2:	2a0b      	cmp	r2, #11
    33c4:	d902      	bls.n	33cc <_malloc_r+0x40>
    33c6:	600a      	str	r2, [r1, #0]
    33c8:	188b      	adds	r3, r1, r2
    33ca:	e01f      	b.n	340c <_malloc_r+0x80>
    33cc:	428b      	cmp	r3, r1
    33ce:	d102      	bne.n	33d6 <_malloc_r+0x4a>
    33d0:	685a      	ldr	r2, [r3, #4]
    33d2:	6002      	str	r2, [r0, #0]
    33d4:	e01b      	b.n	340e <_malloc_r+0x82>
    33d6:	684a      	ldr	r2, [r1, #4]
    33d8:	605a      	str	r2, [r3, #4]
    33da:	1c0b      	adds	r3, r1, #0
    33dc:	e017      	b.n	340e <_malloc_r+0x82>
    33de:	1c0b      	adds	r3, r1, #0
    33e0:	6849      	ldr	r1, [r1, #4]
    33e2:	e7e9      	b.n	33b8 <_malloc_r+0x2c>
    33e4:	4e14      	ldr	r6, [pc, #80]	; (3438 <_malloc_r+0xac>)
    33e6:	6833      	ldr	r3, [r6, #0]
    33e8:	2b00      	cmp	r3, #0
    33ea:	d103      	bne.n	33f4 <_malloc_r+0x68>
    33ec:	1c28      	adds	r0, r5, #0
    33ee:	f000 fe77 	bl	40e0 <_sbrk_r>
    33f2:	6030      	str	r0, [r6, #0]
    33f4:	1c28      	adds	r0, r5, #0
    33f6:	1c21      	adds	r1, r4, #0
    33f8:	f000 fe72 	bl	40e0 <_sbrk_r>
    33fc:	1c03      	adds	r3, r0, #0
    33fe:	1c42      	adds	r2, r0, #1
    3400:	d0d0      	beq.n	33a4 <_malloc_r+0x18>
    3402:	2203      	movs	r2, #3
    3404:	1cc6      	adds	r6, r0, #3
    3406:	4396      	bics	r6, r2
    3408:	4286      	cmp	r6, r0
    340a:	d10a      	bne.n	3422 <_malloc_r+0x96>
    340c:	601c      	str	r4, [r3, #0]
    340e:	1c18      	adds	r0, r3, #0
    3410:	2107      	movs	r1, #7
    3412:	300b      	adds	r0, #11
    3414:	1d1a      	adds	r2, r3, #4
    3416:	4388      	bics	r0, r1
    3418:	1a82      	subs	r2, r0, r2
    341a:	d00a      	beq.n	3432 <_malloc_r+0xa6>
    341c:	4251      	negs	r1, r2
    341e:	5099      	str	r1, [r3, r2]
    3420:	e007      	b.n	3432 <_malloc_r+0xa6>
    3422:	1a31      	subs	r1, r6, r0
    3424:	1c28      	adds	r0, r5, #0
    3426:	f000 fe5b 	bl	40e0 <_sbrk_r>
    342a:	1c43      	adds	r3, r0, #1
    342c:	d0ba      	beq.n	33a4 <_malloc_r+0x18>
    342e:	1c33      	adds	r3, r6, #0
    3430:	e7ec      	b.n	340c <_malloc_r+0x80>
    3432:	bd70      	pop	{r4, r5, r6, pc}
    3434:	20000ad8 	.word	0x20000ad8
    3438:	20000ad4 	.word	0x20000ad4

0000343c <__sfputc_r>:
    343c:	6893      	ldr	r3, [r2, #8]
    343e:	b510      	push	{r4, lr}
    3440:	3b01      	subs	r3, #1
    3442:	6093      	str	r3, [r2, #8]
    3444:	2b00      	cmp	r3, #0
    3446:	da05      	bge.n	3454 <__sfputc_r+0x18>
    3448:	6994      	ldr	r4, [r2, #24]
    344a:	42a3      	cmp	r3, r4
    344c:	db08      	blt.n	3460 <__sfputc_r+0x24>
    344e:	b2cb      	uxtb	r3, r1
    3450:	2b0a      	cmp	r3, #10
    3452:	d005      	beq.n	3460 <__sfputc_r+0x24>
    3454:	6813      	ldr	r3, [r2, #0]
    3456:	1c58      	adds	r0, r3, #1
    3458:	6010      	str	r0, [r2, #0]
    345a:	7019      	strb	r1, [r3, #0]
    345c:	b2c8      	uxtb	r0, r1
    345e:	e001      	b.n	3464 <__sfputc_r+0x28>
    3460:	f7ff fc66 	bl	2d30 <__swbuf_r>
    3464:	bd10      	pop	{r4, pc}

00003466 <__sfputs_r>:
    3466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3468:	1c06      	adds	r6, r0, #0
    346a:	1c0f      	adds	r7, r1, #0
    346c:	1c14      	adds	r4, r2, #0
    346e:	18d5      	adds	r5, r2, r3
    3470:	42ac      	cmp	r4, r5
    3472:	d008      	beq.n	3486 <__sfputs_r+0x20>
    3474:	7821      	ldrb	r1, [r4, #0]
    3476:	1c30      	adds	r0, r6, #0
    3478:	1c3a      	adds	r2, r7, #0
    347a:	f7ff ffdf 	bl	343c <__sfputc_r>
    347e:	3401      	adds	r4, #1
    3480:	1c43      	adds	r3, r0, #1
    3482:	d1f5      	bne.n	3470 <__sfputs_r+0xa>
    3484:	e000      	b.n	3488 <__sfputs_r+0x22>
    3486:	2000      	movs	r0, #0
    3488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000348c <_vfiprintf_r>:
    348c:	b5f0      	push	{r4, r5, r6, r7, lr}
    348e:	b09f      	sub	sp, #124	; 0x7c
    3490:	1c06      	adds	r6, r0, #0
    3492:	1c0f      	adds	r7, r1, #0
    3494:	9202      	str	r2, [sp, #8]
    3496:	9305      	str	r3, [sp, #20]
    3498:	2800      	cmp	r0, #0
    349a:	d004      	beq.n	34a6 <_vfiprintf_r+0x1a>
    349c:	6983      	ldr	r3, [r0, #24]
    349e:	2b00      	cmp	r3, #0
    34a0:	d101      	bne.n	34a6 <_vfiprintf_r+0x1a>
    34a2:	f7ff fe1d 	bl	30e0 <__sinit>
    34a6:	4b79      	ldr	r3, [pc, #484]	; (368c <_vfiprintf_r+0x200>)
    34a8:	429f      	cmp	r7, r3
    34aa:	d101      	bne.n	34b0 <_vfiprintf_r+0x24>
    34ac:	6877      	ldr	r7, [r6, #4]
    34ae:	e008      	b.n	34c2 <_vfiprintf_r+0x36>
    34b0:	4b77      	ldr	r3, [pc, #476]	; (3690 <_vfiprintf_r+0x204>)
    34b2:	429f      	cmp	r7, r3
    34b4:	d101      	bne.n	34ba <_vfiprintf_r+0x2e>
    34b6:	68b7      	ldr	r7, [r6, #8]
    34b8:	e003      	b.n	34c2 <_vfiprintf_r+0x36>
    34ba:	4b76      	ldr	r3, [pc, #472]	; (3694 <_vfiprintf_r+0x208>)
    34bc:	429f      	cmp	r7, r3
    34be:	d100      	bne.n	34c2 <_vfiprintf_r+0x36>
    34c0:	68f7      	ldr	r7, [r6, #12]
    34c2:	89bb      	ldrh	r3, [r7, #12]
    34c4:	071b      	lsls	r3, r3, #28
    34c6:	d50a      	bpl.n	34de <_vfiprintf_r+0x52>
    34c8:	693b      	ldr	r3, [r7, #16]
    34ca:	2b00      	cmp	r3, #0
    34cc:	d007      	beq.n	34de <_vfiprintf_r+0x52>
    34ce:	2300      	movs	r3, #0
    34d0:	ad06      	add	r5, sp, #24
    34d2:	616b      	str	r3, [r5, #20]
    34d4:	3320      	adds	r3, #32
    34d6:	766b      	strb	r3, [r5, #25]
    34d8:	3310      	adds	r3, #16
    34da:	76ab      	strb	r3, [r5, #26]
    34dc:	e03d      	b.n	355a <_vfiprintf_r+0xce>
    34de:	1c30      	adds	r0, r6, #0
    34e0:	1c39      	adds	r1, r7, #0
    34e2:	f7ff fc7d 	bl	2de0 <__swsetup_r>
    34e6:	2800      	cmp	r0, #0
    34e8:	d0f1      	beq.n	34ce <_vfiprintf_r+0x42>
    34ea:	2001      	movs	r0, #1
    34ec:	4240      	negs	r0, r0
    34ee:	e0ca      	b.n	3686 <_vfiprintf_r+0x1fa>
    34f0:	9a05      	ldr	r2, [sp, #20]
    34f2:	1d11      	adds	r1, r2, #4
    34f4:	6812      	ldr	r2, [r2, #0]
    34f6:	9105      	str	r1, [sp, #20]
    34f8:	2a00      	cmp	r2, #0
    34fa:	db7e      	blt.n	35fa <_vfiprintf_r+0x16e>
    34fc:	9209      	str	r2, [sp, #36]	; 0x24
    34fe:	3401      	adds	r4, #1
    3500:	7823      	ldrb	r3, [r4, #0]
    3502:	2b2e      	cmp	r3, #46	; 0x2e
    3504:	d100      	bne.n	3508 <_vfiprintf_r+0x7c>
    3506:	e089      	b.n	361c <_vfiprintf_r+0x190>
    3508:	7821      	ldrb	r1, [r4, #0]
    350a:	4863      	ldr	r0, [pc, #396]	; (3698 <_vfiprintf_r+0x20c>)
    350c:	2203      	movs	r2, #3
    350e:	f001 f899 	bl	4644 <memchr>
    3512:	2800      	cmp	r0, #0
    3514:	d008      	beq.n	3528 <_vfiprintf_r+0x9c>
    3516:	4b60      	ldr	r3, [pc, #384]	; (3698 <_vfiprintf_r+0x20c>)
    3518:	3401      	adds	r4, #1
    351a:	1ac0      	subs	r0, r0, r3
    351c:	2340      	movs	r3, #64	; 0x40
    351e:	4083      	lsls	r3, r0
    3520:	1c18      	adds	r0, r3, #0
    3522:	682b      	ldr	r3, [r5, #0]
    3524:	4318      	orrs	r0, r3
    3526:	6028      	str	r0, [r5, #0]
    3528:	7821      	ldrb	r1, [r4, #0]
    352a:	1c63      	adds	r3, r4, #1
    352c:	485b      	ldr	r0, [pc, #364]	; (369c <_vfiprintf_r+0x210>)
    352e:	2206      	movs	r2, #6
    3530:	9302      	str	r3, [sp, #8]
    3532:	7629      	strb	r1, [r5, #24]
    3534:	f001 f886 	bl	4644 <memchr>
    3538:	2800      	cmp	r0, #0
    353a:	d100      	bne.n	353e <_vfiprintf_r+0xb2>
    353c:	e091      	b.n	3662 <_vfiprintf_r+0x1d6>
    353e:	4b58      	ldr	r3, [pc, #352]	; (36a0 <_vfiprintf_r+0x214>)
    3540:	2b00      	cmp	r3, #0
    3542:	d000      	beq.n	3546 <_vfiprintf_r+0xba>
    3544:	e084      	b.n	3650 <_vfiprintf_r+0x1c4>
    3546:	2207      	movs	r2, #7
    3548:	9b05      	ldr	r3, [sp, #20]
    354a:	3307      	adds	r3, #7
    354c:	4393      	bics	r3, r2
    354e:	3308      	adds	r3, #8
    3550:	9305      	str	r3, [sp, #20]
    3552:	696b      	ldr	r3, [r5, #20]
    3554:	9a03      	ldr	r2, [sp, #12]
    3556:	189b      	adds	r3, r3, r2
    3558:	616b      	str	r3, [r5, #20]
    355a:	9c02      	ldr	r4, [sp, #8]
    355c:	7823      	ldrb	r3, [r4, #0]
    355e:	2b00      	cmp	r3, #0
    3560:	d104      	bne.n	356c <_vfiprintf_r+0xe0>
    3562:	9b02      	ldr	r3, [sp, #8]
    3564:	1ae3      	subs	r3, r4, r3
    3566:	9304      	str	r3, [sp, #16]
    3568:	d011      	beq.n	358e <_vfiprintf_r+0x102>
    356a:	e003      	b.n	3574 <_vfiprintf_r+0xe8>
    356c:	2b25      	cmp	r3, #37	; 0x25
    356e:	d0f8      	beq.n	3562 <_vfiprintf_r+0xd6>
    3570:	3401      	adds	r4, #1
    3572:	e7f3      	b.n	355c <_vfiprintf_r+0xd0>
    3574:	9b04      	ldr	r3, [sp, #16]
    3576:	1c30      	adds	r0, r6, #0
    3578:	1c39      	adds	r1, r7, #0
    357a:	9a02      	ldr	r2, [sp, #8]
    357c:	f7ff ff73 	bl	3466 <__sfputs_r>
    3580:	1c43      	adds	r3, r0, #1
    3582:	d07b      	beq.n	367c <_vfiprintf_r+0x1f0>
    3584:	696a      	ldr	r2, [r5, #20]
    3586:	9b04      	ldr	r3, [sp, #16]
    3588:	4694      	mov	ip, r2
    358a:	4463      	add	r3, ip
    358c:	616b      	str	r3, [r5, #20]
    358e:	7823      	ldrb	r3, [r4, #0]
    3590:	2b00      	cmp	r3, #0
    3592:	d073      	beq.n	367c <_vfiprintf_r+0x1f0>
    3594:	2201      	movs	r2, #1
    3596:	2300      	movs	r3, #0
    3598:	4252      	negs	r2, r2
    359a:	606a      	str	r2, [r5, #4]
    359c:	a902      	add	r1, sp, #8
    359e:	3254      	adds	r2, #84	; 0x54
    35a0:	1852      	adds	r2, r2, r1
    35a2:	3401      	adds	r4, #1
    35a4:	602b      	str	r3, [r5, #0]
    35a6:	60eb      	str	r3, [r5, #12]
    35a8:	60ab      	str	r3, [r5, #8]
    35aa:	7013      	strb	r3, [r2, #0]
    35ac:	65ab      	str	r3, [r5, #88]	; 0x58
    35ae:	7821      	ldrb	r1, [r4, #0]
    35b0:	483c      	ldr	r0, [pc, #240]	; (36a4 <_vfiprintf_r+0x218>)
    35b2:	2205      	movs	r2, #5
    35b4:	f001 f846 	bl	4644 <memchr>
    35b8:	2800      	cmp	r0, #0
    35ba:	d009      	beq.n	35d0 <_vfiprintf_r+0x144>
    35bc:	4b39      	ldr	r3, [pc, #228]	; (36a4 <_vfiprintf_r+0x218>)
    35be:	3401      	adds	r4, #1
    35c0:	1ac0      	subs	r0, r0, r3
    35c2:	2301      	movs	r3, #1
    35c4:	4083      	lsls	r3, r0
    35c6:	1c18      	adds	r0, r3, #0
    35c8:	682b      	ldr	r3, [r5, #0]
    35ca:	4318      	orrs	r0, r3
    35cc:	6028      	str	r0, [r5, #0]
    35ce:	e7ee      	b.n	35ae <_vfiprintf_r+0x122>
    35d0:	682b      	ldr	r3, [r5, #0]
    35d2:	06da      	lsls	r2, r3, #27
    35d4:	d504      	bpl.n	35e0 <_vfiprintf_r+0x154>
    35d6:	2253      	movs	r2, #83	; 0x53
    35d8:	2120      	movs	r1, #32
    35da:	a802      	add	r0, sp, #8
    35dc:	1812      	adds	r2, r2, r0
    35de:	7011      	strb	r1, [r2, #0]
    35e0:	071a      	lsls	r2, r3, #28
    35e2:	d504      	bpl.n	35ee <_vfiprintf_r+0x162>
    35e4:	2253      	movs	r2, #83	; 0x53
    35e6:	212b      	movs	r1, #43	; 0x2b
    35e8:	a802      	add	r0, sp, #8
    35ea:	1812      	adds	r2, r2, r0
    35ec:	7011      	strb	r1, [r2, #0]
    35ee:	7822      	ldrb	r2, [r4, #0]
    35f0:	2a2a      	cmp	r2, #42	; 0x2a
    35f2:	d100      	bne.n	35f6 <_vfiprintf_r+0x16a>
    35f4:	e77c      	b.n	34f0 <_vfiprintf_r+0x64>
    35f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35f8:	e005      	b.n	3606 <_vfiprintf_r+0x17a>
    35fa:	4252      	negs	r2, r2
    35fc:	60ea      	str	r2, [r5, #12]
    35fe:	2202      	movs	r2, #2
    3600:	4313      	orrs	r3, r2
    3602:	602b      	str	r3, [r5, #0]
    3604:	e77b      	b.n	34fe <_vfiprintf_r+0x72>
    3606:	7822      	ldrb	r2, [r4, #0]
    3608:	3a30      	subs	r2, #48	; 0x30
    360a:	2a09      	cmp	r2, #9
    360c:	d804      	bhi.n	3618 <_vfiprintf_r+0x18c>
    360e:	210a      	movs	r1, #10
    3610:	434b      	muls	r3, r1
    3612:	3401      	adds	r4, #1
    3614:	189b      	adds	r3, r3, r2
    3616:	e7f6      	b.n	3606 <_vfiprintf_r+0x17a>
    3618:	9309      	str	r3, [sp, #36]	; 0x24
    361a:	e771      	b.n	3500 <_vfiprintf_r+0x74>
    361c:	7863      	ldrb	r3, [r4, #1]
    361e:	2b2a      	cmp	r3, #42	; 0x2a
    3620:	d109      	bne.n	3636 <_vfiprintf_r+0x1aa>
    3622:	9b05      	ldr	r3, [sp, #20]
    3624:	3402      	adds	r4, #2
    3626:	1d1a      	adds	r2, r3, #4
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	9205      	str	r2, [sp, #20]
    362c:	2b00      	cmp	r3, #0
    362e:	da0d      	bge.n	364c <_vfiprintf_r+0x1c0>
    3630:	2301      	movs	r3, #1
    3632:	425b      	negs	r3, r3
    3634:	e00a      	b.n	364c <_vfiprintf_r+0x1c0>
    3636:	2300      	movs	r3, #0
    3638:	3401      	adds	r4, #1
    363a:	7822      	ldrb	r2, [r4, #0]
    363c:	3a30      	subs	r2, #48	; 0x30
    363e:	2a09      	cmp	r2, #9
    3640:	d804      	bhi.n	364c <_vfiprintf_r+0x1c0>
    3642:	210a      	movs	r1, #10
    3644:	434b      	muls	r3, r1
    3646:	3401      	adds	r4, #1
    3648:	189b      	adds	r3, r3, r2
    364a:	e7f6      	b.n	363a <_vfiprintf_r+0x1ae>
    364c:	9307      	str	r3, [sp, #28]
    364e:	e75b      	b.n	3508 <_vfiprintf_r+0x7c>
    3650:	ab05      	add	r3, sp, #20
    3652:	9300      	str	r3, [sp, #0]
    3654:	1c30      	adds	r0, r6, #0
    3656:	1c29      	adds	r1, r5, #0
    3658:	1c3a      	adds	r2, r7, #0
    365a:	4b13      	ldr	r3, [pc, #76]	; (36a8 <_vfiprintf_r+0x21c>)
    365c:	e000      	b.n	3660 <_vfiprintf_r+0x1d4>
    365e:	bf00      	nop
    3660:	e007      	b.n	3672 <_vfiprintf_r+0x1e6>
    3662:	ab05      	add	r3, sp, #20
    3664:	9300      	str	r3, [sp, #0]
    3666:	1c30      	adds	r0, r6, #0
    3668:	1c29      	adds	r1, r5, #0
    366a:	1c3a      	adds	r2, r7, #0
    366c:	4b0e      	ldr	r3, [pc, #56]	; (36a8 <_vfiprintf_r+0x21c>)
    366e:	f000 f88b 	bl	3788 <_printf_i>
    3672:	9003      	str	r0, [sp, #12]
    3674:	9b03      	ldr	r3, [sp, #12]
    3676:	3301      	adds	r3, #1
    3678:	d000      	beq.n	367c <_vfiprintf_r+0x1f0>
    367a:	e76a      	b.n	3552 <_vfiprintf_r+0xc6>
    367c:	89bb      	ldrh	r3, [r7, #12]
    367e:	065b      	lsls	r3, r3, #25
    3680:	d500      	bpl.n	3684 <_vfiprintf_r+0x1f8>
    3682:	e732      	b.n	34ea <_vfiprintf_r+0x5e>
    3684:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3686:	b01f      	add	sp, #124	; 0x7c
    3688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	00004ed0 	.word	0x00004ed0
    3690:	00004ef0 	.word	0x00004ef0
    3694:	00004f10 	.word	0x00004f10
    3698:	00004f36 	.word	0x00004f36
    369c:	00004f3a 	.word	0x00004f3a
    36a0:	00000000 	.word	0x00000000
    36a4:	00004f30 	.word	0x00004f30
    36a8:	00003467 	.word	0x00003467

000036ac <_printf_common>:
    36ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    36ae:	1c17      	adds	r7, r2, #0
    36b0:	9301      	str	r3, [sp, #4]
    36b2:	690a      	ldr	r2, [r1, #16]
    36b4:	688b      	ldr	r3, [r1, #8]
    36b6:	9000      	str	r0, [sp, #0]
    36b8:	1c0c      	adds	r4, r1, #0
    36ba:	4293      	cmp	r3, r2
    36bc:	da00      	bge.n	36c0 <_printf_common+0x14>
    36be:	1c13      	adds	r3, r2, #0
    36c0:	1c22      	adds	r2, r4, #0
    36c2:	603b      	str	r3, [r7, #0]
    36c4:	3243      	adds	r2, #67	; 0x43
    36c6:	7812      	ldrb	r2, [r2, #0]
    36c8:	2a00      	cmp	r2, #0
    36ca:	d001      	beq.n	36d0 <_printf_common+0x24>
    36cc:	3301      	adds	r3, #1
    36ce:	603b      	str	r3, [r7, #0]
    36d0:	6823      	ldr	r3, [r4, #0]
    36d2:	069b      	lsls	r3, r3, #26
    36d4:	d502      	bpl.n	36dc <_printf_common+0x30>
    36d6:	683b      	ldr	r3, [r7, #0]
    36d8:	3302      	adds	r3, #2
    36da:	603b      	str	r3, [r7, #0]
    36dc:	2506      	movs	r5, #6
    36de:	6823      	ldr	r3, [r4, #0]
    36e0:	401d      	ands	r5, r3
    36e2:	d01e      	beq.n	3722 <_printf_common+0x76>
    36e4:	1c23      	adds	r3, r4, #0
    36e6:	3343      	adds	r3, #67	; 0x43
    36e8:	781b      	ldrb	r3, [r3, #0]
    36ea:	1e5a      	subs	r2, r3, #1
    36ec:	4193      	sbcs	r3, r2
    36ee:	6822      	ldr	r2, [r4, #0]
    36f0:	0692      	lsls	r2, r2, #26
    36f2:	d51c      	bpl.n	372e <_printf_common+0x82>
    36f4:	2030      	movs	r0, #48	; 0x30
    36f6:	18e1      	adds	r1, r4, r3
    36f8:	3140      	adds	r1, #64	; 0x40
    36fa:	70c8      	strb	r0, [r1, #3]
    36fc:	1c21      	adds	r1, r4, #0
    36fe:	1c5a      	adds	r2, r3, #1
    3700:	3145      	adds	r1, #69	; 0x45
    3702:	7809      	ldrb	r1, [r1, #0]
    3704:	18a2      	adds	r2, r4, r2
    3706:	3240      	adds	r2, #64	; 0x40
    3708:	3302      	adds	r3, #2
    370a:	70d1      	strb	r1, [r2, #3]
    370c:	e00f      	b.n	372e <_printf_common+0x82>
    370e:	1c22      	adds	r2, r4, #0
    3710:	2301      	movs	r3, #1
    3712:	9800      	ldr	r0, [sp, #0]
    3714:	9901      	ldr	r1, [sp, #4]
    3716:	3219      	adds	r2, #25
    3718:	9e08      	ldr	r6, [sp, #32]
    371a:	47b0      	blx	r6
    371c:	1c43      	adds	r3, r0, #1
    371e:	d00e      	beq.n	373e <_printf_common+0x92>
    3720:	3501      	adds	r5, #1
    3722:	68e3      	ldr	r3, [r4, #12]
    3724:	683a      	ldr	r2, [r7, #0]
    3726:	1a9b      	subs	r3, r3, r2
    3728:	429d      	cmp	r5, r3
    372a:	dbf0      	blt.n	370e <_printf_common+0x62>
    372c:	e7da      	b.n	36e4 <_printf_common+0x38>
    372e:	1c22      	adds	r2, r4, #0
    3730:	9800      	ldr	r0, [sp, #0]
    3732:	9901      	ldr	r1, [sp, #4]
    3734:	3243      	adds	r2, #67	; 0x43
    3736:	9d08      	ldr	r5, [sp, #32]
    3738:	47a8      	blx	r5
    373a:	1c43      	adds	r3, r0, #1
    373c:	d102      	bne.n	3744 <_printf_common+0x98>
    373e:	2001      	movs	r0, #1
    3740:	4240      	negs	r0, r0
    3742:	e020      	b.n	3786 <_printf_common+0xda>
    3744:	2306      	movs	r3, #6
    3746:	6820      	ldr	r0, [r4, #0]
    3748:	68e1      	ldr	r1, [r4, #12]
    374a:	683a      	ldr	r2, [r7, #0]
    374c:	4003      	ands	r3, r0
    374e:	2500      	movs	r5, #0
    3750:	2b04      	cmp	r3, #4
    3752:	d103      	bne.n	375c <_printf_common+0xb0>
    3754:	1a8d      	subs	r5, r1, r2
    3756:	43eb      	mvns	r3, r5
    3758:	17db      	asrs	r3, r3, #31
    375a:	401d      	ands	r5, r3
    375c:	68a3      	ldr	r3, [r4, #8]
    375e:	6922      	ldr	r2, [r4, #16]
    3760:	4293      	cmp	r3, r2
    3762:	dd01      	ble.n	3768 <_printf_common+0xbc>
    3764:	1a9b      	subs	r3, r3, r2
    3766:	18ed      	adds	r5, r5, r3
    3768:	2700      	movs	r7, #0
    376a:	42af      	cmp	r7, r5
    376c:	da0a      	bge.n	3784 <_printf_common+0xd8>
    376e:	1c22      	adds	r2, r4, #0
    3770:	2301      	movs	r3, #1
    3772:	9800      	ldr	r0, [sp, #0]
    3774:	9901      	ldr	r1, [sp, #4]
    3776:	321a      	adds	r2, #26
    3778:	9e08      	ldr	r6, [sp, #32]
    377a:	47b0      	blx	r6
    377c:	1c43      	adds	r3, r0, #1
    377e:	d0de      	beq.n	373e <_printf_common+0x92>
    3780:	3701      	adds	r7, #1
    3782:	e7f2      	b.n	376a <_printf_common+0xbe>
    3784:	2000      	movs	r0, #0
    3786:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003788 <_printf_i>:
    3788:	b5f0      	push	{r4, r5, r6, r7, lr}
    378a:	b08b      	sub	sp, #44	; 0x2c
    378c:	9206      	str	r2, [sp, #24]
    378e:	1c0a      	adds	r2, r1, #0
    3790:	3243      	adds	r2, #67	; 0x43
    3792:	9307      	str	r3, [sp, #28]
    3794:	9005      	str	r0, [sp, #20]
    3796:	9204      	str	r2, [sp, #16]
    3798:	7e0a      	ldrb	r2, [r1, #24]
    379a:	1c0c      	adds	r4, r1, #0
    379c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    379e:	2a6e      	cmp	r2, #110	; 0x6e
    37a0:	d100      	bne.n	37a4 <_printf_i+0x1c>
    37a2:	e0a8      	b.n	38f6 <_printf_i+0x16e>
    37a4:	d811      	bhi.n	37ca <_printf_i+0x42>
    37a6:	2a63      	cmp	r2, #99	; 0x63
    37a8:	d022      	beq.n	37f0 <_printf_i+0x68>
    37aa:	d809      	bhi.n	37c0 <_printf_i+0x38>
    37ac:	2a00      	cmp	r2, #0
    37ae:	d100      	bne.n	37b2 <_printf_i+0x2a>
    37b0:	e0b2      	b.n	3918 <_printf_i+0x190>
    37b2:	2a58      	cmp	r2, #88	; 0x58
    37b4:	d000      	beq.n	37b8 <_printf_i+0x30>
    37b6:	e0c2      	b.n	393e <_printf_i+0x1b6>
    37b8:	3145      	adds	r1, #69	; 0x45
    37ba:	700a      	strb	r2, [r1, #0]
    37bc:	4a7c      	ldr	r2, [pc, #496]	; (39b0 <_printf_i+0x228>)
    37be:	e04f      	b.n	3860 <_printf_i+0xd8>
    37c0:	2a64      	cmp	r2, #100	; 0x64
    37c2:	d01d      	beq.n	3800 <_printf_i+0x78>
    37c4:	2a69      	cmp	r2, #105	; 0x69
    37c6:	d01b      	beq.n	3800 <_printf_i+0x78>
    37c8:	e0b9      	b.n	393e <_printf_i+0x1b6>
    37ca:	2a73      	cmp	r2, #115	; 0x73
    37cc:	d100      	bne.n	37d0 <_printf_i+0x48>
    37ce:	e0a7      	b.n	3920 <_printf_i+0x198>
    37d0:	d809      	bhi.n	37e6 <_printf_i+0x5e>
    37d2:	2a6f      	cmp	r2, #111	; 0x6f
    37d4:	d029      	beq.n	382a <_printf_i+0xa2>
    37d6:	2a70      	cmp	r2, #112	; 0x70
    37d8:	d000      	beq.n	37dc <_printf_i+0x54>
    37da:	e0b0      	b.n	393e <_printf_i+0x1b6>
    37dc:	2220      	movs	r2, #32
    37de:	6809      	ldr	r1, [r1, #0]
    37e0:	430a      	orrs	r2, r1
    37e2:	6022      	str	r2, [r4, #0]
    37e4:	e037      	b.n	3856 <_printf_i+0xce>
    37e6:	2a75      	cmp	r2, #117	; 0x75
    37e8:	d01f      	beq.n	382a <_printf_i+0xa2>
    37ea:	2a78      	cmp	r2, #120	; 0x78
    37ec:	d033      	beq.n	3856 <_printf_i+0xce>
    37ee:	e0a6      	b.n	393e <_printf_i+0x1b6>
    37f0:	1c0e      	adds	r6, r1, #0
    37f2:	681a      	ldr	r2, [r3, #0]
    37f4:	3642      	adds	r6, #66	; 0x42
    37f6:	1d11      	adds	r1, r2, #4
    37f8:	6019      	str	r1, [r3, #0]
    37fa:	6813      	ldr	r3, [r2, #0]
    37fc:	7033      	strb	r3, [r6, #0]
    37fe:	e0a1      	b.n	3944 <_printf_i+0x1bc>
    3800:	6821      	ldr	r1, [r4, #0]
    3802:	681a      	ldr	r2, [r3, #0]
    3804:	0608      	lsls	r0, r1, #24
    3806:	d406      	bmi.n	3816 <_printf_i+0x8e>
    3808:	0649      	lsls	r1, r1, #25
    380a:	d504      	bpl.n	3816 <_printf_i+0x8e>
    380c:	1d11      	adds	r1, r2, #4
    380e:	6019      	str	r1, [r3, #0]
    3810:	2300      	movs	r3, #0
    3812:	5ed5      	ldrsh	r5, [r2, r3]
    3814:	e002      	b.n	381c <_printf_i+0x94>
    3816:	1d11      	adds	r1, r2, #4
    3818:	6019      	str	r1, [r3, #0]
    381a:	6815      	ldr	r5, [r2, #0]
    381c:	2d00      	cmp	r5, #0
    381e:	da3b      	bge.n	3898 <_printf_i+0x110>
    3820:	232d      	movs	r3, #45	; 0x2d
    3822:	9a04      	ldr	r2, [sp, #16]
    3824:	426d      	negs	r5, r5
    3826:	7013      	strb	r3, [r2, #0]
    3828:	e036      	b.n	3898 <_printf_i+0x110>
    382a:	6821      	ldr	r1, [r4, #0]
    382c:	681a      	ldr	r2, [r3, #0]
    382e:	0608      	lsls	r0, r1, #24
    3830:	d406      	bmi.n	3840 <_printf_i+0xb8>
    3832:	0649      	lsls	r1, r1, #25
    3834:	d504      	bpl.n	3840 <_printf_i+0xb8>
    3836:	6815      	ldr	r5, [r2, #0]
    3838:	1d11      	adds	r1, r2, #4
    383a:	6019      	str	r1, [r3, #0]
    383c:	b2ad      	uxth	r5, r5
    383e:	e002      	b.n	3846 <_printf_i+0xbe>
    3840:	1d11      	adds	r1, r2, #4
    3842:	6019      	str	r1, [r3, #0]
    3844:	6815      	ldr	r5, [r2, #0]
    3846:	4b5a      	ldr	r3, [pc, #360]	; (39b0 <_printf_i+0x228>)
    3848:	7e22      	ldrb	r2, [r4, #24]
    384a:	9303      	str	r3, [sp, #12]
    384c:	270a      	movs	r7, #10
    384e:	2a6f      	cmp	r2, #111	; 0x6f
    3850:	d11d      	bne.n	388e <_printf_i+0x106>
    3852:	2708      	movs	r7, #8
    3854:	e01b      	b.n	388e <_printf_i+0x106>
    3856:	1c22      	adds	r2, r4, #0
    3858:	2178      	movs	r1, #120	; 0x78
    385a:	3245      	adds	r2, #69	; 0x45
    385c:	7011      	strb	r1, [r2, #0]
    385e:	4a55      	ldr	r2, [pc, #340]	; (39b4 <_printf_i+0x22c>)
    3860:	6819      	ldr	r1, [r3, #0]
    3862:	9203      	str	r2, [sp, #12]
    3864:	1d08      	adds	r0, r1, #4
    3866:	6822      	ldr	r2, [r4, #0]
    3868:	6018      	str	r0, [r3, #0]
    386a:	680d      	ldr	r5, [r1, #0]
    386c:	0610      	lsls	r0, r2, #24
    386e:	d402      	bmi.n	3876 <_printf_i+0xee>
    3870:	0650      	lsls	r0, r2, #25
    3872:	d500      	bpl.n	3876 <_printf_i+0xee>
    3874:	b2ad      	uxth	r5, r5
    3876:	07d3      	lsls	r3, r2, #31
    3878:	d502      	bpl.n	3880 <_printf_i+0xf8>
    387a:	2320      	movs	r3, #32
    387c:	431a      	orrs	r2, r3
    387e:	6022      	str	r2, [r4, #0]
    3880:	2710      	movs	r7, #16
    3882:	2d00      	cmp	r5, #0
    3884:	d103      	bne.n	388e <_printf_i+0x106>
    3886:	2320      	movs	r3, #32
    3888:	6822      	ldr	r2, [r4, #0]
    388a:	439a      	bics	r2, r3
    388c:	6022      	str	r2, [r4, #0]
    388e:	1c23      	adds	r3, r4, #0
    3890:	2200      	movs	r2, #0
    3892:	3343      	adds	r3, #67	; 0x43
    3894:	701a      	strb	r2, [r3, #0]
    3896:	e002      	b.n	389e <_printf_i+0x116>
    3898:	270a      	movs	r7, #10
    389a:	4b45      	ldr	r3, [pc, #276]	; (39b0 <_printf_i+0x228>)
    389c:	9303      	str	r3, [sp, #12]
    389e:	6863      	ldr	r3, [r4, #4]
    38a0:	60a3      	str	r3, [r4, #8]
    38a2:	2b00      	cmp	r3, #0
    38a4:	db03      	blt.n	38ae <_printf_i+0x126>
    38a6:	2204      	movs	r2, #4
    38a8:	6821      	ldr	r1, [r4, #0]
    38aa:	4391      	bics	r1, r2
    38ac:	6021      	str	r1, [r4, #0]
    38ae:	2d00      	cmp	r5, #0
    38b0:	d102      	bne.n	38b8 <_printf_i+0x130>
    38b2:	9e04      	ldr	r6, [sp, #16]
    38b4:	2b00      	cmp	r3, #0
    38b6:	d00e      	beq.n	38d6 <_printf_i+0x14e>
    38b8:	9e04      	ldr	r6, [sp, #16]
    38ba:	1c28      	adds	r0, r5, #0
    38bc:	1c39      	adds	r1, r7, #0
    38be:	f7ff f899 	bl	29f4 <__aeabi_uidivmod>
    38c2:	9b03      	ldr	r3, [sp, #12]
    38c4:	3e01      	subs	r6, #1
    38c6:	5c5b      	ldrb	r3, [r3, r1]
    38c8:	1c28      	adds	r0, r5, #0
    38ca:	7033      	strb	r3, [r6, #0]
    38cc:	1c39      	adds	r1, r7, #0
    38ce:	f7ff f80b 	bl	28e8 <__aeabi_uidiv>
    38d2:	1e05      	subs	r5, r0, #0
    38d4:	d1f1      	bne.n	38ba <_printf_i+0x132>
    38d6:	2f08      	cmp	r7, #8
    38d8:	d109      	bne.n	38ee <_printf_i+0x166>
    38da:	6823      	ldr	r3, [r4, #0]
    38dc:	07db      	lsls	r3, r3, #31
    38de:	d506      	bpl.n	38ee <_printf_i+0x166>
    38e0:	6863      	ldr	r3, [r4, #4]
    38e2:	6922      	ldr	r2, [r4, #16]
    38e4:	4293      	cmp	r3, r2
    38e6:	dc02      	bgt.n	38ee <_printf_i+0x166>
    38e8:	2330      	movs	r3, #48	; 0x30
    38ea:	3e01      	subs	r6, #1
    38ec:	7033      	strb	r3, [r6, #0]
    38ee:	9b04      	ldr	r3, [sp, #16]
    38f0:	1b9b      	subs	r3, r3, r6
    38f2:	6123      	str	r3, [r4, #16]
    38f4:	e02b      	b.n	394e <_printf_i+0x1c6>
    38f6:	6809      	ldr	r1, [r1, #0]
    38f8:	681a      	ldr	r2, [r3, #0]
    38fa:	0608      	lsls	r0, r1, #24
    38fc:	d407      	bmi.n	390e <_printf_i+0x186>
    38fe:	0649      	lsls	r1, r1, #25
    3900:	d505      	bpl.n	390e <_printf_i+0x186>
    3902:	1d11      	adds	r1, r2, #4
    3904:	6019      	str	r1, [r3, #0]
    3906:	6813      	ldr	r3, [r2, #0]
    3908:	8aa2      	ldrh	r2, [r4, #20]
    390a:	801a      	strh	r2, [r3, #0]
    390c:	e004      	b.n	3918 <_printf_i+0x190>
    390e:	1d11      	adds	r1, r2, #4
    3910:	6019      	str	r1, [r3, #0]
    3912:	6813      	ldr	r3, [r2, #0]
    3914:	6962      	ldr	r2, [r4, #20]
    3916:	601a      	str	r2, [r3, #0]
    3918:	2300      	movs	r3, #0
    391a:	9e04      	ldr	r6, [sp, #16]
    391c:	6123      	str	r3, [r4, #16]
    391e:	e016      	b.n	394e <_printf_i+0x1c6>
    3920:	681a      	ldr	r2, [r3, #0]
    3922:	1d11      	adds	r1, r2, #4
    3924:	6019      	str	r1, [r3, #0]
    3926:	6816      	ldr	r6, [r2, #0]
    3928:	2100      	movs	r1, #0
    392a:	1c30      	adds	r0, r6, #0
    392c:	6862      	ldr	r2, [r4, #4]
    392e:	f000 fe89 	bl	4644 <memchr>
    3932:	2800      	cmp	r0, #0
    3934:	d001      	beq.n	393a <_printf_i+0x1b2>
    3936:	1b80      	subs	r0, r0, r6
    3938:	6060      	str	r0, [r4, #4]
    393a:	6863      	ldr	r3, [r4, #4]
    393c:	e003      	b.n	3946 <_printf_i+0x1be>
    393e:	1c26      	adds	r6, r4, #0
    3940:	3642      	adds	r6, #66	; 0x42
    3942:	7032      	strb	r2, [r6, #0]
    3944:	2301      	movs	r3, #1
    3946:	6123      	str	r3, [r4, #16]
    3948:	2300      	movs	r3, #0
    394a:	9a04      	ldr	r2, [sp, #16]
    394c:	7013      	strb	r3, [r2, #0]
    394e:	9b07      	ldr	r3, [sp, #28]
    3950:	9805      	ldr	r0, [sp, #20]
    3952:	9300      	str	r3, [sp, #0]
    3954:	1c21      	adds	r1, r4, #0
    3956:	9b06      	ldr	r3, [sp, #24]
    3958:	aa09      	add	r2, sp, #36	; 0x24
    395a:	f7ff fea7 	bl	36ac <_printf_common>
    395e:	1c43      	adds	r3, r0, #1
    3960:	d102      	bne.n	3968 <_printf_i+0x1e0>
    3962:	2001      	movs	r0, #1
    3964:	4240      	negs	r0, r0
    3966:	e021      	b.n	39ac <_printf_i+0x224>
    3968:	6923      	ldr	r3, [r4, #16]
    396a:	9805      	ldr	r0, [sp, #20]
    396c:	9906      	ldr	r1, [sp, #24]
    396e:	1c32      	adds	r2, r6, #0
    3970:	9d07      	ldr	r5, [sp, #28]
    3972:	47a8      	blx	r5
    3974:	1c43      	adds	r3, r0, #1
    3976:	d0f4      	beq.n	3962 <_printf_i+0x1da>
    3978:	6823      	ldr	r3, [r4, #0]
    397a:	079b      	lsls	r3, r3, #30
    397c:	d405      	bmi.n	398a <_printf_i+0x202>
    397e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3980:	68e0      	ldr	r0, [r4, #12]
    3982:	4298      	cmp	r0, r3
    3984:	da12      	bge.n	39ac <_printf_i+0x224>
    3986:	1c18      	adds	r0, r3, #0
    3988:	e010      	b.n	39ac <_printf_i+0x224>
    398a:	2500      	movs	r5, #0
    398c:	68e3      	ldr	r3, [r4, #12]
    398e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3990:	1a9b      	subs	r3, r3, r2
    3992:	429d      	cmp	r5, r3
    3994:	daf3      	bge.n	397e <_printf_i+0x1f6>
    3996:	1c22      	adds	r2, r4, #0
    3998:	2301      	movs	r3, #1
    399a:	9805      	ldr	r0, [sp, #20]
    399c:	9906      	ldr	r1, [sp, #24]
    399e:	3219      	adds	r2, #25
    39a0:	9e07      	ldr	r6, [sp, #28]
    39a2:	47b0      	blx	r6
    39a4:	1c43      	adds	r3, r0, #1
    39a6:	d0dc      	beq.n	3962 <_printf_i+0x1da>
    39a8:	3501      	adds	r5, #1
    39aa:	e7ef      	b.n	398c <_printf_i+0x204>
    39ac:	b00b      	add	sp, #44	; 0x2c
    39ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39b0:	00004f41 	.word	0x00004f41
    39b4:	00004f52 	.word	0x00004f52

000039b8 <__svfiscanf_r>:
    39b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ba:	4cb5      	ldr	r4, [pc, #724]	; (3c90 <__svfiscanf_r+0x2d8>)
    39bc:	1c07      	adds	r7, r0, #0
    39be:	44a5      	add	sp, r4
    39c0:	9303      	str	r3, [sp, #12]
    39c2:	2300      	movs	r3, #0
    39c4:	2086      	movs	r0, #134	; 0x86
    39c6:	9348      	str	r3, [sp, #288]	; 0x120
    39c8:	9349      	str	r3, [sp, #292]	; 0x124
    39ca:	ab05      	add	r3, sp, #20
    39cc:	934a      	str	r3, [sp, #296]	; 0x128
    39ce:	23be      	movs	r3, #190	; 0xbe
    39d0:	0040      	lsls	r0, r0, #1
    39d2:	1c0d      	adds	r5, r1, #0
    39d4:	9201      	str	r2, [sp, #4]
    39d6:	a902      	add	r1, sp, #8
    39d8:	4aae      	ldr	r2, [pc, #696]	; (3c94 <__svfiscanf_r+0x2dc>)
    39da:	005b      	lsls	r3, r3, #1
    39dc:	1809      	adds	r1, r1, r0
    39de:	50ca      	str	r2, [r1, r3]
    39e0:	4aad      	ldr	r2, [pc, #692]	; (3c98 <__svfiscanf_r+0x2e0>)
    39e2:	a902      	add	r1, sp, #8
    39e4:	3304      	adds	r3, #4
    39e6:	1809      	adds	r1, r1, r0
    39e8:	50ca      	str	r2, [r1, r3]
    39ea:	9b01      	ldr	r3, [sp, #4]
    39ec:	781c      	ldrb	r4, [r3, #0]
    39ee:	2c00      	cmp	r4, #0
    39f0:	d100      	bne.n	39f4 <__svfiscanf_r+0x3c>
    39f2:	e144      	b.n	3c7e <__svfiscanf_r+0x2c6>
    39f4:	4ea9      	ldr	r6, [pc, #676]	; (3c9c <__svfiscanf_r+0x2e4>)
    39f6:	6833      	ldr	r3, [r6, #0]
    39f8:	191b      	adds	r3, r3, r4
    39fa:	785a      	ldrb	r2, [r3, #1]
    39fc:	2308      	movs	r3, #8
    39fe:	4013      	ands	r3, r2
    3a00:	d023      	beq.n	3a4a <__svfiscanf_r+0x92>
    3a02:	686b      	ldr	r3, [r5, #4]
    3a04:	2b00      	cmp	r3, #0
    3a06:	dd10      	ble.n	3a2a <__svfiscanf_r+0x72>
    3a08:	682b      	ldr	r3, [r5, #0]
    3a0a:	6831      	ldr	r1, [r6, #0]
    3a0c:	781a      	ldrb	r2, [r3, #0]
    3a0e:	188a      	adds	r2, r1, r2
    3a10:	7852      	ldrb	r2, [r2, #1]
    3a12:	0712      	lsls	r2, r2, #28
    3a14:	d515      	bpl.n	3a42 <__svfiscanf_r+0x8a>
    3a16:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3a18:	3301      	adds	r3, #1
    3a1a:	9202      	str	r2, [sp, #8]
    3a1c:	3201      	adds	r2, #1
    3a1e:	9249      	str	r2, [sp, #292]	; 0x124
    3a20:	686a      	ldr	r2, [r5, #4]
    3a22:	602b      	str	r3, [r5, #0]
    3a24:	3a01      	subs	r2, #1
    3a26:	606a      	str	r2, [r5, #4]
    3a28:	e7eb      	b.n	3a02 <__svfiscanf_r+0x4a>
    3a2a:	2186      	movs	r1, #134	; 0x86
    3a2c:	23c0      	movs	r3, #192	; 0xc0
    3a2e:	0049      	lsls	r1, r1, #1
    3a30:	aa02      	add	r2, sp, #8
    3a32:	1852      	adds	r2, r2, r1
    3a34:	005b      	lsls	r3, r3, #1
    3a36:	58d3      	ldr	r3, [r2, r3]
    3a38:	1c38      	adds	r0, r7, #0
    3a3a:	1c29      	adds	r1, r5, #0
    3a3c:	4798      	blx	r3
    3a3e:	2800      	cmp	r0, #0
    3a40:	d0e2      	beq.n	3a08 <__svfiscanf_r+0x50>
    3a42:	9e01      	ldr	r6, [sp, #4]
    3a44:	3601      	adds	r6, #1
    3a46:	9601      	str	r6, [sp, #4]
    3a48:	e7cf      	b.n	39ea <__svfiscanf_r+0x32>
    3a4a:	9a01      	ldr	r2, [sp, #4]
    3a4c:	1c56      	adds	r6, r2, #1
    3a4e:	2c25      	cmp	r4, #37	; 0x25
    3a50:	d14f      	bne.n	3af2 <__svfiscanf_r+0x13a>
    3a52:	9347      	str	r3, [sp, #284]	; 0x11c
    3a54:	9345      	str	r3, [sp, #276]	; 0x114
    3a56:	7853      	ldrb	r3, [r2, #1]
    3a58:	2b2a      	cmp	r3, #42	; 0x2a
    3a5a:	d102      	bne.n	3a62 <__svfiscanf_r+0xaa>
    3a5c:	3b1a      	subs	r3, #26
    3a5e:	9345      	str	r3, [sp, #276]	; 0x114
    3a60:	3601      	adds	r6, #1
    3a62:	1c34      	adds	r4, r6, #0
    3a64:	7821      	ldrb	r1, [r4, #0]
    3a66:	1c0b      	adds	r3, r1, #0
    3a68:	3b30      	subs	r3, #48	; 0x30
    3a6a:	2b09      	cmp	r3, #9
    3a6c:	d809      	bhi.n	3a82 <__svfiscanf_r+0xca>
    3a6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3a70:	3401      	adds	r4, #1
    3a72:	9301      	str	r3, [sp, #4]
    3a74:	230a      	movs	r3, #10
    3a76:	9a01      	ldr	r2, [sp, #4]
    3a78:	4353      	muls	r3, r2
    3a7a:	3b30      	subs	r3, #48	; 0x30
    3a7c:	1859      	adds	r1, r3, r1
    3a7e:	9147      	str	r1, [sp, #284]	; 0x11c
    3a80:	e7f0      	b.n	3a64 <__svfiscanf_r+0xac>
    3a82:	4e87      	ldr	r6, [pc, #540]	; (3ca0 <__svfiscanf_r+0x2e8>)
    3a84:	2203      	movs	r2, #3
    3a86:	1c30      	adds	r0, r6, #0
    3a88:	f000 fddc 	bl	4644 <memchr>
    3a8c:	2800      	cmp	r0, #0
    3a8e:	d008      	beq.n	3aa2 <__svfiscanf_r+0xea>
    3a90:	1b80      	subs	r0, r0, r6
    3a92:	2601      	movs	r6, #1
    3a94:	4086      	lsls	r6, r0
    3a96:	1c30      	adds	r0, r6, #0
    3a98:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3a9a:	3401      	adds	r4, #1
    3a9c:	4318      	orrs	r0, r3
    3a9e:	9301      	str	r3, [sp, #4]
    3aa0:	9045      	str	r0, [sp, #276]	; 0x114
    3aa2:	1c66      	adds	r6, r4, #1
    3aa4:	7824      	ldrb	r4, [r4, #0]
    3aa6:	2c67      	cmp	r4, #103	; 0x67
    3aa8:	d810      	bhi.n	3acc <__svfiscanf_r+0x114>
    3aaa:	2c65      	cmp	r4, #101	; 0x65
    3aac:	d300      	bcc.n	3ab0 <__svfiscanf_r+0xf8>
    3aae:	e084      	b.n	3bba <__svfiscanf_r+0x202>
    3ab0:	2c5b      	cmp	r4, #91	; 0x5b
    3ab2:	d05a      	beq.n	3b6a <__svfiscanf_r+0x1b2>
    3ab4:	d805      	bhi.n	3ac2 <__svfiscanf_r+0x10a>
    3ab6:	2c00      	cmp	r4, #0
    3ab8:	d100      	bne.n	3abc <__svfiscanf_r+0x104>
    3aba:	e0e2      	b.n	3c82 <__svfiscanf_r+0x2ca>
    3abc:	2c25      	cmp	r4, #37	; 0x25
    3abe:	d018      	beq.n	3af2 <__svfiscanf_r+0x13a>
    3ac0:	e07d      	b.n	3bbe <__svfiscanf_r+0x206>
    3ac2:	2c63      	cmp	r4, #99	; 0x63
    3ac4:	d05f      	beq.n	3b86 <__svfiscanf_r+0x1ce>
    3ac6:	2c64      	cmp	r4, #100	; 0x64
    3ac8:	d046      	beq.n	3b58 <__svfiscanf_r+0x1a0>
    3aca:	e078      	b.n	3bbe <__svfiscanf_r+0x206>
    3acc:	2c70      	cmp	r4, #112	; 0x70
    3ace:	d034      	beq.n	3b3a <__svfiscanf_r+0x182>
    3ad0:	d807      	bhi.n	3ae2 <__svfiscanf_r+0x12a>
    3ad2:	2c6e      	cmp	r4, #110	; 0x6e
    3ad4:	d05f      	beq.n	3b96 <__svfiscanf_r+0x1de>
    3ad6:	d841      	bhi.n	3b5c <__svfiscanf_r+0x1a4>
    3ad8:	2c69      	cmp	r4, #105	; 0x69
    3ada:	d170      	bne.n	3bbe <__svfiscanf_r+0x206>
    3adc:	2300      	movs	r3, #0
    3ade:	9346      	str	r3, [sp, #280]	; 0x118
    3ae0:	e041      	b.n	3b66 <__svfiscanf_r+0x1ae>
    3ae2:	2c75      	cmp	r4, #117	; 0x75
    3ae4:	d038      	beq.n	3b58 <__svfiscanf_r+0x1a0>
    3ae6:	2c78      	cmp	r4, #120	; 0x78
    3ae8:	d02d      	beq.n	3b46 <__svfiscanf_r+0x18e>
    3aea:	2c73      	cmp	r4, #115	; 0x73
    3aec:	d167      	bne.n	3bbe <__svfiscanf_r+0x206>
    3aee:	2302      	movs	r3, #2
    3af0:	e047      	b.n	3b82 <__svfiscanf_r+0x1ca>
    3af2:	686b      	ldr	r3, [r5, #4]
    3af4:	2b00      	cmp	r3, #0
    3af6:	dd0e      	ble.n	3b16 <__svfiscanf_r+0x15e>
    3af8:	682b      	ldr	r3, [r5, #0]
    3afa:	781a      	ldrb	r2, [r3, #0]
    3afc:	42a2      	cmp	r2, r4
    3afe:	d000      	beq.n	3b02 <__svfiscanf_r+0x14a>
    3b00:	e0bd      	b.n	3c7e <__svfiscanf_r+0x2c6>
    3b02:	3301      	adds	r3, #1
    3b04:	686a      	ldr	r2, [r5, #4]
    3b06:	602b      	str	r3, [r5, #0]
    3b08:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3b0a:	3a01      	subs	r2, #1
    3b0c:	9301      	str	r3, [sp, #4]
    3b0e:	3301      	adds	r3, #1
    3b10:	606a      	str	r2, [r5, #4]
    3b12:	9349      	str	r3, [sp, #292]	; 0x124
    3b14:	e797      	b.n	3a46 <__svfiscanf_r+0x8e>
    3b16:	2186      	movs	r1, #134	; 0x86
    3b18:	23c0      	movs	r3, #192	; 0xc0
    3b1a:	0049      	lsls	r1, r1, #1
    3b1c:	aa02      	add	r2, sp, #8
    3b1e:	1852      	adds	r2, r2, r1
    3b20:	005b      	lsls	r3, r3, #1
    3b22:	58d3      	ldr	r3, [r2, r3]
    3b24:	1c38      	adds	r0, r7, #0
    3b26:	1c29      	adds	r1, r5, #0
    3b28:	4798      	blx	r3
    3b2a:	2800      	cmp	r0, #0
    3b2c:	d0e4      	beq.n	3af8 <__svfiscanf_r+0x140>
    3b2e:	9848      	ldr	r0, [sp, #288]	; 0x120
    3b30:	2800      	cmp	r0, #0
    3b32:	d000      	beq.n	3b36 <__svfiscanf_r+0x17e>
    3b34:	e09f      	b.n	3c76 <__svfiscanf_r+0x2be>
    3b36:	3801      	subs	r0, #1
    3b38:	e0a5      	b.n	3c86 <__svfiscanf_r+0x2ce>
    3b3a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3b3c:	9301      	str	r3, [sp, #4]
    3b3e:	2320      	movs	r3, #32
    3b40:	9a01      	ldr	r2, [sp, #4]
    3b42:	4313      	orrs	r3, r2
    3b44:	9345      	str	r3, [sp, #276]	; 0x114
    3b46:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3b48:	9301      	str	r3, [sp, #4]
    3b4a:	2380      	movs	r3, #128	; 0x80
    3b4c:	9a01      	ldr	r2, [sp, #4]
    3b4e:	009b      	lsls	r3, r3, #2
    3b50:	4313      	orrs	r3, r2
    3b52:	9345      	str	r3, [sp, #276]	; 0x114
    3b54:	2310      	movs	r3, #16
    3b56:	e002      	b.n	3b5e <__svfiscanf_r+0x1a6>
    3b58:	230a      	movs	r3, #10
    3b5a:	e000      	b.n	3b5e <__svfiscanf_r+0x1a6>
    3b5c:	2308      	movs	r3, #8
    3b5e:	9346      	str	r3, [sp, #280]	; 0x118
    3b60:	2304      	movs	r3, #4
    3b62:	2c6e      	cmp	r4, #110	; 0x6e
    3b64:	dc0d      	bgt.n	3b82 <__svfiscanf_r+0x1ca>
    3b66:	2303      	movs	r3, #3
    3b68:	e00b      	b.n	3b82 <__svfiscanf_r+0x1ca>
    3b6a:	1c31      	adds	r1, r6, #0
    3b6c:	a805      	add	r0, sp, #20
    3b6e:	f000 fac9 	bl	4104 <__sccl>
    3b72:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3b74:	1c06      	adds	r6, r0, #0
    3b76:	9301      	str	r3, [sp, #4]
    3b78:	2340      	movs	r3, #64	; 0x40
    3b7a:	9a01      	ldr	r2, [sp, #4]
    3b7c:	4313      	orrs	r3, r2
    3b7e:	9345      	str	r3, [sp, #276]	; 0x114
    3b80:	2301      	movs	r3, #1
    3b82:	934b      	str	r3, [sp, #300]	; 0x12c
    3b84:	e01f      	b.n	3bc6 <__svfiscanf_r+0x20e>
    3b86:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3b88:	9301      	str	r3, [sp, #4]
    3b8a:	2340      	movs	r3, #64	; 0x40
    3b8c:	9a01      	ldr	r2, [sp, #4]
    3b8e:	4313      	orrs	r3, r2
    3b90:	9345      	str	r3, [sp, #276]	; 0x114
    3b92:	2300      	movs	r3, #0
    3b94:	e7f5      	b.n	3b82 <__svfiscanf_r+0x1ca>
    3b96:	9945      	ldr	r1, [sp, #276]	; 0x114
    3b98:	06cb      	lsls	r3, r1, #27
    3b9a:	d500      	bpl.n	3b9e <__svfiscanf_r+0x1e6>
    3b9c:	e753      	b.n	3a46 <__svfiscanf_r+0x8e>
    3b9e:	9b03      	ldr	r3, [sp, #12]
    3ba0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3ba2:	07c8      	lsls	r0, r1, #31
    3ba4:	d504      	bpl.n	3bb0 <__svfiscanf_r+0x1f8>
    3ba6:	1d19      	adds	r1, r3, #4
    3ba8:	9103      	str	r1, [sp, #12]
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	801a      	strh	r2, [r3, #0]
    3bae:	e74a      	b.n	3a46 <__svfiscanf_r+0x8e>
    3bb0:	1d19      	adds	r1, r3, #4
    3bb2:	9103      	str	r1, [sp, #12]
    3bb4:	681b      	ldr	r3, [r3, #0]
    3bb6:	601a      	str	r2, [r3, #0]
    3bb8:	e745      	b.n	3a46 <__svfiscanf_r+0x8e>
    3bba:	2305      	movs	r3, #5
    3bbc:	e7e1      	b.n	3b82 <__svfiscanf_r+0x1ca>
    3bbe:	2303      	movs	r3, #3
    3bc0:	934b      	str	r3, [sp, #300]	; 0x12c
    3bc2:	3307      	adds	r3, #7
    3bc4:	9346      	str	r3, [sp, #280]	; 0x118
    3bc6:	686b      	ldr	r3, [r5, #4]
    3bc8:	2b00      	cmp	r3, #0
    3bca:	dd04      	ble.n	3bd6 <__svfiscanf_r+0x21e>
    3bcc:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3bce:	9301      	str	r3, [sp, #4]
    3bd0:	065b      	lsls	r3, r3, #25
    3bd2:	d518      	bpl.n	3c06 <__svfiscanf_r+0x24e>
    3bd4:	e01f      	b.n	3c16 <__svfiscanf_r+0x25e>
    3bd6:	2186      	movs	r1, #134	; 0x86
    3bd8:	23c0      	movs	r3, #192	; 0xc0
    3bda:	0049      	lsls	r1, r1, #1
    3bdc:	aa02      	add	r2, sp, #8
    3bde:	1852      	adds	r2, r2, r1
    3be0:	005b      	lsls	r3, r3, #1
    3be2:	58d3      	ldr	r3, [r2, r3]
    3be4:	1c38      	adds	r0, r7, #0
    3be6:	1c29      	adds	r1, r5, #0
    3be8:	4798      	blx	r3
    3bea:	2800      	cmp	r0, #0
    3bec:	d0ee      	beq.n	3bcc <__svfiscanf_r+0x214>
    3bee:	e79e      	b.n	3b2e <__svfiscanf_r+0x176>
    3bf0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    3bf2:	9201      	str	r2, [sp, #4]
    3bf4:	3201      	adds	r2, #1
    3bf6:	9249      	str	r2, [sp, #292]	; 0x124
    3bf8:	686a      	ldr	r2, [r5, #4]
    3bfa:	3a01      	subs	r2, #1
    3bfc:	606a      	str	r2, [r5, #4]
    3bfe:	2a00      	cmp	r2, #0
    3c00:	dd13      	ble.n	3c2a <__svfiscanf_r+0x272>
    3c02:	3301      	adds	r3, #1
    3c04:	602b      	str	r3, [r5, #0]
    3c06:	682b      	ldr	r3, [r5, #0]
    3c08:	4924      	ldr	r1, [pc, #144]	; (3c9c <__svfiscanf_r+0x2e4>)
    3c0a:	781a      	ldrb	r2, [r3, #0]
    3c0c:	6809      	ldr	r1, [r1, #0]
    3c0e:	188a      	adds	r2, r1, r2
    3c10:	7852      	ldrb	r2, [r2, #1]
    3c12:	0712      	lsls	r2, r2, #28
    3c14:	d4ec      	bmi.n	3bf0 <__svfiscanf_r+0x238>
    3c16:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    3c18:	2b02      	cmp	r3, #2
    3c1a:	dc13      	bgt.n	3c44 <__svfiscanf_r+0x28c>
    3c1c:	1c38      	adds	r0, r7, #0
    3c1e:	a945      	add	r1, sp, #276	; 0x114
    3c20:	1c2a      	adds	r2, r5, #0
    3c22:	ab03      	add	r3, sp, #12
    3c24:	f000 f868 	bl	3cf8 <_scanf_chars>
    3c28:	e01f      	b.n	3c6a <__svfiscanf_r+0x2b2>
    3c2a:	2186      	movs	r1, #134	; 0x86
    3c2c:	23c0      	movs	r3, #192	; 0xc0
    3c2e:	0049      	lsls	r1, r1, #1
    3c30:	aa02      	add	r2, sp, #8
    3c32:	1852      	adds	r2, r2, r1
    3c34:	005b      	lsls	r3, r3, #1
    3c36:	58d3      	ldr	r3, [r2, r3]
    3c38:	1c38      	adds	r0, r7, #0
    3c3a:	1c29      	adds	r1, r5, #0
    3c3c:	4798      	blx	r3
    3c3e:	2800      	cmp	r0, #0
    3c40:	d0e1      	beq.n	3c06 <__svfiscanf_r+0x24e>
    3c42:	e774      	b.n	3b2e <__svfiscanf_r+0x176>
    3c44:	2b04      	cmp	r3, #4
    3c46:	dc06      	bgt.n	3c56 <__svfiscanf_r+0x29e>
    3c48:	1c38      	adds	r0, r7, #0
    3c4a:	a945      	add	r1, sp, #276	; 0x114
    3c4c:	1c2a      	adds	r2, r5, #0
    3c4e:	ab03      	add	r3, sp, #12
    3c50:	f000 f8b0 	bl	3db4 <_scanf_i>
    3c54:	e009      	b.n	3c6a <__svfiscanf_r+0x2b2>
    3c56:	4b13      	ldr	r3, [pc, #76]	; (3ca4 <__svfiscanf_r+0x2ec>)
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d100      	bne.n	3c5e <__svfiscanf_r+0x2a6>
    3c5c:	e6f3      	b.n	3a46 <__svfiscanf_r+0x8e>
    3c5e:	1c38      	adds	r0, r7, #0
    3c60:	a945      	add	r1, sp, #276	; 0x114
    3c62:	1c2a      	adds	r2, r5, #0
    3c64:	ab03      	add	r3, sp, #12
    3c66:	e000      	b.n	3c6a <__svfiscanf_r+0x2b2>
    3c68:	bf00      	nop
    3c6a:	2801      	cmp	r0, #1
    3c6c:	d007      	beq.n	3c7e <__svfiscanf_r+0x2c6>
    3c6e:	2802      	cmp	r0, #2
    3c70:	d000      	beq.n	3c74 <__svfiscanf_r+0x2bc>
    3c72:	e6e8      	b.n	3a46 <__svfiscanf_r+0x8e>
    3c74:	e75b      	b.n	3b2e <__svfiscanf_r+0x176>
    3c76:	89ab      	ldrh	r3, [r5, #12]
    3c78:	065b      	lsls	r3, r3, #25
    3c7a:	d504      	bpl.n	3c86 <__svfiscanf_r+0x2ce>
    3c7c:	e001      	b.n	3c82 <__svfiscanf_r+0x2ca>
    3c7e:	9848      	ldr	r0, [sp, #288]	; 0x120
    3c80:	e001      	b.n	3c86 <__svfiscanf_r+0x2ce>
    3c82:	2001      	movs	r0, #1
    3c84:	4240      	negs	r0, r0
    3c86:	23a7      	movs	r3, #167	; 0xa7
    3c88:	009b      	lsls	r3, r3, #2
    3c8a:	449d      	add	sp, r3
    3c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	fffffd64 	.word	0xfffffd64
    3c94:	000044a5 	.word	0x000044a5
    3c98:	00003fc1 	.word	0x00003fc1
    3c9c:	2000007c 	.word	0x2000007c
    3ca0:	00004f36 	.word	0x00004f36
    3ca4:	00000000 	.word	0x00000000

00003ca8 <_vfiscanf_r>:
    3ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3caa:	1c05      	adds	r5, r0, #0
    3cac:	1c0c      	adds	r4, r1, #0
    3cae:	1c17      	adds	r7, r2, #0
    3cb0:	1c1e      	adds	r6, r3, #0
    3cb2:	2800      	cmp	r0, #0
    3cb4:	d004      	beq.n	3cc0 <_vfiscanf_r+0x18>
    3cb6:	6983      	ldr	r3, [r0, #24]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d101      	bne.n	3cc0 <_vfiscanf_r+0x18>
    3cbc:	f7ff fa10 	bl	30e0 <__sinit>
    3cc0:	4b0a      	ldr	r3, [pc, #40]	; (3cec <_vfiscanf_r+0x44>)
    3cc2:	429c      	cmp	r4, r3
    3cc4:	d101      	bne.n	3cca <_vfiscanf_r+0x22>
    3cc6:	686c      	ldr	r4, [r5, #4]
    3cc8:	e008      	b.n	3cdc <_vfiscanf_r+0x34>
    3cca:	4b09      	ldr	r3, [pc, #36]	; (3cf0 <_vfiscanf_r+0x48>)
    3ccc:	429c      	cmp	r4, r3
    3cce:	d101      	bne.n	3cd4 <_vfiscanf_r+0x2c>
    3cd0:	68ac      	ldr	r4, [r5, #8]
    3cd2:	e003      	b.n	3cdc <_vfiscanf_r+0x34>
    3cd4:	4b07      	ldr	r3, [pc, #28]	; (3cf4 <_vfiscanf_r+0x4c>)
    3cd6:	429c      	cmp	r4, r3
    3cd8:	d100      	bne.n	3cdc <_vfiscanf_r+0x34>
    3cda:	68ec      	ldr	r4, [r5, #12]
    3cdc:	1c28      	adds	r0, r5, #0
    3cde:	1c3a      	adds	r2, r7, #0
    3ce0:	1c33      	adds	r3, r6, #0
    3ce2:	1c21      	adds	r1, r4, #0
    3ce4:	f7ff fe68 	bl	39b8 <__svfiscanf_r>
    3ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	00004ed0 	.word	0x00004ed0
    3cf0:	00004ef0 	.word	0x00004ef0
    3cf4:	00004f10 	.word	0x00004f10

00003cf8 <_scanf_chars>:
    3cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3cfa:	1c15      	adds	r5, r2, #0
    3cfc:	688a      	ldr	r2, [r1, #8]
    3cfe:	9001      	str	r0, [sp, #4]
    3d00:	1c0c      	adds	r4, r1, #0
    3d02:	2a00      	cmp	r2, #0
    3d04:	d106      	bne.n	3d14 <_scanf_chars+0x1c>
    3d06:	698a      	ldr	r2, [r1, #24]
    3d08:	1e51      	subs	r1, r2, #1
    3d0a:	418a      	sbcs	r2, r1
    3d0c:	2101      	movs	r1, #1
    3d0e:	4252      	negs	r2, r2
    3d10:	430a      	orrs	r2, r1
    3d12:	60a2      	str	r2, [r4, #8]
    3d14:	6822      	ldr	r2, [r4, #0]
    3d16:	06d2      	lsls	r2, r2, #27
    3d18:	d403      	bmi.n	3d22 <_scanf_chars+0x2a>
    3d1a:	681a      	ldr	r2, [r3, #0]
    3d1c:	1d11      	adds	r1, r2, #4
    3d1e:	6019      	str	r1, [r3, #0]
    3d20:	6817      	ldr	r7, [r2, #0]
    3d22:	2600      	movs	r6, #0
    3d24:	69a0      	ldr	r0, [r4, #24]
    3d26:	2800      	cmp	r0, #0
    3d28:	d11d      	bne.n	3d66 <_scanf_chars+0x6e>
    3d2a:	6823      	ldr	r3, [r4, #0]
    3d2c:	3601      	adds	r6, #1
    3d2e:	06db      	lsls	r3, r3, #27
    3d30:	d403      	bmi.n	3d3a <_scanf_chars+0x42>
    3d32:	682b      	ldr	r3, [r5, #0]
    3d34:	781b      	ldrb	r3, [r3, #0]
    3d36:	703b      	strb	r3, [r7, #0]
    3d38:	3701      	adds	r7, #1
    3d3a:	682a      	ldr	r2, [r5, #0]
    3d3c:	686b      	ldr	r3, [r5, #4]
    3d3e:	3201      	adds	r2, #1
    3d40:	602a      	str	r2, [r5, #0]
    3d42:	68a2      	ldr	r2, [r4, #8]
    3d44:	3b01      	subs	r3, #1
    3d46:	3a01      	subs	r2, #1
    3d48:	606b      	str	r3, [r5, #4]
    3d4a:	60a2      	str	r2, [r4, #8]
    3d4c:	2a00      	cmp	r2, #0
    3d4e:	d01f      	beq.n	3d90 <_scanf_chars+0x98>
    3d50:	2b00      	cmp	r3, #0
    3d52:	dce7      	bgt.n	3d24 <_scanf_chars+0x2c>
    3d54:	23c0      	movs	r3, #192	; 0xc0
    3d56:	005b      	lsls	r3, r3, #1
    3d58:	58e3      	ldr	r3, [r4, r3]
    3d5a:	9801      	ldr	r0, [sp, #4]
    3d5c:	1c29      	adds	r1, r5, #0
    3d5e:	4798      	blx	r3
    3d60:	2800      	cmp	r0, #0
    3d62:	d0df      	beq.n	3d24 <_scanf_chars+0x2c>
    3d64:	e014      	b.n	3d90 <_scanf_chars+0x98>
    3d66:	2801      	cmp	r0, #1
    3d68:	d108      	bne.n	3d7c <_scanf_chars+0x84>
    3d6a:	682b      	ldr	r3, [r5, #0]
    3d6c:	6962      	ldr	r2, [r4, #20]
    3d6e:	781b      	ldrb	r3, [r3, #0]
    3d70:	5cd3      	ldrb	r3, [r2, r3]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d1d9      	bne.n	3d2a <_scanf_chars+0x32>
    3d76:	2e00      	cmp	r6, #0
    3d78:	d019      	beq.n	3dae <_scanf_chars+0xb6>
    3d7a:	e009      	b.n	3d90 <_scanf_chars+0x98>
    3d7c:	2802      	cmp	r0, #2
    3d7e:	d107      	bne.n	3d90 <_scanf_chars+0x98>
    3d80:	682b      	ldr	r3, [r5, #0]
    3d82:	4a0b      	ldr	r2, [pc, #44]	; (3db0 <_scanf_chars+0xb8>)
    3d84:	781b      	ldrb	r3, [r3, #0]
    3d86:	6812      	ldr	r2, [r2, #0]
    3d88:	18d3      	adds	r3, r2, r3
    3d8a:	785b      	ldrb	r3, [r3, #1]
    3d8c:	071b      	lsls	r3, r3, #28
    3d8e:	d5cc      	bpl.n	3d2a <_scanf_chars+0x32>
    3d90:	2310      	movs	r3, #16
    3d92:	6822      	ldr	r2, [r4, #0]
    3d94:	4013      	ands	r3, r2
    3d96:	d106      	bne.n	3da6 <_scanf_chars+0xae>
    3d98:	68e2      	ldr	r2, [r4, #12]
    3d9a:	3201      	adds	r2, #1
    3d9c:	60e2      	str	r2, [r4, #12]
    3d9e:	69a2      	ldr	r2, [r4, #24]
    3da0:	2a00      	cmp	r2, #0
    3da2:	d000      	beq.n	3da6 <_scanf_chars+0xae>
    3da4:	703b      	strb	r3, [r7, #0]
    3da6:	2000      	movs	r0, #0
    3da8:	6923      	ldr	r3, [r4, #16]
    3daa:	199e      	adds	r6, r3, r6
    3dac:	6126      	str	r6, [r4, #16]
    3dae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3db0:	2000007c 	.word	0x2000007c

00003db4 <_scanf_i>:
    3db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3db6:	1c0c      	adds	r4, r1, #0
    3db8:	b08b      	sub	sp, #44	; 0x2c
    3dba:	9301      	str	r3, [sp, #4]
    3dbc:	4b74      	ldr	r3, [pc, #464]	; (3f90 <_scanf_i+0x1dc>)
    3dbe:	9004      	str	r0, [sp, #16]
    3dc0:	1c16      	adds	r6, r2, #0
    3dc2:	aa07      	add	r2, sp, #28
    3dc4:	cb23      	ldmia	r3!, {r0, r1, r5}
    3dc6:	c223      	stmia	r2!, {r0, r1, r5}
    3dc8:	4b72      	ldr	r3, [pc, #456]	; (3f94 <_scanf_i+0x1e0>)
    3dca:	9305      	str	r3, [sp, #20]
    3dcc:	69a3      	ldr	r3, [r4, #24]
    3dce:	2b03      	cmp	r3, #3
    3dd0:	d001      	beq.n	3dd6 <_scanf_i+0x22>
    3dd2:	4b71      	ldr	r3, [pc, #452]	; (3f98 <_scanf_i+0x1e4>)
    3dd4:	9305      	str	r3, [sp, #20]
    3dd6:	2200      	movs	r2, #0
    3dd8:	68a3      	ldr	r3, [r4, #8]
    3dda:	9203      	str	r2, [sp, #12]
    3ddc:	325d      	adds	r2, #93	; 0x5d
    3dde:	1e59      	subs	r1, r3, #1
    3de0:	32ff      	adds	r2, #255	; 0xff
    3de2:	4291      	cmp	r1, r2
    3de4:	d905      	bls.n	3df2 <_scanf_i+0x3e>
    3de6:	3b5e      	subs	r3, #94	; 0x5e
    3de8:	3bff      	subs	r3, #255	; 0xff
    3dea:	9303      	str	r3, [sp, #12]
    3dec:	235e      	movs	r3, #94	; 0x5e
    3dee:	33ff      	adds	r3, #255	; 0xff
    3df0:	60a3      	str	r3, [r4, #8]
    3df2:	1c23      	adds	r3, r4, #0
    3df4:	331c      	adds	r3, #28
    3df6:	9300      	str	r3, [sp, #0]
    3df8:	23d0      	movs	r3, #208	; 0xd0
    3dfa:	2700      	movs	r7, #0
    3dfc:	6822      	ldr	r2, [r4, #0]
    3dfe:	011b      	lsls	r3, r3, #4
    3e00:	4313      	orrs	r3, r2
    3e02:	6023      	str	r3, [r4, #0]
    3e04:	9b00      	ldr	r3, [sp, #0]
    3e06:	9302      	str	r3, [sp, #8]
    3e08:	6832      	ldr	r2, [r6, #0]
    3e0a:	00bb      	lsls	r3, r7, #2
    3e0c:	7811      	ldrb	r1, [r2, #0]
    3e0e:	aa07      	add	r2, sp, #28
    3e10:	5898      	ldr	r0, [r3, r2]
    3e12:	2202      	movs	r2, #2
    3e14:	f000 fc16 	bl	4644 <memchr>
    3e18:	2800      	cmp	r0, #0
    3e1a:	d039      	beq.n	3e90 <_scanf_i+0xdc>
    3e1c:	2f01      	cmp	r7, #1
    3e1e:	d10d      	bne.n	3e3c <_scanf_i+0x88>
    3e20:	6863      	ldr	r3, [r4, #4]
    3e22:	2b00      	cmp	r3, #0
    3e24:	d106      	bne.n	3e34 <_scanf_i+0x80>
    3e26:	3308      	adds	r3, #8
    3e28:	6822      	ldr	r2, [r4, #0]
    3e2a:	6063      	str	r3, [r4, #4]
    3e2c:	33f9      	adds	r3, #249	; 0xf9
    3e2e:	33ff      	adds	r3, #255	; 0xff
    3e30:	4313      	orrs	r3, r2
    3e32:	6023      	str	r3, [r4, #0]
    3e34:	4b59      	ldr	r3, [pc, #356]	; (3f9c <_scanf_i+0x1e8>)
    3e36:	6822      	ldr	r2, [r4, #0]
    3e38:	4013      	ands	r3, r2
    3e3a:	e00d      	b.n	3e58 <_scanf_i+0xa4>
    3e3c:	2f02      	cmp	r7, #2
    3e3e:	d10c      	bne.n	3e5a <_scanf_i+0xa6>
    3e40:	22c0      	movs	r2, #192	; 0xc0
    3e42:	2180      	movs	r1, #128	; 0x80
    3e44:	6823      	ldr	r3, [r4, #0]
    3e46:	00d2      	lsls	r2, r2, #3
    3e48:	401a      	ands	r2, r3
    3e4a:	0089      	lsls	r1, r1, #2
    3e4c:	428a      	cmp	r2, r1
    3e4e:	d122      	bne.n	3e96 <_scanf_i+0xe2>
    3e50:	2210      	movs	r2, #16
    3e52:	6062      	str	r2, [r4, #4]
    3e54:	32f0      	adds	r2, #240	; 0xf0
    3e56:	4313      	orrs	r3, r2
    3e58:	6023      	str	r3, [r4, #0]
    3e5a:	68a3      	ldr	r3, [r4, #8]
    3e5c:	1e5a      	subs	r2, r3, #1
    3e5e:	60a2      	str	r2, [r4, #8]
    3e60:	2b00      	cmp	r3, #0
    3e62:	d015      	beq.n	3e90 <_scanf_i+0xdc>
    3e64:	9b02      	ldr	r3, [sp, #8]
    3e66:	1c5d      	adds	r5, r3, #1
    3e68:	6833      	ldr	r3, [r6, #0]
    3e6a:	1c5a      	adds	r2, r3, #1
    3e6c:	6032      	str	r2, [r6, #0]
    3e6e:	781b      	ldrb	r3, [r3, #0]
    3e70:	9a02      	ldr	r2, [sp, #8]
    3e72:	9502      	str	r5, [sp, #8]
    3e74:	7013      	strb	r3, [r2, #0]
    3e76:	6873      	ldr	r3, [r6, #4]
    3e78:	3b01      	subs	r3, #1
    3e7a:	6073      	str	r3, [r6, #4]
    3e7c:	2b00      	cmp	r3, #0
    3e7e:	dc07      	bgt.n	3e90 <_scanf_i+0xdc>
    3e80:	23c0      	movs	r3, #192	; 0xc0
    3e82:	005b      	lsls	r3, r3, #1
    3e84:	58e3      	ldr	r3, [r4, r3]
    3e86:	9804      	ldr	r0, [sp, #16]
    3e88:	1c31      	adds	r1, r6, #0
    3e8a:	4798      	blx	r3
    3e8c:	2800      	cmp	r0, #0
    3e8e:	d144      	bne.n	3f1a <_scanf_i+0x166>
    3e90:	3701      	adds	r7, #1
    3e92:	2f03      	cmp	r7, #3
    3e94:	d1b8      	bne.n	3e08 <_scanf_i+0x54>
    3e96:	6863      	ldr	r3, [r4, #4]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d101      	bne.n	3ea0 <_scanf_i+0xec>
    3e9c:	330a      	adds	r3, #10
    3e9e:	6063      	str	r3, [r4, #4]
    3ea0:	2110      	movs	r1, #16
    3ea2:	2700      	movs	r7, #0
    3ea4:	6863      	ldr	r3, [r4, #4]
    3ea6:	6960      	ldr	r0, [r4, #20]
    3ea8:	1ac9      	subs	r1, r1, r3
    3eaa:	4b3d      	ldr	r3, [pc, #244]	; (3fa0 <_scanf_i+0x1ec>)
    3eac:	18c9      	adds	r1, r1, r3
    3eae:	f000 f929 	bl	4104 <__sccl>
    3eb2:	9d02      	ldr	r5, [sp, #8]
    3eb4:	68a3      	ldr	r3, [r4, #8]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d030      	beq.n	3f1c <_scanf_i+0x168>
    3eba:	6832      	ldr	r2, [r6, #0]
    3ebc:	6960      	ldr	r0, [r4, #20]
    3ebe:	7811      	ldrb	r1, [r2, #0]
    3ec0:	5c40      	ldrb	r0, [r0, r1]
    3ec2:	2800      	cmp	r0, #0
    3ec4:	d02a      	beq.n	3f1c <_scanf_i+0x168>
    3ec6:	2930      	cmp	r1, #48	; 0x30
    3ec8:	d10b      	bne.n	3ee2 <_scanf_i+0x12e>
    3eca:	6821      	ldr	r1, [r4, #0]
    3ecc:	0509      	lsls	r1, r1, #20
    3ece:	d508      	bpl.n	3ee2 <_scanf_i+0x12e>
    3ed0:	9a03      	ldr	r2, [sp, #12]
    3ed2:	3701      	adds	r7, #1
    3ed4:	2a00      	cmp	r2, #0
    3ed6:	d00b      	beq.n	3ef0 <_scanf_i+0x13c>
    3ed8:	3a01      	subs	r2, #1
    3eda:	3301      	adds	r3, #1
    3edc:	9203      	str	r2, [sp, #12]
    3ede:	60a3      	str	r3, [r4, #8]
    3ee0:	e006      	b.n	3ef0 <_scanf_i+0x13c>
    3ee2:	6821      	ldr	r1, [r4, #0]
    3ee4:	4b2f      	ldr	r3, [pc, #188]	; (3fa4 <_scanf_i+0x1f0>)
    3ee6:	400b      	ands	r3, r1
    3ee8:	6023      	str	r3, [r4, #0]
    3eea:	7813      	ldrb	r3, [r2, #0]
    3eec:	702b      	strb	r3, [r5, #0]
    3eee:	3501      	adds	r5, #1
    3ef0:	6873      	ldr	r3, [r6, #4]
    3ef2:	3b01      	subs	r3, #1
    3ef4:	6073      	str	r3, [r6, #4]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	dd03      	ble.n	3f02 <_scanf_i+0x14e>
    3efa:	6833      	ldr	r3, [r6, #0]
    3efc:	3301      	adds	r3, #1
    3efe:	6033      	str	r3, [r6, #0]
    3f00:	e007      	b.n	3f12 <_scanf_i+0x15e>
    3f02:	23c0      	movs	r3, #192	; 0xc0
    3f04:	005b      	lsls	r3, r3, #1
    3f06:	58e3      	ldr	r3, [r4, r3]
    3f08:	9804      	ldr	r0, [sp, #16]
    3f0a:	1c31      	adds	r1, r6, #0
    3f0c:	4798      	blx	r3
    3f0e:	2800      	cmp	r0, #0
    3f10:	d104      	bne.n	3f1c <_scanf_i+0x168>
    3f12:	68a3      	ldr	r3, [r4, #8]
    3f14:	3b01      	subs	r3, #1
    3f16:	60a3      	str	r3, [r4, #8]
    3f18:	e7cc      	b.n	3eb4 <_scanf_i+0x100>
    3f1a:	2700      	movs	r7, #0
    3f1c:	6823      	ldr	r3, [r4, #0]
    3f1e:	05db      	lsls	r3, r3, #23
    3f20:	d50e      	bpl.n	3f40 <_scanf_i+0x18c>
    3f22:	9b00      	ldr	r3, [sp, #0]
    3f24:	429d      	cmp	r5, r3
    3f26:	d907      	bls.n	3f38 <_scanf_i+0x184>
    3f28:	23be      	movs	r3, #190	; 0xbe
    3f2a:	3d01      	subs	r5, #1
    3f2c:	005b      	lsls	r3, r3, #1
    3f2e:	7829      	ldrb	r1, [r5, #0]
    3f30:	58e3      	ldr	r3, [r4, r3]
    3f32:	9804      	ldr	r0, [sp, #16]
    3f34:	1c32      	adds	r2, r6, #0
    3f36:	4798      	blx	r3
    3f38:	9b00      	ldr	r3, [sp, #0]
    3f3a:	2001      	movs	r0, #1
    3f3c:	429d      	cmp	r5, r3
    3f3e:	d025      	beq.n	3f8c <_scanf_i+0x1d8>
    3f40:	2210      	movs	r2, #16
    3f42:	6823      	ldr	r3, [r4, #0]
    3f44:	401a      	ands	r2, r3
    3f46:	d11a      	bne.n	3f7e <_scanf_i+0x1ca>
    3f48:	702a      	strb	r2, [r5, #0]
    3f4a:	6863      	ldr	r3, [r4, #4]
    3f4c:	9804      	ldr	r0, [sp, #16]
    3f4e:	9900      	ldr	r1, [sp, #0]
    3f50:	9e05      	ldr	r6, [sp, #20]
    3f52:	47b0      	blx	r6
    3f54:	9b01      	ldr	r3, [sp, #4]
    3f56:	6822      	ldr	r2, [r4, #0]
    3f58:	681b      	ldr	r3, [r3, #0]
    3f5a:	0691      	lsls	r1, r2, #26
    3f5c:	d407      	bmi.n	3f6e <_scanf_i+0x1ba>
    3f5e:	07d1      	lsls	r1, r2, #31
    3f60:	d505      	bpl.n	3f6e <_scanf_i+0x1ba>
    3f62:	9901      	ldr	r1, [sp, #4]
    3f64:	1d1a      	adds	r2, r3, #4
    3f66:	600a      	str	r2, [r1, #0]
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	8018      	strh	r0, [r3, #0]
    3f6c:	e004      	b.n	3f78 <_scanf_i+0x1c4>
    3f6e:	9901      	ldr	r1, [sp, #4]
    3f70:	1d1a      	adds	r2, r3, #4
    3f72:	600a      	str	r2, [r1, #0]
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	6018      	str	r0, [r3, #0]
    3f78:	68e3      	ldr	r3, [r4, #12]
    3f7a:	3301      	adds	r3, #1
    3f7c:	60e3      	str	r3, [r4, #12]
    3f7e:	2000      	movs	r0, #0
    3f80:	9b00      	ldr	r3, [sp, #0]
    3f82:	1aed      	subs	r5, r5, r3
    3f84:	6923      	ldr	r3, [r4, #16]
    3f86:	19ed      	adds	r5, r5, r7
    3f88:	195d      	adds	r5, r3, r5
    3f8a:	6125      	str	r5, [r4, #16]
    3f8c:	b00b      	add	sp, #44	; 0x2c
    3f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f90:	00004f64 	.word	0x00004f64
    3f94:	00004205 	.word	0x00004205
    3f98:	00004325 	.word	0x00004325
    3f9c:	fffffaff 	.word	0xfffffaff
    3fa0:	00004f70 	.word	0x00004f70
    3fa4:	fffff6ff 	.word	0xfffff6ff

00003fa8 <lflush>:
    3fa8:	2209      	movs	r2, #9
    3faa:	b508      	push	{r3, lr}
    3fac:	8981      	ldrh	r1, [r0, #12]
    3fae:	1c03      	adds	r3, r0, #0
    3fb0:	400a      	ands	r2, r1
    3fb2:	2000      	movs	r0, #0
    3fb4:	2a09      	cmp	r2, #9
    3fb6:	d102      	bne.n	3fbe <lflush+0x16>
    3fb8:	1c18      	adds	r0, r3, #0
    3fba:	f7ff f83b 	bl	3034 <fflush>
    3fbe:	bd08      	pop	{r3, pc}

00003fc0 <__srefill_r>:
    3fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fc2:	1c05      	adds	r5, r0, #0
    3fc4:	1c0c      	adds	r4, r1, #0
    3fc6:	2800      	cmp	r0, #0
    3fc8:	d004      	beq.n	3fd4 <__srefill_r+0x14>
    3fca:	6983      	ldr	r3, [r0, #24]
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d101      	bne.n	3fd4 <__srefill_r+0x14>
    3fd0:	f7ff f886 	bl	30e0 <__sinit>
    3fd4:	4b3d      	ldr	r3, [pc, #244]	; (40cc <__srefill_r+0x10c>)
    3fd6:	429c      	cmp	r4, r3
    3fd8:	d101      	bne.n	3fde <__srefill_r+0x1e>
    3fda:	686c      	ldr	r4, [r5, #4]
    3fdc:	e008      	b.n	3ff0 <__srefill_r+0x30>
    3fde:	4b3c      	ldr	r3, [pc, #240]	; (40d0 <__srefill_r+0x110>)
    3fe0:	429c      	cmp	r4, r3
    3fe2:	d101      	bne.n	3fe8 <__srefill_r+0x28>
    3fe4:	68ac      	ldr	r4, [r5, #8]
    3fe6:	e003      	b.n	3ff0 <__srefill_r+0x30>
    3fe8:	4b3a      	ldr	r3, [pc, #232]	; (40d4 <__srefill_r+0x114>)
    3fea:	429c      	cmp	r4, r3
    3fec:	d100      	bne.n	3ff0 <__srefill_r+0x30>
    3fee:	68ec      	ldr	r4, [r5, #12]
    3ff0:	2300      	movs	r3, #0
    3ff2:	89a2      	ldrh	r2, [r4, #12]
    3ff4:	6063      	str	r3, [r4, #4]
    3ff6:	b293      	uxth	r3, r2
    3ff8:	0699      	lsls	r1, r3, #26
    3ffa:	d463      	bmi.n	40c4 <__srefill_r+0x104>
    3ffc:	0759      	lsls	r1, r3, #29
    3ffe:	d41a      	bmi.n	4036 <__srefill_r+0x76>
    4000:	06d9      	lsls	r1, r3, #27
    4002:	d405      	bmi.n	4010 <__srefill_r+0x50>
    4004:	2309      	movs	r3, #9
    4006:	602b      	str	r3, [r5, #0]
    4008:	3337      	adds	r3, #55	; 0x37
    400a:	431a      	orrs	r2, r3
    400c:	81a2      	strh	r2, [r4, #12]
    400e:	e059      	b.n	40c4 <__srefill_r+0x104>
    4010:	2608      	movs	r6, #8
    4012:	4233      	tst	r3, r6
    4014:	d00a      	beq.n	402c <__srefill_r+0x6c>
    4016:	1c28      	adds	r0, r5, #0
    4018:	1c21      	adds	r1, r4, #0
    401a:	f7fe ffdf 	bl	2fdc <_fflush_r>
    401e:	2800      	cmp	r0, #0
    4020:	d150      	bne.n	40c4 <__srefill_r+0x104>
    4022:	89a3      	ldrh	r3, [r4, #12]
    4024:	60a0      	str	r0, [r4, #8]
    4026:	43b3      	bics	r3, r6
    4028:	81a3      	strh	r3, [r4, #12]
    402a:	61a0      	str	r0, [r4, #24]
    402c:	2204      	movs	r2, #4
    402e:	89a3      	ldrh	r3, [r4, #12]
    4030:	4313      	orrs	r3, r2
    4032:	81a3      	strh	r3, [r4, #12]
    4034:	e012      	b.n	405c <__srefill_r+0x9c>
    4036:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4038:	2900      	cmp	r1, #0
    403a:	d00f      	beq.n	405c <__srefill_r+0x9c>
    403c:	1c23      	adds	r3, r4, #0
    403e:	3344      	adds	r3, #68	; 0x44
    4040:	4299      	cmp	r1, r3
    4042:	d002      	beq.n	404a <__srefill_r+0x8a>
    4044:	1c28      	adds	r0, r5, #0
    4046:	f7ff f95b 	bl	3300 <_free_r>
    404a:	2000      	movs	r0, #0
    404c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    404e:	6360      	str	r0, [r4, #52]	; 0x34
    4050:	6063      	str	r3, [r4, #4]
    4052:	4283      	cmp	r3, r0
    4054:	d002      	beq.n	405c <__srefill_r+0x9c>
    4056:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4058:	6023      	str	r3, [r4, #0]
    405a:	e035      	b.n	40c8 <__srefill_r+0x108>
    405c:	6923      	ldr	r3, [r4, #16]
    405e:	2b00      	cmp	r3, #0
    4060:	d103      	bne.n	406a <__srefill_r+0xaa>
    4062:	1c28      	adds	r0, r5, #0
    4064:	1c21      	adds	r1, r4, #0
    4066:	f7ff f8e9 	bl	323c <__smakebuf_r>
    406a:	89a7      	ldrh	r7, [r4, #12]
    406c:	b2be      	uxth	r6, r7
    406e:	07b3      	lsls	r3, r6, #30
    4070:	d00f      	beq.n	4092 <__srefill_r+0xd2>
    4072:	2301      	movs	r3, #1
    4074:	81a3      	strh	r3, [r4, #12]
    4076:	4b18      	ldr	r3, [pc, #96]	; (40d8 <__srefill_r+0x118>)
    4078:	4918      	ldr	r1, [pc, #96]	; (40dc <__srefill_r+0x11c>)
    407a:	6818      	ldr	r0, [r3, #0]
    407c:	f7ff f8a0 	bl	31c0 <_fwalk>
    4080:	2309      	movs	r3, #9
    4082:	81a7      	strh	r7, [r4, #12]
    4084:	4033      	ands	r3, r6
    4086:	2b09      	cmp	r3, #9
    4088:	d103      	bne.n	4092 <__srefill_r+0xd2>
    408a:	1c28      	adds	r0, r5, #0
    408c:	1c21      	adds	r1, r4, #0
    408e:	f7fe ff1b 	bl	2ec8 <__sflush_r>
    4092:	6923      	ldr	r3, [r4, #16]
    4094:	1c28      	adds	r0, r5, #0
    4096:	1c1a      	adds	r2, r3, #0
    4098:	6023      	str	r3, [r4, #0]
    409a:	6a21      	ldr	r1, [r4, #32]
    409c:	6963      	ldr	r3, [r4, #20]
    409e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    40a0:	47a8      	blx	r5
    40a2:	1c02      	adds	r2, r0, #0
    40a4:	6060      	str	r0, [r4, #4]
    40a6:	2000      	movs	r0, #0
    40a8:	4282      	cmp	r2, r0
    40aa:	dc0d      	bgt.n	40c8 <__srefill_r+0x108>
    40ac:	89a3      	ldrh	r3, [r4, #12]
    40ae:	4282      	cmp	r2, r0
    40b0:	d104      	bne.n	40bc <__srefill_r+0xfc>
    40b2:	2220      	movs	r2, #32
    40b4:	4313      	orrs	r3, r2
    40b6:	81a3      	strh	r3, [r4, #12]
    40b8:	3801      	subs	r0, #1
    40ba:	e005      	b.n	40c8 <__srefill_r+0x108>
    40bc:	2240      	movs	r2, #64	; 0x40
    40be:	4313      	orrs	r3, r2
    40c0:	6060      	str	r0, [r4, #4]
    40c2:	81a3      	strh	r3, [r4, #12]
    40c4:	2001      	movs	r0, #1
    40c6:	4240      	negs	r0, r0
    40c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	00004ed0 	.word	0x00004ed0
    40d0:	00004ef0 	.word	0x00004ef0
    40d4:	00004f10 	.word	0x00004f10
    40d8:	00004ecc 	.word	0x00004ecc
    40dc:	00003fa9 	.word	0x00003fa9

000040e0 <_sbrk_r>:
    40e0:	b538      	push	{r3, r4, r5, lr}
    40e2:	2300      	movs	r3, #0
    40e4:	4c06      	ldr	r4, [pc, #24]	; (4100 <_sbrk_r+0x20>)
    40e6:	1c05      	adds	r5, r0, #0
    40e8:	1c08      	adds	r0, r1, #0
    40ea:	6023      	str	r3, [r4, #0]
    40ec:	f7fe fbdc 	bl	28a8 <_sbrk>
    40f0:	1c43      	adds	r3, r0, #1
    40f2:	d103      	bne.n	40fc <_sbrk_r+0x1c>
    40f4:	6823      	ldr	r3, [r4, #0]
    40f6:	2b00      	cmp	r3, #0
    40f8:	d000      	beq.n	40fc <_sbrk_r+0x1c>
    40fa:	602b      	str	r3, [r5, #0]
    40fc:	bd38      	pop	{r3, r4, r5, pc}
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	20000b54 	.word	0x20000b54

00004104 <__sccl>:
    4104:	b5f0      	push	{r4, r5, r6, r7, lr}
    4106:	780a      	ldrb	r2, [r1, #0]
    4108:	2a5e      	cmp	r2, #94	; 0x5e
    410a:	d002      	beq.n	4112 <__sccl+0xe>
    410c:	1c4b      	adds	r3, r1, #1
    410e:	2400      	movs	r4, #0
    4110:	e002      	b.n	4118 <__sccl+0x14>
    4112:	2401      	movs	r4, #1
    4114:	784a      	ldrb	r2, [r1, #1]
    4116:	1c8b      	adds	r3, r1, #2
    4118:	1c01      	adds	r1, r0, #0
    411a:	1c45      	adds	r5, r0, #1
    411c:	35ff      	adds	r5, #255	; 0xff
    411e:	700c      	strb	r4, [r1, #0]
    4120:	3101      	adds	r1, #1
    4122:	42a9      	cmp	r1, r5
    4124:	d1fb      	bne.n	411e <__sccl+0x1a>
    4126:	2a00      	cmp	r2, #0
    4128:	d101      	bne.n	412e <__sccl+0x2a>
    412a:	1e58      	subs	r0, r3, #1
    412c:	e01c      	b.n	4168 <__sccl+0x64>
    412e:	2101      	movs	r1, #1
    4130:	1b0c      	subs	r4, r1, r4
    4132:	b2e7      	uxtb	r7, r4
    4134:	5487      	strb	r7, [r0, r2]
    4136:	7819      	ldrb	r1, [r3, #0]
    4138:	1c5e      	adds	r6, r3, #1
    413a:	292d      	cmp	r1, #45	; 0x2d
    413c:	d006      	beq.n	414c <__sccl+0x48>
    413e:	295d      	cmp	r1, #93	; 0x5d
    4140:	d00f      	beq.n	4162 <__sccl+0x5e>
    4142:	2900      	cmp	r1, #0
    4144:	d00f      	beq.n	4166 <__sccl+0x62>
    4146:	1c0a      	adds	r2, r1, #0
    4148:	1c33      	adds	r3, r6, #0
    414a:	e7f2      	b.n	4132 <__sccl+0x2e>
    414c:	785d      	ldrb	r5, [r3, #1]
    414e:	2d5d      	cmp	r5, #93	; 0x5d
    4150:	d0f9      	beq.n	4146 <__sccl+0x42>
    4152:	4295      	cmp	r5, r2
    4154:	dbf7      	blt.n	4146 <__sccl+0x42>
    4156:	3302      	adds	r3, #2
    4158:	3201      	adds	r2, #1
    415a:	5487      	strb	r7, [r0, r2]
    415c:	42aa      	cmp	r2, r5
    415e:	dbfb      	blt.n	4158 <__sccl+0x54>
    4160:	e7e9      	b.n	4136 <__sccl+0x32>
    4162:	1c30      	adds	r0, r6, #0
    4164:	e000      	b.n	4168 <__sccl+0x64>
    4166:	1c18      	adds	r0, r3, #0
    4168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000416c <__sread>:
    416c:	b538      	push	{r3, r4, r5, lr}
    416e:	1c0c      	adds	r4, r1, #0
    4170:	250e      	movs	r5, #14
    4172:	5f49      	ldrsh	r1, [r1, r5]
    4174:	f000 fa98 	bl	46a8 <_read_r>
    4178:	2800      	cmp	r0, #0
    417a:	db03      	blt.n	4184 <__sread+0x18>
    417c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    417e:	181b      	adds	r3, r3, r0
    4180:	6563      	str	r3, [r4, #84]	; 0x54
    4182:	e003      	b.n	418c <__sread+0x20>
    4184:	89a2      	ldrh	r2, [r4, #12]
    4186:	4b02      	ldr	r3, [pc, #8]	; (4190 <__sread+0x24>)
    4188:	4013      	ands	r3, r2
    418a:	81a3      	strh	r3, [r4, #12]
    418c:	bd38      	pop	{r3, r4, r5, pc}
    418e:	46c0      	nop			; (mov r8, r8)
    4190:	ffffefff 	.word	0xffffefff

00004194 <__swrite>:
    4194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4196:	1c1e      	adds	r6, r3, #0
    4198:	898b      	ldrh	r3, [r1, #12]
    419a:	1c05      	adds	r5, r0, #0
    419c:	1c0c      	adds	r4, r1, #0
    419e:	1c17      	adds	r7, r2, #0
    41a0:	05db      	lsls	r3, r3, #23
    41a2:	d505      	bpl.n	41b0 <__swrite+0x1c>
    41a4:	230e      	movs	r3, #14
    41a6:	5ec9      	ldrsh	r1, [r1, r3]
    41a8:	2200      	movs	r2, #0
    41aa:	2302      	movs	r3, #2
    41ac:	f000 fa36 	bl	461c <_lseek_r>
    41b0:	89a2      	ldrh	r2, [r4, #12]
    41b2:	4b05      	ldr	r3, [pc, #20]	; (41c8 <__swrite+0x34>)
    41b4:	1c28      	adds	r0, r5, #0
    41b6:	4013      	ands	r3, r2
    41b8:	81a3      	strh	r3, [r4, #12]
    41ba:	1c3a      	adds	r2, r7, #0
    41bc:	230e      	movs	r3, #14
    41be:	5ee1      	ldrsh	r1, [r4, r3]
    41c0:	1c33      	adds	r3, r6, #0
    41c2:	f000 f9e1 	bl	4588 <_write_r>
    41c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41c8:	ffffefff 	.word	0xffffefff

000041cc <__sseek>:
    41cc:	b538      	push	{r3, r4, r5, lr}
    41ce:	1c0c      	adds	r4, r1, #0
    41d0:	250e      	movs	r5, #14
    41d2:	5f49      	ldrsh	r1, [r1, r5]
    41d4:	f000 fa22 	bl	461c <_lseek_r>
    41d8:	89a3      	ldrh	r3, [r4, #12]
    41da:	1c42      	adds	r2, r0, #1
    41dc:	d103      	bne.n	41e6 <__sseek+0x1a>
    41de:	4a05      	ldr	r2, [pc, #20]	; (41f4 <__sseek+0x28>)
    41e0:	4013      	ands	r3, r2
    41e2:	81a3      	strh	r3, [r4, #12]
    41e4:	e004      	b.n	41f0 <__sseek+0x24>
    41e6:	2280      	movs	r2, #128	; 0x80
    41e8:	0152      	lsls	r2, r2, #5
    41ea:	4313      	orrs	r3, r2
    41ec:	81a3      	strh	r3, [r4, #12]
    41ee:	6560      	str	r0, [r4, #84]	; 0x54
    41f0:	bd38      	pop	{r3, r4, r5, pc}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	ffffefff 	.word	0xffffefff

000041f8 <__sclose>:
    41f8:	b508      	push	{r3, lr}
    41fa:	230e      	movs	r3, #14
    41fc:	5ec9      	ldrsh	r1, [r1, r3]
    41fe:	f000 f9d7 	bl	45b0 <_close_r>
    4202:	bd08      	pop	{r3, pc}

00004204 <_strtol_r>:
    4204:	b5f0      	push	{r4, r5, r6, r7, lr}
    4206:	1c1e      	adds	r6, r3, #0
    4208:	4b44      	ldr	r3, [pc, #272]	; (431c <_strtol_r+0x118>)
    420a:	b087      	sub	sp, #28
    420c:	681b      	ldr	r3, [r3, #0]
    420e:	9005      	str	r0, [sp, #20]
    4210:	9302      	str	r3, [sp, #8]
    4212:	1c0b      	adds	r3, r1, #0
    4214:	9103      	str	r1, [sp, #12]
    4216:	9201      	str	r2, [sp, #4]
    4218:	781c      	ldrb	r4, [r3, #0]
    421a:	9a02      	ldr	r2, [sp, #8]
    421c:	1c5d      	adds	r5, r3, #1
    421e:	1912      	adds	r2, r2, r4
    4220:	7850      	ldrb	r0, [r2, #1]
    4222:	2208      	movs	r2, #8
    4224:	4010      	ands	r0, r2
    4226:	d001      	beq.n	422c <_strtol_r+0x28>
    4228:	1c2b      	adds	r3, r5, #0
    422a:	e7f5      	b.n	4218 <_strtol_r+0x14>
    422c:	2c2d      	cmp	r4, #45	; 0x2d
    422e:	d104      	bne.n	423a <_strtol_r+0x36>
    4230:	1c9d      	adds	r5, r3, #2
    4232:	785c      	ldrb	r4, [r3, #1]
    4234:	2301      	movs	r3, #1
    4236:	9300      	str	r3, [sp, #0]
    4238:	e004      	b.n	4244 <_strtol_r+0x40>
    423a:	9000      	str	r0, [sp, #0]
    423c:	2c2b      	cmp	r4, #43	; 0x2b
    423e:	d101      	bne.n	4244 <_strtol_r+0x40>
    4240:	785c      	ldrb	r4, [r3, #1]
    4242:	1c9d      	adds	r5, r3, #2
    4244:	2e00      	cmp	r6, #0
    4246:	d002      	beq.n	424e <_strtol_r+0x4a>
    4248:	2e10      	cmp	r6, #16
    424a:	d10a      	bne.n	4262 <_strtol_r+0x5e>
    424c:	e060      	b.n	4310 <_strtol_r+0x10c>
    424e:	2c30      	cmp	r4, #48	; 0x30
    4250:	d15c      	bne.n	430c <_strtol_r+0x108>
    4252:	2220      	movs	r2, #32
    4254:	782b      	ldrb	r3, [r5, #0]
    4256:	4393      	bics	r3, r2
    4258:	2b58      	cmp	r3, #88	; 0x58
    425a:	d152      	bne.n	4302 <_strtol_r+0xfe>
    425c:	2610      	movs	r6, #16
    425e:	786c      	ldrb	r4, [r5, #1]
    4260:	3502      	adds	r5, #2
    4262:	9f00      	ldr	r7, [sp, #0]
    4264:	1c31      	adds	r1, r6, #0
    4266:	1e7b      	subs	r3, r7, #1
    4268:	419f      	sbcs	r7, r3
    426a:	4b2d      	ldr	r3, [pc, #180]	; (4320 <_strtol_r+0x11c>)
    426c:	18ff      	adds	r7, r7, r3
    426e:	1c38      	adds	r0, r7, #0
    4270:	f7fe fbc0 	bl	29f4 <__aeabi_uidivmod>
    4274:	1c38      	adds	r0, r7, #0
    4276:	9104      	str	r1, [sp, #16]
    4278:	1c31      	adds	r1, r6, #0
    427a:	f7fe fb35 	bl	28e8 <__aeabi_uidiv>
    427e:	2200      	movs	r2, #0
    4280:	1c07      	adds	r7, r0, #0
    4282:	1c13      	adds	r3, r2, #0
    4284:	9902      	ldr	r1, [sp, #8]
    4286:	1909      	adds	r1, r1, r4
    4288:	7849      	ldrb	r1, [r1, #1]
    428a:	0748      	lsls	r0, r1, #29
    428c:	d501      	bpl.n	4292 <_strtol_r+0x8e>
    428e:	3c30      	subs	r4, #48	; 0x30
    4290:	e007      	b.n	42a2 <_strtol_r+0x9e>
    4292:	2003      	movs	r0, #3
    4294:	4008      	ands	r0, r1
    4296:	d017      	beq.n	42c8 <_strtol_r+0xc4>
    4298:	2137      	movs	r1, #55	; 0x37
    429a:	2801      	cmp	r0, #1
    429c:	d000      	beq.n	42a0 <_strtol_r+0x9c>
    429e:	3120      	adds	r1, #32
    42a0:	1a64      	subs	r4, r4, r1
    42a2:	42b4      	cmp	r4, r6
    42a4:	da10      	bge.n	42c8 <_strtol_r+0xc4>
    42a6:	1c51      	adds	r1, r2, #1
    42a8:	d00b      	beq.n	42c2 <_strtol_r+0xbe>
    42aa:	42bb      	cmp	r3, r7
    42ac:	d807      	bhi.n	42be <_strtol_r+0xba>
    42ae:	d102      	bne.n	42b6 <_strtol_r+0xb2>
    42b0:	9a04      	ldr	r2, [sp, #16]
    42b2:	4294      	cmp	r4, r2
    42b4:	dc03      	bgt.n	42be <_strtol_r+0xba>
    42b6:	4373      	muls	r3, r6
    42b8:	2201      	movs	r2, #1
    42ba:	18e3      	adds	r3, r4, r3
    42bc:	e001      	b.n	42c2 <_strtol_r+0xbe>
    42be:	2201      	movs	r2, #1
    42c0:	4252      	negs	r2, r2
    42c2:	782c      	ldrb	r4, [r5, #0]
    42c4:	3501      	adds	r5, #1
    42c6:	e7dd      	b.n	4284 <_strtol_r+0x80>
    42c8:	1c18      	adds	r0, r3, #0
    42ca:	1c51      	adds	r1, r2, #1
    42cc:	d10b      	bne.n	42e6 <_strtol_r+0xe2>
    42ce:	9800      	ldr	r0, [sp, #0]
    42d0:	9a05      	ldr	r2, [sp, #20]
    42d2:	1e43      	subs	r3, r0, #1
    42d4:	4198      	sbcs	r0, r3
    42d6:	4b12      	ldr	r3, [pc, #72]	; (4320 <_strtol_r+0x11c>)
    42d8:	18c0      	adds	r0, r0, r3
    42da:	2322      	movs	r3, #34	; 0x22
    42dc:	6013      	str	r3, [r2, #0]
    42de:	9b01      	ldr	r3, [sp, #4]
    42e0:	2b00      	cmp	r3, #0
    42e2:	d10a      	bne.n	42fa <_strtol_r+0xf6>
    42e4:	e017      	b.n	4316 <_strtol_r+0x112>
    42e6:	9900      	ldr	r1, [sp, #0]
    42e8:	2900      	cmp	r1, #0
    42ea:	d000      	beq.n	42ee <_strtol_r+0xea>
    42ec:	4258      	negs	r0, r3
    42ee:	9b01      	ldr	r3, [sp, #4]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d010      	beq.n	4316 <_strtol_r+0x112>
    42f4:	9b03      	ldr	r3, [sp, #12]
    42f6:	2a00      	cmp	r2, #0
    42f8:	d000      	beq.n	42fc <_strtol_r+0xf8>
    42fa:	1e6b      	subs	r3, r5, #1
    42fc:	9a01      	ldr	r2, [sp, #4]
    42fe:	6013      	str	r3, [r2, #0]
    4300:	e009      	b.n	4316 <_strtol_r+0x112>
    4302:	2430      	movs	r4, #48	; 0x30
    4304:	2e00      	cmp	r6, #0
    4306:	d1ac      	bne.n	4262 <_strtol_r+0x5e>
    4308:	2608      	movs	r6, #8
    430a:	e7aa      	b.n	4262 <_strtol_r+0x5e>
    430c:	260a      	movs	r6, #10
    430e:	e7a8      	b.n	4262 <_strtol_r+0x5e>
    4310:	2c30      	cmp	r4, #48	; 0x30
    4312:	d1a6      	bne.n	4262 <_strtol_r+0x5e>
    4314:	e79d      	b.n	4252 <_strtol_r+0x4e>
    4316:	b007      	add	sp, #28
    4318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	2000007c 	.word	0x2000007c
    4320:	7fffffff 	.word	0x7fffffff

00004324 <_strtoul_r>:
    4324:	b5f0      	push	{r4, r5, r6, r7, lr}
    4326:	1c1e      	adds	r6, r3, #0
    4328:	4b3e      	ldr	r3, [pc, #248]	; (4424 <_strtoul_r+0x100>)
    432a:	b087      	sub	sp, #28
    432c:	681b      	ldr	r3, [r3, #0]
    432e:	1c17      	adds	r7, r2, #0
    4330:	9302      	str	r3, [sp, #8]
    4332:	1c0b      	adds	r3, r1, #0
    4334:	9005      	str	r0, [sp, #20]
    4336:	9104      	str	r1, [sp, #16]
    4338:	781c      	ldrb	r4, [r3, #0]
    433a:	9a02      	ldr	r2, [sp, #8]
    433c:	1c5d      	adds	r5, r3, #1
    433e:	1912      	adds	r2, r2, r4
    4340:	7851      	ldrb	r1, [r2, #1]
    4342:	2208      	movs	r2, #8
    4344:	400a      	ands	r2, r1
    4346:	d001      	beq.n	434c <_strtoul_r+0x28>
    4348:	1c2b      	adds	r3, r5, #0
    434a:	e7f5      	b.n	4338 <_strtoul_r+0x14>
    434c:	2c2d      	cmp	r4, #45	; 0x2d
    434e:	d104      	bne.n	435a <_strtoul_r+0x36>
    4350:	1c9d      	adds	r5, r3, #2
    4352:	785c      	ldrb	r4, [r3, #1]
    4354:	2301      	movs	r3, #1
    4356:	9301      	str	r3, [sp, #4]
    4358:	e004      	b.n	4364 <_strtoul_r+0x40>
    435a:	9201      	str	r2, [sp, #4]
    435c:	2c2b      	cmp	r4, #43	; 0x2b
    435e:	d101      	bne.n	4364 <_strtoul_r+0x40>
    4360:	785c      	ldrb	r4, [r3, #1]
    4362:	1c9d      	adds	r5, r3, #2
    4364:	2e00      	cmp	r6, #0
    4366:	d002      	beq.n	436e <_strtoul_r+0x4a>
    4368:	2e10      	cmp	r6, #16
    436a:	d10a      	bne.n	4382 <_strtoul_r+0x5e>
    436c:	e054      	b.n	4418 <_strtoul_r+0xf4>
    436e:	2c30      	cmp	r4, #48	; 0x30
    4370:	d150      	bne.n	4414 <_strtoul_r+0xf0>
    4372:	2220      	movs	r2, #32
    4374:	782b      	ldrb	r3, [r5, #0]
    4376:	4393      	bics	r3, r2
    4378:	2b58      	cmp	r3, #88	; 0x58
    437a:	d146      	bne.n	440a <_strtoul_r+0xe6>
    437c:	2610      	movs	r6, #16
    437e:	786c      	ldrb	r4, [r5, #1]
    4380:	3502      	adds	r5, #2
    4382:	2001      	movs	r0, #1
    4384:	1c31      	adds	r1, r6, #0
    4386:	4240      	negs	r0, r0
    4388:	f7fe faae 	bl	28e8 <__aeabi_uidiv>
    438c:	9003      	str	r0, [sp, #12]
    438e:	2001      	movs	r0, #1
    4390:	1c31      	adds	r1, r6, #0
    4392:	4240      	negs	r0, r0
    4394:	f7fe fb2e 	bl	29f4 <__aeabi_uidivmod>
    4398:	2200      	movs	r2, #0
    439a:	468c      	mov	ip, r1
    439c:	1c13      	adds	r3, r2, #0
    439e:	9902      	ldr	r1, [sp, #8]
    43a0:	1909      	adds	r1, r1, r4
    43a2:	7849      	ldrb	r1, [r1, #1]
    43a4:	0748      	lsls	r0, r1, #29
    43a6:	d501      	bpl.n	43ac <_strtoul_r+0x88>
    43a8:	3c30      	subs	r4, #48	; 0x30
    43aa:	e007      	b.n	43bc <_strtoul_r+0x98>
    43ac:	2003      	movs	r0, #3
    43ae:	4008      	ands	r0, r1
    43b0:	d017      	beq.n	43e2 <_strtoul_r+0xbe>
    43b2:	2137      	movs	r1, #55	; 0x37
    43b4:	2801      	cmp	r0, #1
    43b6:	d000      	beq.n	43ba <_strtoul_r+0x96>
    43b8:	3120      	adds	r1, #32
    43ba:	1a64      	subs	r4, r4, r1
    43bc:	42b4      	cmp	r4, r6
    43be:	da10      	bge.n	43e2 <_strtoul_r+0xbe>
    43c0:	1c51      	adds	r1, r2, #1
    43c2:	d00b      	beq.n	43dc <_strtoul_r+0xb8>
    43c4:	9a03      	ldr	r2, [sp, #12]
    43c6:	4293      	cmp	r3, r2
    43c8:	d806      	bhi.n	43d8 <_strtoul_r+0xb4>
    43ca:	d101      	bne.n	43d0 <_strtoul_r+0xac>
    43cc:	4564      	cmp	r4, ip
    43ce:	dc03      	bgt.n	43d8 <_strtoul_r+0xb4>
    43d0:	4373      	muls	r3, r6
    43d2:	2201      	movs	r2, #1
    43d4:	18e3      	adds	r3, r4, r3
    43d6:	e001      	b.n	43dc <_strtoul_r+0xb8>
    43d8:	2201      	movs	r2, #1
    43da:	4252      	negs	r2, r2
    43dc:	782c      	ldrb	r4, [r5, #0]
    43de:	3501      	adds	r5, #1
    43e0:	e7dd      	b.n	439e <_strtoul_r+0x7a>
    43e2:	1c18      	adds	r0, r3, #0
    43e4:	1c51      	adds	r1, r2, #1
    43e6:	d104      	bne.n	43f2 <_strtoul_r+0xce>
    43e8:	2322      	movs	r3, #34	; 0x22
    43ea:	9905      	ldr	r1, [sp, #20]
    43ec:	1c10      	adds	r0, r2, #0
    43ee:	600b      	str	r3, [r1, #0]
    43f0:	e003      	b.n	43fa <_strtoul_r+0xd6>
    43f2:	9901      	ldr	r1, [sp, #4]
    43f4:	2900      	cmp	r1, #0
    43f6:	d000      	beq.n	43fa <_strtoul_r+0xd6>
    43f8:	4258      	negs	r0, r3
    43fa:	2f00      	cmp	r7, #0
    43fc:	d00f      	beq.n	441e <_strtoul_r+0xfa>
    43fe:	9b04      	ldr	r3, [sp, #16]
    4400:	2a00      	cmp	r2, #0
    4402:	d000      	beq.n	4406 <_strtoul_r+0xe2>
    4404:	1e6b      	subs	r3, r5, #1
    4406:	603b      	str	r3, [r7, #0]
    4408:	e009      	b.n	441e <_strtoul_r+0xfa>
    440a:	2430      	movs	r4, #48	; 0x30
    440c:	2e00      	cmp	r6, #0
    440e:	d1b8      	bne.n	4382 <_strtoul_r+0x5e>
    4410:	2608      	movs	r6, #8
    4412:	e7b6      	b.n	4382 <_strtoul_r+0x5e>
    4414:	260a      	movs	r6, #10
    4416:	e7b4      	b.n	4382 <_strtoul_r+0x5e>
    4418:	2c30      	cmp	r4, #48	; 0x30
    441a:	d1b2      	bne.n	4382 <_strtoul_r+0x5e>
    441c:	e7a9      	b.n	4372 <_strtoul_r+0x4e>
    441e:	b007      	add	sp, #28
    4420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4422:	46c0      	nop			; (mov r8, r8)
    4424:	2000007c 	.word	0x2000007c

00004428 <__submore>:
    4428:	1c0b      	adds	r3, r1, #0
    442a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    442c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    442e:	3344      	adds	r3, #68	; 0x44
    4430:	1c0c      	adds	r4, r1, #0
    4432:	429d      	cmp	r5, r3
    4434:	d11b      	bne.n	446e <__submore+0x46>
    4436:	2680      	movs	r6, #128	; 0x80
    4438:	00f6      	lsls	r6, r6, #3
    443a:	1c31      	adds	r1, r6, #0
    443c:	f7fe ffa6 	bl	338c <_malloc_r>
    4440:	2800      	cmp	r0, #0
    4442:	d102      	bne.n	444a <__submore+0x22>
    4444:	2001      	movs	r0, #1
    4446:	4240      	negs	r0, r0
    4448:	e025      	b.n	4496 <__submore+0x6e>
    444a:	1c23      	adds	r3, r4, #0
    444c:	6360      	str	r0, [r4, #52]	; 0x34
    444e:	63a6      	str	r6, [r4, #56]	; 0x38
    4450:	3346      	adds	r3, #70	; 0x46
    4452:	781a      	ldrb	r2, [r3, #0]
    4454:	4b10      	ldr	r3, [pc, #64]	; (4498 <__submore+0x70>)
    4456:	54c2      	strb	r2, [r0, r3]
    4458:	1c23      	adds	r3, r4, #0
    445a:	3345      	adds	r3, #69	; 0x45
    445c:	781a      	ldrb	r2, [r3, #0]
    445e:	4b0f      	ldr	r3, [pc, #60]	; (449c <__submore+0x74>)
    4460:	54c2      	strb	r2, [r0, r3]
    4462:	782a      	ldrb	r2, [r5, #0]
    4464:	4b0e      	ldr	r3, [pc, #56]	; (44a0 <__submore+0x78>)
    4466:	54c2      	strb	r2, [r0, r3]
    4468:	18c0      	adds	r0, r0, r3
    446a:	6020      	str	r0, [r4, #0]
    446c:	e012      	b.n	4494 <__submore+0x6c>
    446e:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    4470:	1c29      	adds	r1, r5, #0
    4472:	0073      	lsls	r3, r6, #1
    4474:	1c1a      	adds	r2, r3, #0
    4476:	9301      	str	r3, [sp, #4]
    4478:	f000 f8ef 	bl	465a <_realloc_r>
    447c:	1e05      	subs	r5, r0, #0
    447e:	d0e1      	beq.n	4444 <__submore+0x1c>
    4480:	1987      	adds	r7, r0, r6
    4482:	1c38      	adds	r0, r7, #0
    4484:	1c29      	adds	r1, r5, #0
    4486:	1c32      	adds	r2, r6, #0
    4488:	f7fe fb10 	bl	2aac <memcpy>
    448c:	9b01      	ldr	r3, [sp, #4]
    448e:	6027      	str	r7, [r4, #0]
    4490:	6365      	str	r5, [r4, #52]	; 0x34
    4492:	63a3      	str	r3, [r4, #56]	; 0x38
    4494:	2000      	movs	r0, #0
    4496:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4498:	000003ff 	.word	0x000003ff
    449c:	000003fe 	.word	0x000003fe
    44a0:	000003fd 	.word	0x000003fd

000044a4 <_ungetc_r>:
    44a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44a6:	1c06      	adds	r6, r0, #0
    44a8:	1c0d      	adds	r5, r1, #0
    44aa:	1c14      	adds	r4, r2, #0
    44ac:	1c4b      	adds	r3, r1, #1
    44ae:	d102      	bne.n	44b6 <_ungetc_r+0x12>
    44b0:	2001      	movs	r0, #1
    44b2:	4240      	negs	r0, r0
    44b4:	e061      	b.n	457a <_ungetc_r+0xd6>
    44b6:	2800      	cmp	r0, #0
    44b8:	d004      	beq.n	44c4 <_ungetc_r+0x20>
    44ba:	6983      	ldr	r3, [r0, #24]
    44bc:	2b00      	cmp	r3, #0
    44be:	d101      	bne.n	44c4 <_ungetc_r+0x20>
    44c0:	f7fe fe0e 	bl	30e0 <__sinit>
    44c4:	4b2d      	ldr	r3, [pc, #180]	; (457c <_ungetc_r+0xd8>)
    44c6:	429c      	cmp	r4, r3
    44c8:	d101      	bne.n	44ce <_ungetc_r+0x2a>
    44ca:	6874      	ldr	r4, [r6, #4]
    44cc:	e008      	b.n	44e0 <_ungetc_r+0x3c>
    44ce:	4b2c      	ldr	r3, [pc, #176]	; (4580 <_ungetc_r+0xdc>)
    44d0:	429c      	cmp	r4, r3
    44d2:	d101      	bne.n	44d8 <_ungetc_r+0x34>
    44d4:	68b4      	ldr	r4, [r6, #8]
    44d6:	e003      	b.n	44e0 <_ungetc_r+0x3c>
    44d8:	4b2a      	ldr	r3, [pc, #168]	; (4584 <_ungetc_r+0xe0>)
    44da:	429c      	cmp	r4, r3
    44dc:	d100      	bne.n	44e0 <_ungetc_r+0x3c>
    44de:	68f4      	ldr	r4, [r6, #12]
    44e0:	2220      	movs	r2, #32
    44e2:	89a3      	ldrh	r3, [r4, #12]
    44e4:	4393      	bics	r3, r2
    44e6:	81a3      	strh	r3, [r4, #12]
    44e8:	b29b      	uxth	r3, r3
    44ea:	075a      	lsls	r2, r3, #29
    44ec:	d413      	bmi.n	4516 <_ungetc_r+0x72>
    44ee:	06da      	lsls	r2, r3, #27
    44f0:	d5de      	bpl.n	44b0 <_ungetc_r+0xc>
    44f2:	2708      	movs	r7, #8
    44f4:	423b      	tst	r3, r7
    44f6:	d00a      	beq.n	450e <_ungetc_r+0x6a>
    44f8:	1c30      	adds	r0, r6, #0
    44fa:	1c21      	adds	r1, r4, #0
    44fc:	f7fe fd6e 	bl	2fdc <_fflush_r>
    4500:	2800      	cmp	r0, #0
    4502:	d1d5      	bne.n	44b0 <_ungetc_r+0xc>
    4504:	89a3      	ldrh	r3, [r4, #12]
    4506:	60a0      	str	r0, [r4, #8]
    4508:	43bb      	bics	r3, r7
    450a:	81a3      	strh	r3, [r4, #12]
    450c:	61a0      	str	r0, [r4, #24]
    450e:	2204      	movs	r2, #4
    4510:	89a3      	ldrh	r3, [r4, #12]
    4512:	4313      	orrs	r3, r2
    4514:	81a3      	strh	r3, [r4, #12]
    4516:	6b62      	ldr	r2, [r4, #52]	; 0x34
    4518:	b2ed      	uxtb	r5, r5
    451a:	6863      	ldr	r3, [r4, #4]
    451c:	2a00      	cmp	r2, #0
    451e:	d010      	beq.n	4542 <_ungetc_r+0x9e>
    4520:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4522:	4293      	cmp	r3, r2
    4524:	da06      	bge.n	4534 <_ungetc_r+0x90>
    4526:	6823      	ldr	r3, [r4, #0]
    4528:	3b01      	subs	r3, #1
    452a:	6023      	str	r3, [r4, #0]
    452c:	701d      	strb	r5, [r3, #0]
    452e:	6863      	ldr	r3, [r4, #4]
    4530:	3301      	adds	r3, #1
    4532:	e020      	b.n	4576 <_ungetc_r+0xd2>
    4534:	1c30      	adds	r0, r6, #0
    4536:	1c21      	adds	r1, r4, #0
    4538:	f7ff ff76 	bl	4428 <__submore>
    453c:	2800      	cmp	r0, #0
    453e:	d0f2      	beq.n	4526 <_ungetc_r+0x82>
    4540:	e7b6      	b.n	44b0 <_ungetc_r+0xc>
    4542:	6921      	ldr	r1, [r4, #16]
    4544:	6822      	ldr	r2, [r4, #0]
    4546:	2900      	cmp	r1, #0
    4548:	d009      	beq.n	455e <_ungetc_r+0xba>
    454a:	428a      	cmp	r2, r1
    454c:	d907      	bls.n	455e <_ungetc_r+0xba>
    454e:	1e51      	subs	r1, r2, #1
    4550:	7808      	ldrb	r0, [r1, #0]
    4552:	42a8      	cmp	r0, r5
    4554:	d103      	bne.n	455e <_ungetc_r+0xba>
    4556:	3301      	adds	r3, #1
    4558:	6021      	str	r1, [r4, #0]
    455a:	6063      	str	r3, [r4, #4]
    455c:	e00d      	b.n	457a <_ungetc_r+0xd6>
    455e:	6423      	str	r3, [r4, #64]	; 0x40
    4560:	1c23      	adds	r3, r4, #0
    4562:	3344      	adds	r3, #68	; 0x44
    4564:	6363      	str	r3, [r4, #52]	; 0x34
    4566:	2303      	movs	r3, #3
    4568:	63a3      	str	r3, [r4, #56]	; 0x38
    456a:	1c23      	adds	r3, r4, #0
    456c:	3346      	adds	r3, #70	; 0x46
    456e:	63e2      	str	r2, [r4, #60]	; 0x3c
    4570:	701d      	strb	r5, [r3, #0]
    4572:	6023      	str	r3, [r4, #0]
    4574:	2301      	movs	r3, #1
    4576:	1c28      	adds	r0, r5, #0
    4578:	6063      	str	r3, [r4, #4]
    457a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    457c:	00004ed0 	.word	0x00004ed0
    4580:	00004ef0 	.word	0x00004ef0
    4584:	00004f10 	.word	0x00004f10

00004588 <_write_r>:
    4588:	b538      	push	{r3, r4, r5, lr}
    458a:	1c05      	adds	r5, r0, #0
    458c:	2000      	movs	r0, #0
    458e:	4c07      	ldr	r4, [pc, #28]	; (45ac <_write_r+0x24>)
    4590:	6020      	str	r0, [r4, #0]
    4592:	1c08      	adds	r0, r1, #0
    4594:	1c11      	adds	r1, r2, #0
    4596:	1c1a      	adds	r2, r3, #0
    4598:	f7fe f95e 	bl	2858 <_write>
    459c:	1c43      	adds	r3, r0, #1
    459e:	d103      	bne.n	45a8 <_write_r+0x20>
    45a0:	6823      	ldr	r3, [r4, #0]
    45a2:	2b00      	cmp	r3, #0
    45a4:	d000      	beq.n	45a8 <_write_r+0x20>
    45a6:	602b      	str	r3, [r5, #0]
    45a8:	bd38      	pop	{r3, r4, r5, pc}
    45aa:	46c0      	nop			; (mov r8, r8)
    45ac:	20000b54 	.word	0x20000b54

000045b0 <_close_r>:
    45b0:	b538      	push	{r3, r4, r5, lr}
    45b2:	2300      	movs	r3, #0
    45b4:	4c06      	ldr	r4, [pc, #24]	; (45d0 <_close_r+0x20>)
    45b6:	1c05      	adds	r5, r0, #0
    45b8:	1c08      	adds	r0, r1, #0
    45ba:	6023      	str	r3, [r4, #0]
    45bc:	f7fe f986 	bl	28cc <_close>
    45c0:	1c43      	adds	r3, r0, #1
    45c2:	d103      	bne.n	45cc <_close_r+0x1c>
    45c4:	6823      	ldr	r3, [r4, #0]
    45c6:	2b00      	cmp	r3, #0
    45c8:	d000      	beq.n	45cc <_close_r+0x1c>
    45ca:	602b      	str	r3, [r5, #0]
    45cc:	bd38      	pop	{r3, r4, r5, pc}
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	20000b54 	.word	0x20000b54

000045d4 <_fstat_r>:
    45d4:	b538      	push	{r3, r4, r5, lr}
    45d6:	2300      	movs	r3, #0
    45d8:	4c06      	ldr	r4, [pc, #24]	; (45f4 <_fstat_r+0x20>)
    45da:	1c05      	adds	r5, r0, #0
    45dc:	1c08      	adds	r0, r1, #0
    45de:	1c11      	adds	r1, r2, #0
    45e0:	6023      	str	r3, [r4, #0]
    45e2:	f7fe f977 	bl	28d4 <_fstat>
    45e6:	1c43      	adds	r3, r0, #1
    45e8:	d103      	bne.n	45f2 <_fstat_r+0x1e>
    45ea:	6823      	ldr	r3, [r4, #0]
    45ec:	2b00      	cmp	r3, #0
    45ee:	d000      	beq.n	45f2 <_fstat_r+0x1e>
    45f0:	602b      	str	r3, [r5, #0]
    45f2:	bd38      	pop	{r3, r4, r5, pc}
    45f4:	20000b54 	.word	0x20000b54

000045f8 <_isatty_r>:
    45f8:	b538      	push	{r3, r4, r5, lr}
    45fa:	2300      	movs	r3, #0
    45fc:	4c06      	ldr	r4, [pc, #24]	; (4618 <_isatty_r+0x20>)
    45fe:	1c05      	adds	r5, r0, #0
    4600:	1c08      	adds	r0, r1, #0
    4602:	6023      	str	r3, [r4, #0]
    4604:	f7fe f96c 	bl	28e0 <_isatty>
    4608:	1c43      	adds	r3, r0, #1
    460a:	d103      	bne.n	4614 <_isatty_r+0x1c>
    460c:	6823      	ldr	r3, [r4, #0]
    460e:	2b00      	cmp	r3, #0
    4610:	d000      	beq.n	4614 <_isatty_r+0x1c>
    4612:	602b      	str	r3, [r5, #0]
    4614:	bd38      	pop	{r3, r4, r5, pc}
    4616:	46c0      	nop			; (mov r8, r8)
    4618:	20000b54 	.word	0x20000b54

0000461c <_lseek_r>:
    461c:	b538      	push	{r3, r4, r5, lr}
    461e:	1c05      	adds	r5, r0, #0
    4620:	2000      	movs	r0, #0
    4622:	4c07      	ldr	r4, [pc, #28]	; (4640 <_lseek_r+0x24>)
    4624:	6020      	str	r0, [r4, #0]
    4626:	1c08      	adds	r0, r1, #0
    4628:	1c11      	adds	r1, r2, #0
    462a:	1c1a      	adds	r2, r3, #0
    462c:	f7fe f95a 	bl	28e4 <_lseek>
    4630:	1c43      	adds	r3, r0, #1
    4632:	d103      	bne.n	463c <_lseek_r+0x20>
    4634:	6823      	ldr	r3, [r4, #0]
    4636:	2b00      	cmp	r3, #0
    4638:	d000      	beq.n	463c <_lseek_r+0x20>
    463a:	602b      	str	r3, [r5, #0]
    463c:	bd38      	pop	{r3, r4, r5, pc}
    463e:	46c0      	nop			; (mov r8, r8)
    4640:	20000b54 	.word	0x20000b54

00004644 <memchr>:
    4644:	b2c9      	uxtb	r1, r1
    4646:	1882      	adds	r2, r0, r2
    4648:	4290      	cmp	r0, r2
    464a:	d004      	beq.n	4656 <memchr+0x12>
    464c:	7803      	ldrb	r3, [r0, #0]
    464e:	428b      	cmp	r3, r1
    4650:	d002      	beq.n	4658 <memchr+0x14>
    4652:	3001      	adds	r0, #1
    4654:	e7f8      	b.n	4648 <memchr+0x4>
    4656:	2000      	movs	r0, #0
    4658:	4770      	bx	lr

0000465a <_realloc_r>:
    465a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    465c:	1c06      	adds	r6, r0, #0
    465e:	1c0c      	adds	r4, r1, #0
    4660:	1c15      	adds	r5, r2, #0
    4662:	2900      	cmp	r1, #0
    4664:	d104      	bne.n	4670 <_realloc_r+0x16>
    4666:	1c11      	adds	r1, r2, #0
    4668:	f7fe fe90 	bl	338c <_malloc_r>
    466c:	1c04      	adds	r4, r0, #0
    466e:	e018      	b.n	46a2 <_realloc_r+0x48>
    4670:	2a00      	cmp	r2, #0
    4672:	d103      	bne.n	467c <_realloc_r+0x22>
    4674:	f7fe fe44 	bl	3300 <_free_r>
    4678:	1c2c      	adds	r4, r5, #0
    467a:	e012      	b.n	46a2 <_realloc_r+0x48>
    467c:	f000 f828 	bl	46d0 <_malloc_usable_size_r>
    4680:	42a8      	cmp	r0, r5
    4682:	d20e      	bcs.n	46a2 <_realloc_r+0x48>
    4684:	1c30      	adds	r0, r6, #0
    4686:	1c29      	adds	r1, r5, #0
    4688:	f7fe fe80 	bl	338c <_malloc_r>
    468c:	1e07      	subs	r7, r0, #0
    468e:	d007      	beq.n	46a0 <_realloc_r+0x46>
    4690:	1c21      	adds	r1, r4, #0
    4692:	1c2a      	adds	r2, r5, #0
    4694:	f7fe fa0a 	bl	2aac <memcpy>
    4698:	1c30      	adds	r0, r6, #0
    469a:	1c21      	adds	r1, r4, #0
    469c:	f7fe fe30 	bl	3300 <_free_r>
    46a0:	1c3c      	adds	r4, r7, #0
    46a2:	1c20      	adds	r0, r4, #0
    46a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000046a8 <_read_r>:
    46a8:	b538      	push	{r3, r4, r5, lr}
    46aa:	1c05      	adds	r5, r0, #0
    46ac:	2000      	movs	r0, #0
    46ae:	4c07      	ldr	r4, [pc, #28]	; (46cc <_read_r+0x24>)
    46b0:	6020      	str	r0, [r4, #0]
    46b2:	1c08      	adds	r0, r1, #0
    46b4:	1c11      	adds	r1, r2, #0
    46b6:	1c1a      	adds	r2, r3, #0
    46b8:	f7fe f8ac 	bl	2814 <_read>
    46bc:	1c43      	adds	r3, r0, #1
    46be:	d103      	bne.n	46c8 <_read_r+0x20>
    46c0:	6823      	ldr	r3, [r4, #0]
    46c2:	2b00      	cmp	r3, #0
    46c4:	d000      	beq.n	46c8 <_read_r+0x20>
    46c6:	602b      	str	r3, [r5, #0]
    46c8:	bd38      	pop	{r3, r4, r5, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	20000b54 	.word	0x20000b54

000046d0 <_malloc_usable_size_r>:
    46d0:	1f0b      	subs	r3, r1, #4
    46d2:	681a      	ldr	r2, [r3, #0]
    46d4:	1f10      	subs	r0, r2, #4
    46d6:	2a00      	cmp	r2, #0
    46d8:	da04      	bge.n	46e4 <_malloc_usable_size_r+0x14>
    46da:	1889      	adds	r1, r1, r2
    46dc:	3904      	subs	r1, #4
    46de:	680b      	ldr	r3, [r1, #0]
    46e0:	18d0      	adds	r0, r2, r3
    46e2:	3804      	subs	r0, #4
    46e4:	4770      	bx	lr
    46e6:	0000      	movs	r0, r0
    46e8:	00000a4a 	.word	0x00000a4a
    46ec:	00000a90 	.word	0x00000a90
    46f0:	00000abe 	.word	0x00000abe
    46f4:	00000ad0 	.word	0x00000ad0
    46f8:	00000ae2 	.word	0x00000ae2
    46fc:	00000b2e 	.word	0x00000b2e
    4700:	00000b62 	.word	0x00000b62
    4704:	00000b74 	.word	0x00000b74
    4708:	00000a28 	.word	0x00000a28
    470c:	00000a28 	.word	0x00000a28
    4710:	00000a28 	.word	0x00000a28
    4714:	00000a28 	.word	0x00000a28
    4718:	00000a28 	.word	0x00000a28
    471c:	00000a28 	.word	0x00000a28
    4720:	00000a28 	.word	0x00000a28
    4724:	00000a28 	.word	0x00000a28
    4728:	00000a28 	.word	0x00000a28
    472c:	00000a28 	.word	0x00000a28
    4730:	00000a28 	.word	0x00000a28
    4734:	00000a28 	.word	0x00000a28
    4738:	00000a28 	.word	0x00000a28
    473c:	00000a28 	.word	0x00000a28
    4740:	00000a28 	.word	0x00000a28
    4744:	00000a28 	.word	0x00000a28
    4748:	00000a28 	.word	0x00000a28
    474c:	00000a28 	.word	0x00000a28
    4750:	00000a28 	.word	0x00000a28
    4754:	00000a28 	.word	0x00000a28
    4758:	00000a28 	.word	0x00000a28
    475c:	00000a28 	.word	0x00000a28
    4760:	00000a28 	.word	0x00000a28
    4764:	00000a28 	.word	0x00000a28
    4768:	00000a28 	.word	0x00000a28
    476c:	00000a28 	.word	0x00000a28
    4770:	00000a28 	.word	0x00000a28
    4774:	00000a28 	.word	0x00000a28
    4778:	00000a28 	.word	0x00000a28
    477c:	00000a28 	.word	0x00000a28
    4780:	00000a28 	.word	0x00000a28
    4784:	00000a28 	.word	0x00000a28
    4788:	00000a28 	.word	0x00000a28
    478c:	00000a28 	.word	0x00000a28
    4790:	00000a28 	.word	0x00000a28
    4794:	00000a28 	.word	0x00000a28
    4798:	00000a28 	.word	0x00000a28
    479c:	00000a28 	.word	0x00000a28
    47a0:	00000a28 	.word	0x00000a28
    47a4:	00000a28 	.word	0x00000a28
    47a8:	00000a28 	.word	0x00000a28
    47ac:	00000a28 	.word	0x00000a28
    47b0:	00000a28 	.word	0x00000a28
    47b4:	00000a28 	.word	0x00000a28
    47b8:	00000a28 	.word	0x00000a28
    47bc:	00000a28 	.word	0x00000a28
    47c0:	00000a28 	.word	0x00000a28
    47c4:	00000a28 	.word	0x00000a28
    47c8:	00000a42 	.word	0x00000a42
    47cc:	40404040 	.word	0x40404040
    47d0:	40404040 	.word	0x40404040
    47d4:	40404040 	.word	0x40404040
    47d8:	40404040 	.word	0x40404040
    47dc:	40404040 	.word	0x40404040
    47e0:	40404040 	.word	0x40404040
    47e4:	76652040 	.word	0x76652040
    47e8:	20746e65 	.word	0x20746e65
    47ec:	63637573 	.word	0x63637573
    47f0:	20737365 	.word	0x20737365
    47f4:	40404040 	.word	0x40404040
    47f8:	40404040 	.word	0x40404040
    47fc:	40404040 	.word	0x40404040
    4800:	40404040 	.word	0x40404040
    4804:	40404040 	.word	0x40404040
    4808:	40404040 	.word	0x40404040
    480c:	00000d20 	.word	0x00000d20
    4810:	2a2a2a2a 	.word	0x2a2a2a2a
    4814:	2a2a2a2a 	.word	0x2a2a2a2a
    4818:	2a2a2a2a 	.word	0x2a2a2a2a
    481c:	2a2a2a2a 	.word	0x2a2a2a2a
    4820:	2a2a2a2a 	.word	0x2a2a2a2a
    4824:	616c6120 	.word	0x616c6120
    4828:	73206d72 	.word	0x73206d72
    482c:	65636375 	.word	0x65636375
    4830:	21207373 	.word	0x21207373
    4834:	2a2a2121 	.word	0x2a2a2121
    4838:	2a2a2a2a 	.word	0x2a2a2a2a
    483c:	2a2a2a2a 	.word	0x2a2a2a2a
    4840:	2a2a2a2a 	.word	0x2a2a2a2a
    4844:	2a2a2a2a 	.word	0x2a2a2a2a
    4848:	0d202a2a 	.word	0x0d202a2a
    484c:	00000000 	.word	0x00000000
    4850:	45200d0a 	.word	0x45200d0a
    4854:	6e657478 	.word	0x6e657478
    4858:	20646564 	.word	0x20646564
    485c:	7373656d 	.word	0x7373656d
    4860:	20656761 	.word	0x20656761
    4864:	65636572 	.word	0x65636572
    4868:	64657669 	.word	0x64657669
    486c:	206e6920 	.word	0x206e6920
    4870:	62207852 	.word	0x62207852
    4874:	65666675 	.word	0x65666675
    4878:	54202e72 	.word	0x54202e72
    487c:	72206568 	.word	0x72206568
    4880:	69656365 	.word	0x69656365
    4884:	20646576 	.word	0x20646576
    4888:	61746164 	.word	0x61746164
    488c:	3a736920 	.word	0x3a736920
    4890:	00000d20 	.word	0x00000d20
    4894:	53200d0a 	.word	0x53200d0a
    4898:	646e6174 	.word	0x646e6174
    489c:	20647261 	.word	0x20647261
    48a0:	7373656d 	.word	0x7373656d
    48a4:	20656761 	.word	0x20656761
    48a8:	65636572 	.word	0x65636572
    48ac:	64657669 	.word	0x64657669
    48b0:	206e6920 	.word	0x206e6920
    48b4:	62207852 	.word	0x62207852
    48b8:	65666675 	.word	0x65666675
    48bc:	54202e72 	.word	0x54202e72
    48c0:	72206568 	.word	0x72206568
    48c4:	69656365 	.word	0x69656365
    48c8:	20646576 	.word	0x20646576
    48cc:	61746164 	.word	0x61746164
    48d0:	3a736920 	.word	0x3a736920
    48d4:	00000d20 	.word	0x00000d20
    48d8:	64252020 	.word	0x64252020
    48dc:	00000000 	.word	0x00000000
    48e0:	000d0a0d 	.word	0x000d0a0d
    48e4:	53200d0a 	.word	0x53200d0a
    48e8:	646e6174 	.word	0x646e6174
    48ec:	20647261 	.word	0x20647261
    48f0:	7373656d 	.word	0x7373656d
    48f4:	20656761 	.word	0x20656761
    48f8:	65636572 	.word	0x65636572
    48fc:	64657669 	.word	0x64657669
    4900:	206e6920 	.word	0x206e6920
    4904:	4f464946 	.word	0x4f464946
    4908:	202e3020 	.word	0x202e3020
    490c:	20656854 	.word	0x20656854
    4910:	65636572 	.word	0x65636572
    4914:	64657669 	.word	0x64657669
    4918:	74616420 	.word	0x74616420
    491c:	73692061 	.word	0x73692061
    4920:	000d203a 	.word	0x000d203a
    4924:	45200d0a 	.word	0x45200d0a
    4928:	6e657478 	.word	0x6e657478
    492c:	20646564 	.word	0x20646564
    4930:	7373656d 	.word	0x7373656d
    4934:	20656761 	.word	0x20656761
    4938:	65636572 	.word	0x65636572
    493c:	64657669 	.word	0x64657669
    4940:	206e6920 	.word	0x206e6920
    4944:	4f464946 	.word	0x4f464946
    4948:	202e3120 	.word	0x202e3120
    494c:	20656854 	.word	0x20656854
    4950:	65636572 	.word	0x65636572
    4954:	64657669 	.word	0x64657669
    4958:	74616420 	.word	0x74616420
    495c:	73692061 	.word	0x73692061
    4960:	000d203a 	.word	0x000d203a
    4964:	746f7250 	.word	0x746f7250
    4968:	6c6f636f 	.word	0x6c6f636f
    496c:	72726520 	.word	0x72726520
    4970:	202c726f 	.word	0x202c726f
    4974:	61656c70 	.word	0x61656c70
    4978:	64206573 	.word	0x64206573
    497c:	6c62756f 	.word	0x6c62756f
    4980:	68632065 	.word	0x68632065
    4984:	206b6365 	.word	0x206b6365
    4988:	20656874 	.word	0x20656874
    498c:	636f6c63 	.word	0x636f6c63
    4990:	6e69206b 	.word	0x6e69206b
    4994:	6f777420 	.word	0x6f777420
    4998:	616f6220 	.word	0x616f6220
    499c:	2e736472 	.word	0x2e736472
    49a0:	0d0a0d20 	.word	0x0d0a0d20
    49a4:	00000000 	.word	0x00000000
    49a8:	756e654d 	.word	0x756e654d
    49ac:	0a0d3a20 	.word	0x0a0d3a20
    49b0:	2d2d2020 	.word	0x2d2d2020
    49b4:	6c655320 	.word	0x6c655320
    49b8:	20746365 	.word	0x20746365
    49bc:	20656874 	.word	0x20656874
    49c0:	69746361 	.word	0x69746361
    49c4:	0d3a6e6f 	.word	0x0d3a6e6f
    49c8:	3020200a 	.word	0x3020200a
    49cc:	6553203a 	.word	0x6553203a
    49d0:	74732074 	.word	0x74732074
    49d4:	61646e61 	.word	0x61646e61
    49d8:	66206472 	.word	0x66206472
    49dc:	65746c69 	.word	0x65746c69
    49e0:	44492072 	.word	0x44492072
    49e4:	203a3020 	.word	0x203a3020
    49e8:	35347830 	.word	0x35347830
    49ec:	73202c41 	.word	0x73202c41
    49f0:	65726f74 	.word	0x65726f74
    49f4:	746e6920 	.word	0x746e6920
    49f8:	7852206f 	.word	0x7852206f
    49fc:	66756220 	.word	0x66756220
    4a00:	2e726566 	.word	0x2e726566
    4a04:	200a0d20 	.word	0x200a0d20
    4a08:	203a3120 	.word	0x203a3120
    4a0c:	20746553 	.word	0x20746553
    4a10:	6e617473 	.word	0x6e617473
    4a14:	64726164 	.word	0x64726164
    4a18:	6c696620 	.word	0x6c696620
    4a1c:	20726574 	.word	0x20726574
    4a20:	31204449 	.word	0x31204449
    4a24:	7830203a 	.word	0x7830203a
    4a28:	2c393634 	.word	0x2c393634
    4a2c:	6f747320 	.word	0x6f747320
    4a30:	69206572 	.word	0x69206572
    4a34:	206f746e 	.word	0x206f746e
    4a38:	46207852 	.word	0x46207852
    4a3c:	204f4649 	.word	0x204f4649
    4a40:	0d202e30 	.word	0x0d202e30
    4a44:	3220200a 	.word	0x3220200a
    4a48:	6553203a 	.word	0x6553203a
    4a4c:	7320646e 	.word	0x7320646e
    4a50:	646e6174 	.word	0x646e6174
    4a54:	20647261 	.word	0x20647261
    4a58:	7373656d 	.word	0x7373656d
    4a5c:	20656761 	.word	0x20656761
    4a60:	68746977 	.word	0x68746977
    4a64:	3a444920 	.word	0x3a444920
    4a68:	34783020 	.word	0x34783020
    4a6c:	61204135 	.word	0x61204135
    4a70:	3420646e 	.word	0x3420646e
    4a74:	74796220 	.word	0x74796220
    4a78:	61642065 	.word	0x61642065
    4a7c:	30206174 	.word	0x30206174
    4a80:	206f7420 	.word	0x206f7420
    4a84:	0d202e33 	.word	0x0d202e33
    4a88:	3320200a 	.word	0x3320200a
    4a8c:	6553203a 	.word	0x6553203a
    4a90:	7320646e 	.word	0x7320646e
    4a94:	646e6174 	.word	0x646e6174
    4a98:	20647261 	.word	0x20647261
    4a9c:	7373656d 	.word	0x7373656d
    4aa0:	20656761 	.word	0x20656761
    4aa4:	68746977 	.word	0x68746977
    4aa8:	3a444920 	.word	0x3a444920
    4aac:	34783020 	.word	0x34783020
    4ab0:	61203936 	.word	0x61203936
    4ab4:	3420646e 	.word	0x3420646e
    4ab8:	74796220 	.word	0x74796220
    4abc:	61642065 	.word	0x61642065
    4ac0:	31206174 	.word	0x31206174
    4ac4:	74203832 	.word	0x74203832
    4ac8:	3331206f 	.word	0x3331206f
    4acc:	0d202e31 	.word	0x0d202e31
    4ad0:	3420200a 	.word	0x3420200a
    4ad4:	6553203a 	.word	0x6553203a
    4ad8:	78652074 	.word	0x78652074
    4adc:	646e6574 	.word	0x646e6574
    4ae0:	66206465 	.word	0x66206465
    4ae4:	65746c69 	.word	0x65746c69
    4ae8:	44492072 	.word	0x44492072
    4aec:	203a3020 	.word	0x203a3020
    4af0:	30317830 	.word	0x30317830
    4af4:	30303030 	.word	0x30303030
    4af8:	202c3541 	.word	0x202c3541
    4afc:	726f7473 	.word	0x726f7473
    4b00:	6e692065 	.word	0x6e692065
    4b04:	52206f74 	.word	0x52206f74
    4b08:	75622078 	.word	0x75622078
    4b0c:	72656666 	.word	0x72656666
    4b10:	0a0d202e 	.word	0x0a0d202e
    4b14:	3a352020 	.word	0x3a352020
    4b18:	74655320 	.word	0x74655320
    4b1c:	74786520 	.word	0x74786520
    4b20:	65646e65 	.word	0x65646e65
    4b24:	69662064 	.word	0x69662064
    4b28:	7265746c 	.word	0x7265746c
    4b2c:	20444920 	.word	0x20444920
    4b30:	30203a31 	.word	0x30203a31
    4b34:	30303178 	.word	0x30303178
    4b38:	39303030 	.word	0x39303030
    4b3c:	73202c36 	.word	0x73202c36
    4b40:	65726f74 	.word	0x65726f74
    4b44:	746e6920 	.word	0x746e6920
    4b48:	7852206f 	.word	0x7852206f
    4b4c:	46494620 	.word	0x46494620
    4b50:	2e31204f 	.word	0x2e31204f
    4b54:	200a0d20 	.word	0x200a0d20
    4b58:	203a3620 	.word	0x203a3620
    4b5c:	646e6553 	.word	0x646e6553
    4b60:	74786520 	.word	0x74786520
    4b64:	65646e65 	.word	0x65646e65
    4b68:	656d2064 	.word	0x656d2064
    4b6c:	67617373 	.word	0x67617373
    4b70:	69772065 	.word	0x69772065
    4b74:	49206874 	.word	0x49206874
    4b78:	30203a44 	.word	0x30203a44
    4b7c:	30303178 	.word	0x30303178
    4b80:	41303030 	.word	0x41303030
    4b84:	6e612035 	.word	0x6e612035
    4b88:	20382064 	.word	0x20382064
    4b8c:	65747962 	.word	0x65747962
    4b90:	74616420 	.word	0x74616420
    4b94:	20302061 	.word	0x20302061
    4b98:	37206f74 	.word	0x37206f74
    4b9c:	0a0d202e 	.word	0x0a0d202e
    4ba0:	3a372020 	.word	0x3a372020
    4ba4:	6e655320 	.word	0x6e655320
    4ba8:	78652064 	.word	0x78652064
    4bac:	646e6574 	.word	0x646e6574
    4bb0:	6d206465 	.word	0x6d206465
    4bb4:	61737365 	.word	0x61737365
    4bb8:	77206567 	.word	0x77206567
    4bbc:	20687469 	.word	0x20687469
    4bc0:	203a4449 	.word	0x203a4449
    4bc4:	30317830 	.word	0x30317830
    4bc8:	30303030 	.word	0x30303030
    4bcc:	61203639 	.word	0x61203639
    4bd0:	3820646e 	.word	0x3820646e
    4bd4:	74796220 	.word	0x74796220
    4bd8:	61642065 	.word	0x61642065
    4bdc:	31206174 	.word	0x31206174
    4be0:	74203832 	.word	0x74203832
    4be4:	3331206f 	.word	0x3331206f
    4be8:	0d202e35 	.word	0x0d202e35
    4bec:	6820200a 	.word	0x6820200a
    4bf0:	6944203a 	.word	0x6944203a
    4bf4:	616c7073 	.word	0x616c7073
    4bf8:	656d2079 	.word	0x656d2079
    4bfc:	0d20756e 	.word	0x0d20756e
    4c00:	00000d0a 	.word	0x00000d0a
    4c04:	00006325 	.word	0x00006325
    4c08:	3a302020 	.word	0x3a302020
    4c0c:	74655320 	.word	0x74655320
    4c10:	61747320 	.word	0x61747320
    4c14:	7261646e 	.word	0x7261646e
    4c18:	69662064 	.word	0x69662064
    4c1c:	7265746c 	.word	0x7265746c
    4c20:	20444920 	.word	0x20444920
    4c24:	30203a30 	.word	0x30203a30
    4c28:	41353478 	.word	0x41353478
    4c2c:	7473202c 	.word	0x7473202c
    4c30:	2065726f 	.word	0x2065726f
    4c34:	6f746e69 	.word	0x6f746e69
    4c38:	20785220 	.word	0x20785220
    4c3c:	66667562 	.word	0x66667562
    4c40:	202e7265 	.word	0x202e7265
    4c44:	0000000d 	.word	0x0000000d
    4c48:	3a312020 	.word	0x3a312020
    4c4c:	74655320 	.word	0x74655320
    4c50:	61747320 	.word	0x61747320
    4c54:	7261646e 	.word	0x7261646e
    4c58:	69662064 	.word	0x69662064
    4c5c:	7265746c 	.word	0x7265746c
    4c60:	20444920 	.word	0x20444920
    4c64:	30203a31 	.word	0x30203a31
    4c68:	39363478 	.word	0x39363478
    4c6c:	7473202c 	.word	0x7473202c
    4c70:	2065726f 	.word	0x2065726f
    4c74:	6f746e69 	.word	0x6f746e69
    4c78:	20785220 	.word	0x20785220
    4c7c:	4f464946 	.word	0x4f464946
    4c80:	202e3020 	.word	0x202e3020
    4c84:	0000000d 	.word	0x0000000d
    4c88:	3a322020 	.word	0x3a322020
    4c8c:	6e655320 	.word	0x6e655320
    4c90:	74732064 	.word	0x74732064
    4c94:	61646e61 	.word	0x61646e61
    4c98:	6d206472 	.word	0x6d206472
    4c9c:	61737365 	.word	0x61737365
    4ca0:	77206567 	.word	0x77206567
    4ca4:	20687469 	.word	0x20687469
    4ca8:	203a4449 	.word	0x203a4449
    4cac:	35347830 	.word	0x35347830
    4cb0:	6e612041 	.word	0x6e612041
    4cb4:	20342064 	.word	0x20342064
    4cb8:	65747962 	.word	0x65747962
    4cbc:	74616420 	.word	0x74616420
    4cc0:	20302061 	.word	0x20302061
    4cc4:	33206f74 	.word	0x33206f74
    4cc8:	000d202e 	.word	0x000d202e
    4ccc:	3a332020 	.word	0x3a332020
    4cd0:	6e655320 	.word	0x6e655320
    4cd4:	74732064 	.word	0x74732064
    4cd8:	61646e61 	.word	0x61646e61
    4cdc:	6d206472 	.word	0x6d206472
    4ce0:	61737365 	.word	0x61737365
    4ce4:	77206567 	.word	0x77206567
    4ce8:	20687469 	.word	0x20687469
    4cec:	203a4449 	.word	0x203a4449
    4cf0:	36347830 	.word	0x36347830
    4cf4:	6e612039 	.word	0x6e612039
    4cf8:	20342064 	.word	0x20342064
    4cfc:	65747962 	.word	0x65747962
    4d00:	74616420 	.word	0x74616420
    4d04:	32312061 	.word	0x32312061
    4d08:	6f742038 	.word	0x6f742038
    4d0c:	31333120 	.word	0x31333120
    4d10:	000d202e 	.word	0x000d202e
    4d14:	3a342020 	.word	0x3a342020
    4d18:	74655320 	.word	0x74655320
    4d1c:	74786520 	.word	0x74786520
    4d20:	65646e65 	.word	0x65646e65
    4d24:	69662064 	.word	0x69662064
    4d28:	7265746c 	.word	0x7265746c
    4d2c:	20444920 	.word	0x20444920
    4d30:	30203a30 	.word	0x30203a30
    4d34:	30303178 	.word	0x30303178
    4d38:	41303030 	.word	0x41303030
    4d3c:	73202c35 	.word	0x73202c35
    4d40:	65726f74 	.word	0x65726f74
    4d44:	746e6920 	.word	0x746e6920
    4d48:	7852206f 	.word	0x7852206f
    4d4c:	66756220 	.word	0x66756220
    4d50:	2e726566 	.word	0x2e726566
    4d54:	00000d20 	.word	0x00000d20
    4d58:	3a352020 	.word	0x3a352020
    4d5c:	74655320 	.word	0x74655320
    4d60:	74786520 	.word	0x74786520
    4d64:	65646e65 	.word	0x65646e65
    4d68:	69662064 	.word	0x69662064
    4d6c:	7265746c 	.word	0x7265746c
    4d70:	20444920 	.word	0x20444920
    4d74:	30203a31 	.word	0x30203a31
    4d78:	30303178 	.word	0x30303178
    4d7c:	39303030 	.word	0x39303030
    4d80:	73202c36 	.word	0x73202c36
    4d84:	65726f74 	.word	0x65726f74
    4d88:	746e6920 	.word	0x746e6920
    4d8c:	7852206f 	.word	0x7852206f
    4d90:	46494620 	.word	0x46494620
    4d94:	2e31204f 	.word	0x2e31204f
    4d98:	00000d20 	.word	0x00000d20
    4d9c:	3a362020 	.word	0x3a362020
    4da0:	6e655320 	.word	0x6e655320
    4da4:	78652064 	.word	0x78652064
    4da8:	646e6574 	.word	0x646e6574
    4dac:	6d206465 	.word	0x6d206465
    4db0:	61737365 	.word	0x61737365
    4db4:	77206567 	.word	0x77206567
    4db8:	20687469 	.word	0x20687469
    4dbc:	203a4449 	.word	0x203a4449
    4dc0:	30317830 	.word	0x30317830
    4dc4:	30303030 	.word	0x30303030
    4dc8:	61203541 	.word	0x61203541
    4dcc:	3820646e 	.word	0x3820646e
    4dd0:	74796220 	.word	0x74796220
    4dd4:	61642065 	.word	0x61642065
    4dd8:	30206174 	.word	0x30206174
    4ddc:	206f7420 	.word	0x206f7420
    4de0:	0d202e37 	.word	0x0d202e37
    4de4:	00000000 	.word	0x00000000
    4de8:	3a372020 	.word	0x3a372020
    4dec:	6e655320 	.word	0x6e655320
    4df0:	78652064 	.word	0x78652064
    4df4:	646e6574 	.word	0x646e6574
    4df8:	6d206465 	.word	0x6d206465
    4dfc:	61737365 	.word	0x61737365
    4e00:	77206567 	.word	0x77206567
    4e04:	20687469 	.word	0x20687469
    4e08:	203a4449 	.word	0x203a4449
    4e0c:	30317830 	.word	0x30317830
    4e10:	30303030 	.word	0x30303030
    4e14:	61203639 	.word	0x61203639
    4e18:	3820646e 	.word	0x3820646e
    4e1c:	74796220 	.word	0x74796220
    4e20:	61642065 	.word	0x61642065
    4e24:	31206174 	.word	0x31206174
    4e28:	74203832 	.word	0x74203832
    4e2c:	3331206f 	.word	0x3331206f
    4e30:	0d202e35 	.word	0x0d202e35
    4e34:	00000000 	.word	0x00000000

00004e38 <_tcc_intflag>:
    4e38:	00000001 00000002 00000004 00000008     ................
    4e48:	00001000 00002000 00004000 00008000     ..... ...@......
    4e58:	00010000 00020000 00040000 00080000     ................
    4e68:	42000400 42000800 42000c00 42001000     ...B...B...B...B
    4e78:	42001400 42001800 0c0b0a09 00000e0d     ...B...B........
    4e88:	00001fd6 00001fd2 00001fd2 00002004     ............. ..
    4e98:	00002004 00001fee 00001fdc 00001ff4     . ..............
    4ea8:	00002278 00002258 00002258 000022ae     x"..X"..X"..."..
    4eb8:	0000226a 00002286 0000225c 00002294     j"..."..\"..."..
    4ec8:	00000043                                C...

00004ecc <_global_impure_ptr>:
    4ecc:	20000018                                ... 

00004ed0 <__sf_fake_stdin>:
	...

00004ef0 <__sf_fake_stdout>:
	...

00004f10 <__sf_fake_stderr>:
	...
    4f30:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4f40:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4f50:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4f60:	00006665 00004f82 00004f85 00004f88     ef...O...O...O..
    4f70:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    4f80:	2d2b005d 00303000 00005878                       ].+-.00.xX.

00004f8b <_ctype_>:
    4f8b:	20202000 20202020 28282020 20282828     .         ((((( 
    4f9b:	20202020 20202020 20202020 20202020                     
    4fab:	10108820 10101010 10101010 10101010      ...............
    4fbb:	04040410 04040404 10040404 10101010     ................
    4fcb:	41411010 41414141 01010101 01010101     ..AAAAAA........
    4fdb:	01010101 01010101 01010101 10101010     ................
    4feb:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4ffb:	02020202 02020202 02020202 10101010     ................
    500b:	00000020 00000000 00000000 00000000      ...............
	...

0000508c <_init>:
    508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5092:	bc08      	pop	{r3}
    5094:	469e      	mov	lr, r3
    5096:	4770      	bx	lr

00005098 <__init_array_start>:
    5098:	000000e5 	.word	0x000000e5

0000509c <_fini>:
    509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    509e:	46c0      	nop			; (mov r8, r8)
    50a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    50a2:	bc08      	pop	{r3}
    50a4:	469e      	mov	lr, r3
    50a6:	4770      	bx	lr

000050a8 <__fini_array_start>:
    50a8:	000000bd 	.word	0x000000bd
